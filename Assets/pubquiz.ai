%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: quiz-08.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: kot
%%CreationDate: 1/22/2020
%%BoundingBox: 0 0 1400 600
%%HiResBoundingBox: 0 0 1400 600
%%CropBox: 0 0 1400 600
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">START FILE EMPTY</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-01-22T21:18:36+04:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-01-22T21:18:38+04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-01-22T21:18:38+04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>112</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBNgE2AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABNgAAAAEA&#xA;AQE2AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAcAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9OZiOQ7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FULdarpdo4juryC3kIqElkRCR40YjKpZoRNEgfFthgnMXGJPuCh/iLy//ANXO0/5Hx/8ANWD8&#xA;xj/nR+YZ/lMv8yXyKJtdQsLsE2tzFcAdTE6v/wARJyUMsJciC1zwzh9QI94V2ZVUsxooFST4DLAG&#xA;qRAFnklS+bfK7Gi6vZsaE0WeMmgFSdj2GWeDPuLi/n8H8+PzTXruMrctL7vzFoFlO1vd6jbW860L&#xA;RSyojCu42Yg5MYpEWA409ZhgalIA+9FWd9ZXsPr2c6XENSvqRsGWo6ioyMokGi3Y8kZi4mw1Jf2M&#xA;TlJbmKNx1VnUEfQTlEs+MGjIA+9vGKR3AK39KaZ/y1wf8jE/rg/M4v50fmE+DPuPyVYbq1nr6MyS&#xA;068GDfqOThmhL6SD8WMoSHMUq5YwdirsVSrWvNPl3Q1U6rqENoz/AGI3Yc2/1UFWb6BlkMUpcg4u&#xA;o12HF9ct/tSgfmj5M+EtdTIj14SvbXCxmmxIcx8TkxppG66OGe29OKskX5Mg0zWNL1S3+saddxXc&#xA;NaF4XDgEdjTplU8co8w5+DU48ouBBRmRb0FNrejQStFNfW8cqGjxvKisD7gnMeWqxA0ZC/e3RwZC&#xA;LET8kTBcQXEfqQSLJHVl5KajkhKsPmrAgjLoyEhY5NcokGip3eoWFnx+t3MVvzrw9V1StOtORGQy&#xA;ZoQ+ogMoYpS+kEtWupafdsyWtzFOyAMwjdWoCSAdj4qcceaE/pIKzxSjzBC66vrK0Cm6uI7cPspl&#xA;dUBI8ORGXRgTyDj5M8Mf1SEb7zS221LTrpitrdQzsBUrFIrkDxopPjjKBHMIx58c/pkJe423d39j&#xA;ZqrXdzFbq5ohldUBI8ORGVTyRj9RAcmGKc/pBPuQ3+IvL/8A1c7T/kfH/wA1ZH8xj/nR+YbPymX+&#xA;ZL5F3+IvL/8A1c7T/kfH/wA1Y/mMf86PzC/lMv8AMl8iiLTUtOvGZbS6huGQAuIpFcgHYE8SfDJw&#xA;yRl9JBa54Zw+oEe8InJtbsVdirsVeUfmHFNJ51l9HTYtRYaOa+sgcQqZHrMKmgK++aTtAes71t+P&#xA;wdg9T2TX5feXB+8+fk86vdZ0S005NIuVs4JfUFy8voSNPR1HFC6ow4gb0GY4hImxy+H63ekfveO5&#xA;cqrom1lfWWoTrqdhd2ektp1ojW8lqrxNNwbhx2AdnZq1DfdvXKzcOfP8d17+fLnyccxEY8JEsgnL&#xA;e+n7Hp/k3z5Dr9rfabckJq1lCHkGwEsUsfJZF9x9lx479DnQaLNx1fO3ju3OzzghIj6CJfB5pDHe&#xA;/wCCtIM1nDb2o0qY20qIqyTE255O7VLGnT6flm0wcPjzqdmvp/T593lyfN9Ucng4wcQjHjPr7+db&#xA;cxfPfnzDM/yP8x3M3krT7fUJWmIaSKCVyWKqkhVEJPYDYeGYmokBkIex7LiZaaMvf96C8xw37+Z/&#xA;NP1WzhnSlp9ZuJUV2ij9NNkLEULfT8suyCJGLimYer57j5d3uJHV53UyyDNqODEMvo3J/h25+fft&#xA;1iD0ST8rNZu7Hz35jt1dmsmWF3tq/ByoF5AdA1Nsn2hLho+blezIMgR/RDMdQhivNT1meO3hkVrm&#xA;3LXMsfNkT0ITxUkgAv8AZ38c887UkfGnQsbb939r6HpzwwgCa2O3fufuY5febfJlrfNZXD26GyaS&#xA;GaNbWQs0oejcn4EHjxIFMxzpshiB6dvfv73KjCZ3HFv5hNNPvdGvEbULFUe4dlktZLOP0FSN5GQk&#xA;8+L8QEaoNdwRSlBkckzjmZH0y/h4eTWYSoRP09b36Mt8recIdR1TUNDuSF1HT/TdT2lhljWRWH+U&#xA;vLi3399uw7O1vjQF/VTptXpPDAkPpLKM2Tgsd89eYZ9E0IyWYVtSvJUtNPWQ0T1pjQM3+Sgqx9hl&#xA;uKIJJPIbuv7R1JxY6jtKRofreRas9podneDU5be6vEuOeoa4az3ErlSohjao77hBsKHpuRfp5eNK&#xA;OaEiMe44e+r86r3eW9bPK6yEsUZ6bLCMsxIlx3yBryu/18uqTwfmbZahd2qywXtxa2SxpEhiR41S&#xA;M1+OONq0NfiNSfDLI6bHAzkCQcnW+XPl8SSxnLNljihLhlHDyHDz5fV8AAyjT9TH1m68x297DaXM&#xA;cqBLe2Vk9dZSSqhDWqBGB+KtBv2yoS8GMMMuLJxH6q/FAeZ5d7MGeXJl1OMxweGAeDv2+H1V3bnu&#xA;eneUfN9l5gjuYlpHqFg6peW/TZ1Dxyp1PCRDUeHTtXKc2IwlT1nZ+tjqcYmOfVi88UzX+uMqxrb/&#xA;AKTAnmdAz/3ScEVyfh5Hrsa9qHOA7R4vEyUNuLn3fV+Pg9hhI4Ybm+DYJV+W+t3Nn5q83wO7PZDU&#xA;Xb0a7KzzTBmUdieIr40zoOzshFjo0a/EJQgevD+pmXmX1J9e0hrWOOeR7W6aFZU5oatBQlar2zG7&#xA;aMuPHwjiO+x36fgtGioY58RoWOXxeeXN7d6d+YXlt7aYhntXSZl+FZVJkJDKOoJAOYXZEyCCO8uy&#xA;zQEsU7ZT56uxqN95ZeCzS9nFzPSylUOpcQ7VB6jvnaYpCWKdy4eW/wCOd8q68nz3toShmw8MPENy&#xA;9Pfy+Vc7Ow5l5tcXuo6T538syW5Fncvezx3McKiNCshhDxlB+yRtQ/r3zLIA04qXHUfq7/N0/Z05&#xA;HWG4+HeT6e7yei/mVrcKabpGsvbxSwaddM10lxE80KtJC0ac1RW/ab4Sdq+9M5vXQlk4TEcr/Q+o&#xA;9kwFzgSRxAVXN5bb+ZtCls5tNi+pSTX06uZRaymWtKBIz6fwipzA8KQruHu/X8/g9KY+sSuXpHKx&#xA;X3p7DeJKtt5gistLeGzf6ha2QjH78ohHrel9pgeoZqdtvGsS6XufL7x955W0+GN8XFkuXq4u7fla&#xA;R+Wtau4/zG0uLSCVNs0i3rQ7RuGHKVWA2KLxA+YqO2bDSAxFtXaEYywy4vg+kdPv4r2D1E2YbOh7&#xA;HNrGVh4qcDEorJsHYq7FXkv5krbN5xlFxfNYp+iNuKsxmPqvSGg7N3rmj7Rrj3F7B6vscn8vtHj/&#xA;AHny25sK0vT4bS+k8y32nS3umPELBVaO3aP1lCNyX1Jan4V/k75CGYx2r8fJ2OrgckvCjIRn9XXk&#xA;j72K0j1CeXUtGewWezT9D2cJjQlnbkJZRHUfFy6Dw8elU8kpGx5fj3I00ZCFY5iVS9RP3BL/ACBc&#xA;tL+Y18bdqxQ2PoyuDUFozErUP+vWntmy0Iox9/6XXe0VHSTPff3FEWdvbR+UtOkF2Li4k0iQtCFb&#xA;9yot2AUudqt7fwzosMwc0x4fCaFyr6u7et/mfOjs+KajDIY8cvG44mcqx39PO9r+ew8rT78l/wDl&#xA;EdM/5iJP+TxzW6z+9+T3fY3+Kj4/eiPNdvbS+a/Mjz3Yg9M2hSAqzGZjGlB8P8vXfM2UxEY7x8fq&#xA;519Pny2+zk8prcUp589ZvCqG4uuPblzH6ebGvy//AOU+8x/8Yov4ZHtPkPe7H2W6/wBUM6ItzPqA&#xA;mZifrNuYoFDkO31eDduPw0T7XxeGed9pD97P1VsNu99Ew3wxodDv3bn70uHlrTIruWVEglvL5nuL&#xA;xpbZ5FDl/wCaRyoLciaJlY7QlCAIok9K5fNs3Oxuhy3RcMC2S3a2ReVHdQ7QwJCCkI5rHGpHJEMj&#xA;EMQCd2+eRy5+KZiSDE9a/FfYirAJFEed8+/vLHfIttrz+ZtX1vUoGtJZD6SqdqMrDZD3VFQCudD2&#xA;fjrccq2a9bKPAIjd7bYXDXFnDM32nUcvmNjm+ibDz0xRpg35pC0k1Hy3FftIlh9ZmkmaKhaohKil&#xA;e9GOZmnMxCRgLl3PM9vDHKeOOUmOM3ZHweOeerZdQl0HT7dnjh1C/miAenLcwIjNTav71syxOYxC&#xA;UxUuGyPN0ekw45Z5QxSMoGYAke57Domh29pbw6bpdusUMYokagAbdWY+PiTnPylKcrPN9Mx44Yoc&#xA;MRUQx7zJa2enecJ4r6A3IbTUkEULFP3vOUIzNT7/AJZtIDP4FYiBO+v9h/HdzeG7W/K/nuLOJHGY&#xA;/wAPO9vMf2sf8s6pNYfmjCLd+JvdNAkQHYNGxK18aJHTfsct7QB4L6hl7MZB4nCPpkD+sM2Vraa8&#xA;1O5mp6raiDDCFLHk8CEsDSg4jxzzPtGN5Jm6N8vm+oYrEYgD+Hn8WOeSv+Us84/8x5/5PT50Gh/i&#xA;+H6WvWf3eP3fqZ5r6QPeaIs8gihNhceo5Bagrb9lqcxu3IiRxgnhHe42iJEZkCzxD9Lz3V/T/wAe&#xA;+WfTT04/qzcIyvDiP3lBx7U8MxOyuY95djk/u5p/5kWNrvQhJcmzT61NyuQCSgEPUAb1zs9Kf3U/&#xA;Tx+Xf+v3Pn3tCLy4fX4e59Xd9P8AZ3d7z3VVgXzX5UEDF4RfycHYFWYcofiIO+/XffxzOl/i49PB&#xA;6Pp7vJ0XZ1/nTc/F/e/X/O83vPl23guLW8guI1mgl4rJE4DKykEEEHYjNTh5F7/NIggjm84886Lp&#xA;x1G50jy9YW5FnGLnWJ40jjaCBtvREg4nlIOtN+OavWZBxcIOw5vQdmSIAyZZH1Go89z3sG85eYbS&#xA;35yabarYS3Y42drESfRiA4GWp/aYghfp/lFacOMyO/L8bfrdzjhKMeGUuIjmf0Mx/LXyaNB0v61d&#xA;JTVL1QZq9Y4+qx/xb3+WbIB57tDV+LKh9Ieu6DZSW1mWk2eY8uPgKbVzKxRoOjzSspnlrS7FXYq8&#xA;k/MqaCLzo3qWP19n0oLEp5UjcyvSWi9eOaTX3x7Gtg9Z2NGR0+0uH1/Pbk84e68wXWqfobR9PgvT&#xA;DCt0Uld1I5hQzbzRJ1YDbIY8Al6uvw/U7bNmjjPFI1vXL9iIn8vfmjft6ZsodPDAI06zISFApQOZ&#xA;J5FFP5cthpIx/H6nEPaGADnfw/YGaeRPJMPliyk5yCfULnibmVa8QFrRErvQV698zMZ4ZAuh7U1B&#xA;1MTEbCiB8UpsLCJ9JttKtbGZbiytZLbV7mpcgrWBuKUoAu/4e+b6M8kchOSUfCNcPv8Ax5m/Lk+R&#xA;ZMWKUR4UJnPGRM+6vx5Cut80V+XGp6P5f8u2trqmo2sEtrNI0imVQ3EylgQhIfcfsla+1cw9Tp5y&#xA;y2A9f2V2pp4aUCUt91S7votRv9W1q406cx6tLH+hXctD+6jCx+oylannwYqD/tZN5CYxxSj6T6/d&#xA;8veOm/up5jVSwSlPJnhP1j92fPfz/q9/3JD+W1xHc+efMs0J5w0VFkG4IR+AIP8Alca5V2kdh73f&#xA;ezEaMh/RD0KNpPrGpLFGrSNPB+9Yn4EFvCWooHxFhtvSnXPOe1JRGaQIs0K8n0LEPRHfbf47lhL6&#xA;NrN9q2qXFxrl5YWsl1I9isZmdWiZ2I2BHGgptmbiy4iPVKm8nhAAgCa35Mj0O31GG1u7aTU7m5s4&#xA;7d/rd/choCYyy/ukMvxMKcqsPEUO2YmomDI+Eb9O/Sx+K2a5VsTEXxbAb796lBrEg/MFtJaU/VZr&#xA;NHmX7XpyruGA94qVHyzZdj5DwiJ5U06jGPD4hzv8fa9dtUiS2iWE8ogoCMO4p1zp48nQSJvdin5m&#xA;afJLpdnqkUK3DaPcrdSQMOQeEqUkBA3IAbkR3pmVpzdxuuIc3RduYbxxycPF4crI7x+A8x17TZru&#xA;Kw16dYoQmoC9sVi6D0pAZE9NSz8CtOgJ2FBTLMUo0dOZcWURO9d/6BY+HU7uiE5RmNaMYx4JTjsD&#xA;yI+XPhLOdM8/+U9ME81zdM03ELHbxxSPMTuSPTC8h0HUZi4dFkvk9Rqe39Nw7S37qr79mM3Gq67f&#xA;XV75i5R2n6cH1C0s+SPcx20HTkKHizGRmqOlfvtyY8OWY08jISj6tvh+vnt5Hm89LWamEZa2AhKE&#xA;/Rvv5Du7uXXmRVMQ8mTLq/5pXF5bnnaWFuyJIPskIqw8h7OzMwy7tGfo95cn2bwEZR/RiXp8KFLu&#xA;7ghgMlxcXEUqNyoBE0Kox40q1XjYCnfPNu0sY8WQomR5f2dX0vHK4Ak1EA/ekmi2MekeZPME93cx&#xA;RQ6lLHcQNLIsZJYyPItHK/ZMlKjb8c2vZ+qhRs0dkaiMpxiACaZHNq9vqeoWlzbRNdaZpto1u8yH&#xA;iks8vBuEchFG4iHqNjXr1zF7V1WPLKOxlCPPp39aNfsa8GGWOJBNTkb+H4LB9WufV/MnQYGAE8Fv&#xA;/pCqeQV3WR+NaD9kg/Th7LjXC5cx+6kfx0ZD5olgiuNDknt/rUS3Uxa3qRz/AHOy1G/XOz0cZHHP&#xA;hPCe/wDH39Ob537SzhHJhOSPHGzY7/p+fu68mA6w7P5u8qu0awlr+QmJK8U+KH4Ry32zOyxnHBUz&#xA;xS4dz3uh7Jnjlqrxx4IeJsO56vqXmweXdDuZIE9fVLtlh021G5eUg7kDfig3bOcy6jw4nvP4t9S0&#xA;ui8fIAdoDmXmV2bCNRPBJdzSyRiXWJ5tvVu2JZlBUEKCwovLp9Gao9xHu9/f+N3q8YmARIR5+iu5&#xA;K/KWmQN5kGs+ZHCtVXsbZY5HDv8AZj4hVPwx0HEeNMzYZ8cR7nG1gyGBjjHvNh7J5U1fQdV1VbdL&#xA;pWlAdooHDI0hjoXADha8OQJ/28y9POMzt0ea1emy4o2Rsz7M91LsVdirsVeT/m5Lrekaqus2sFxL&#xA;ZXln+jp5LVQ5UFy5Vx1XmDsR+BzV63TSnK+hD0fZGTFLH4cqsS4hbB/y6lnuvO93eG1nt4Tp/pqZ&#xA;kKklXhHXpvTHDAxFFzu1Zg4huPq/QXt+maFaXVlHPI8gd+VQpWmzEdwfDMyGMEW8xPKQaTG10PT7&#xA;dxIql3XdS5rQ/IUGWDGA1SyyLEfPvlm8jivNV0mCab60o/SdpatxmkRQASqVVZdh8SEgn36ZlA48&#xA;gEcosA7fju+x57W6DNCUsumlwzkKkNt/d5/b3PKpPzC0a3sG0ySWa3US+rNDJa8Z+QXiFataeP2s&#xA;zJYIzzRzWfSOXQ/ju5dXmYeNi009MYxqRuzfEOX6vvSXU/Puo6uY9P0C3uri49P0YZpATJGh6iGJ&#xA;C4jPi/L7jvhGPFjlKYHCZcz+PxbbjhnyxhikTMQ+kVy/SfjyDPvy08mzeW9Ika8p+kr1le4VSCEV&#xA;QeEdRsSORJpmo1efxJbcg9z2ToDp8Z4vrlz/AFI/zLq9/wCXLh4bmwvJbbUnjulltuJjcRogEbGh&#xA;YFSgJG33ZzGu0WTjJv0zem0pjMCiLjY380rf8yg7xl9L1Bo4VZYouKhV5sGY7CpJIHU5gS0MjERJ&#xA;NR5bOSMIFkGNlDX35i3s4laDRbq7vZ39QPdLVVcUCUjjTfjxFACPHLJaKU58UiSUwwiIqwAO5W8i&#xA;+XNZXU7nzDrfJb25BEcb7P8AGQWZlH2dhRV8M3Ok05judnF1meJAhHk9m0Dn+i4uXi3H5cjm5xfS&#xA;6LN9SYMqspVgGVhQg7gg5Y1EAii8n88eVtR0O7TVdJ0x9Q06OjFLYg3EFG5cfSYfvUr04kHxB6nN&#xA;hnhIETHMUT5e95TXdiZIyEsBPDGXEI8wD7urELT8wY59YuLhll/SkqSeompW6pTmKFo41ZgfTHUf&#xA;Dt8W/wAWR/Ixlh8KM5De+Lmb+73dxo9HDyazLDUnUZMcZnh4eGiPvs/rFhT82adffUXstN1OB554&#xA;1eaaPYASL8Vu0lAqcu5AFOjfCdr9NqfF4qBHAa36/jq4mbSDTSgZSifE9QrkPh9x6sl/L/yXF5Z0&#xA;tld1m1C6Ie6mX7Pw14on+StfpOajVZzOXcA+gdlaKODHYPFKW9jl5U9Bn0C4bTIbm2QHUokYohcx&#xA;Flcg8RIASjbCh/2xr9Z2cM0QRtMci7HHqeGRB+kvPbjzvpGlJNp90l7pV1xMUi3EAaQVPxsr8pAS&#xA;ez1985g6HJjkd+e24/H2O6EPEoipDyP9nySjVvzT09o1h0m2uLq4VuUImrHCJCOIb0kZjId9gaY4&#xA;tGQKJsdzaNOeZofeqeQ/LGrHUpvMethheTcjCkmz1k+07L+zt8IX8Omb7Sacx9RcTWaiPDwR5Mn8&#xA;4Lq+n6TY+YbC2muP0ZcSSOLcK8iB4xGJAjfaUEmvWnhStN/pIxlCUZcpfoeL7chl48eTHzx35866&#xA;PLI9UutZ82+XpBZXifVrz1J57lDVjIyVJIFB9jM2YhDDwRO0Y0N7dHoceWWqGSY3nOztQZ75yfWt&#xA;KvLTzLp8E8qWSSWzSWyrI0TT7cirdAQKVp8+1eZzYJSPEO59U7PyYpQlinXq338mEp5xv0sJtPSz&#xA;1FbS5kEs8YiHxsBQVJ3/ABzHGlO3l7/x1dyfDMxM8PFEUN1cefdW+u2d59V1D6xp8aRWjeitERAQ&#xA;oA6dz1w/lpXd7/dXKmHh4uGUfTU9zugYdV1HUPNPl+eO2vY5rfUUmnuZkKk+rJECaqKDZDXLtPhO&#xA;P7PsY5zDwpDauGq+b6X0fUzewtzFJoqByOhrWhH3Ztcc7DxOXHwlMMsanYq7FVrokiFHAZGFGU9C&#xA;MBCQaSGbywxlYwzBYyfhVgSR7ZQcLkDP3pvp1q1rZxwMwYpWrDpuxP8AHLoRoU0zlZtE5Jg7FUh1&#xA;nynYX8nrCKIyd1lQMtfaoNMqlA9DTaJg/ULS6HypdW44QQRRp/xXxUfcAMrOOR5t0ckI8tkysPLf&#xA;CQSXbh+O4jXcH5k5KOLvYTz9yb3VrDcwtDKKo33g+Iy0iw0xkQbCRHyvPU0nWnaoOU+C5H5gdzv8&#xA;L3H+/wBPuOPglfzA7lSDyvRwZ5qoOqoKV+k4Rh70HP3BPY40jRUQcUUUUDsBlwDjk2uwoaIBBBFQ&#xA;diDgSkl55ZjkYtbOEB6xsKr9Byo4t7Dd4oIqQsPLPNn5Zef7a8efRNRso9LanGCWNKxH+UEQPVfA&#xA;n5ZsYa4xj67vyeX1Hs5CeQnFwiJ6S/BR35eWHnPSNTCeZLiyv9LYUT0iyvCyj4SqiGNWXxU/MeBx&#xA;M+fFM3Rt2/Z2i1GnjwExMPebHu2ewKysoZSCpFQR0IwOWlusaFZ6kn71V9Qd2UMDT+YHK8mMSbce&#xA;YwSJPKM9u5MEEKk7Fowq/wABlPgEcnI/Mg8yUZbeWbhmBuJFRO6rux/hkxhPVrlnHRkMUMcUSxRr&#xA;xjUUC+2XgU4xNm0mvfLayTGS3cRo25QjYH2plMsW+zfHPQ3RWlaU1nHMkrLIJaVAG1BXrX55OEKY&#xA;ZMnEg7nyzymZoJQkZ3CMCae1cgcPc2Rz7bqX+F7j/f6fccHglP5gdzv8L3H+/wBPuOPglfzA7kx0&#xA;fS5LD1ubh/U40oCKca/1yzHDhasmTiTLLGp2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxVplVlKsAVIoQehGBKA/QWlf74/wCGf+uQ8OLZ40u9F29tDbxiKEFUG4Ukmn3k5MCmEpE81XCx&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVVPQk8Mn4ZY8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXj&#xA;DvQk8MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6&#xA;Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXjDvQk8&#xA;MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4&#xA;ZXjDvQk8MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXjDvQk8MfDK8Yd6Enhj4ZXjD/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:DF4BFDEB3A3DEA11A7659B5FE4F25850</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:DF4BFDEB3A3DEA11A7659B5FE4F25850</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:bc073a08-a065-45de-8631-1d2bdc12452e</stRef:instanceID>
            <stRef:documentID>xmp.did:26C56674063AEA11B0C083AC3552A392</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F5A4B09EAD1CE411AFA2C966AE92F6E5</stEvt:instanceID>
                  <stEvt:when>2014-08-05T19:01:09+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:DF4BFDEB3A3DEA11A7659B5FE4F25850</stEvt:instanceID>
                  <stEvt:when>2020-01-22T21:18:38+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1400.000000</stDim:w>
            <stDim:h>600.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -600 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 600 li
1400 600 li
1400 0 li
cp
clp
1400 600 mo
0 600 li
0 0 li
1400 0 li
1400 600 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .952941 .890196 rgb
f
892.278 448.147 mo
835.669 448.147 li
808.784 421.222 li
807.979 421.24 807.112 421.253 806.157 421.253 cv
779.995 421.253 759.306 414.035 744.684 399.808 cv
741.822 397.026 716.652 371.78 716.652 371.78 cv
731.284 386.007 751.97 393.222 778.132 393.222 cv
779.34 393.222 780.419 393.208 781.382 393.179 cv
790.827 403.304 li
791.956 403.304 li
807.637 420.116 li
864.252 420.116 li
892.278 448.147 li
854.018 410.276 mo
846.766 403.304 li
847.43 403.304 li
825.7 382.408 li
836.451 376.381 844.98 367.765 851.119 356.724 cv
858.299 343.801 861.938 327.345 861.938 307.817 cv
861.938 281.618 855.507 261.171 842.812 246.963 cv
843.603 247.752 865.144 269.246 867.865 271.889 cv
873.388 277.261 877.886 283.664 881.347 291.064 cv
881.347 314.289 li
881.347 327.948 884.032 339.611 889.356 349.152 cv
888.048 362.946 884.629 374.879 879.144 384.756 cv
873.066 395.692 864.631 404.255 854.018 410.276 cv
761.316 339.407 mo
753.808 339.407 747.43 338.286 742.082 336.01 cv
739.025 329.287 737.481 320.998 737.481 311.239 cv
737.481 304.4 li
737.481 289.796 740.94 278.485 747.751 270.787 cv
754.524 263.138 764.46 259.418 778.132 259.418 cv
785.719 259.418 792.169 260.564 797.579 262.893 cv
800.647 269.597 802.197 277.85 802.199 287.558 cv
790.546 288.224 781.876 291.922 775.78 298.814 cv
768.966 306.515 765.508 317.829 765.508 332.429 cv
765.508 339.267 li
765.508 339.273 765.508 339.278 765.508 339.284 cv
764.151 339.366 762.754 339.407 761.316 339.407 cv
.901961 .745098 .623529 rgb
f
778.132 259.418 mo
764.46 259.418 754.524 263.138 747.751 270.787 cv
740.94 278.485 737.481 289.796 737.481 304.4 cv
737.481 311.239 li
737.481 325.844 740.94 337.157 747.751 344.857 cv
754.524 352.505 764.46 356.224 778.132 356.224 cv
791.81 356.224 801.795 352.498 808.642 344.841 cv
815.524 337.14 819.009 325.831 819.009 311.239 cv
819.009 304.4 li
819.009 289.808 815.524 278.508 808.642 270.801 cv
801.793 263.144 791.809 259.418 778.132 259.418 cv
807.637 420.116 mo
782.474 393.137 li
781.255 393.194 779.819 393.222 778.132 393.222 cv
751.97 393.222 731.284 386.007 716.652 371.78 cv
715.072 370.247 699.841 354.967 699.841 354.967 cv
699.841 354.967 694.554 332.965 694.554 307.817 cv
694.554 279.643 701.99 258.118 716.652 243.858 cv
731.284 229.631 751.968 222.421 778.132 222.421 cv
801.847 222.421 826.224 230.405 826.224 230.405 cv
826.224 230.405 838.395 242.452 839.837 243.858 cv
854.502 258.123 861.938 279.644 861.938 307.817 cv
861.938 327.345 858.299 343.801 851.119 356.724 cv
844.9 367.909 836.228 376.605 825.278 382.643 cv
864.252 420.116 li
807.637 420.116 li
0 .368627 .341176 rgb
f
761.316 242.603 mo
747.645 242.603 737.71 246.321 730.935 253.969 cv
724.121 261.67 720.666 272.983 720.666 287.583 cv
720.666 294.427 li
720.666 309.029 724.121 320.347 730.935 328.04 cv
737.706 335.686 747.639 339.407 761.316 339.407 cv
775 339.407 784.978 335.682 791.826 328.025 cv
798.709 320.326 802.199 309.02 802.199 294.427 cv
802.199 287.583 li
802.199 272.996 798.709 261.692 791.823 253.988 cv
784.975 246.327 774.995 242.603 761.316 242.603 cv
790.827 403.304 mo
765.657 376.32 li
764.438 376.378 763 376.405 761.316 376.405 cv
735.151 376.405 714.466 369.194 699.841 354.967 cv
685.175 340.704 677.738 319.181 677.738 291.009 cv
677.738 262.824 685.175 241.306 699.841 227.046 cv
714.463 212.82 735.149 205.605 761.316 205.605 cv
787.631 205.605 808.392 212.82 823.025 227.046 cv
837.687 241.31 845.124 262.827 845.124 291.009 cv
845.124 310.532 841.482 326.989 834.301 339.912 cv
828.091 351.097 819.412 359.793 808.464 365.834 cv
847.43 403.304 li
790.827 403.304 li
.466667 .929412 .890196 rgb
f
795.167 331.014 mo
802.839 322.428 806.673 310.231 806.673 294.427 cv
806.673 287.583 li
806.673 271.78 802.839 259.591 795.167 250.996 cv
787.49 242.416 776.208 238.124 761.316 238.124 cv
746.422 238.124 735.177 242.416 727.581 250.996 cv
719.982 259.591 716.184 271.78 716.184 287.583 cv
716.184 294.427 li
716.184 310.231 719.982 322.428 727.581 331.014 cv
735.177 339.597 746.422 343.89 761.316 343.89 cv
776.208 343.89 787.49 339.597 795.167 331.014 cv
767.472 371.698 mo
766.102 371.852 764.049 371.926 761.316 371.926 cv
736.239 371.926 716.788 365.203 702.96 351.752 cv
689.133 338.305 682.222 318.058 682.222 291.009 cv
682.222 263.959 689.133 243.707 702.96 230.261 cv
716.788 216.812 736.239 210.085 761.316 210.085 cv
786.54 210.085 806.069 216.812 819.899 230.261 cv
833.722 243.707 840.641 263.959 840.641 291.009 cv
840.641 309.849 837.225 325.428 830.378 337.735 cv
823.545 350.046 813.662 359.007 800.752 364.632 cv
836.312 398.822 li
792.775 398.822 li
767.472 371.698 li
.117647 .772549 .717647 rgb
f
798.283 334.127 mo
805.955 325.541 809.794 313.348 809.794 297.54 cv
809.794 290.702 li
809.794 274.9 805.955 262.703 798.283 254.115 cv
797.341 253.069 796.349 252.084 795.301 251.163 cv
802.881 259.745 806.673 271.878 806.673 287.583 cv
806.673 294.427 li
806.673 310.231 802.839 322.428 795.167 331.014 cv
787.49 339.597 776.208 343.89 761.316 343.89 cv
748.308 343.89 738.089 340.612 730.645 334.068 cv
730.694 334.127 li
738.296 342.715 749.533 347.004 764.428 347.004 cv
779.323 347.004 790.602 342.715 798.283 334.127 cv
0 .368627 .341176 rgb
f
702.96 351.752 mo
703.273 352.053 703.601 352.329 703.912 352.623 cv
691.531 339.206 685.337 319.718 685.337 294.122 cv
685.337 267.073 692.251 246.823 706.081 233.375 cv
719.904 219.928 739.361 213.201 764.428 213.201 cv
789.091 213.201 808.293 219.65 822.066 232.498 cv
821.358 231.737 820.644 230.984 819.899 230.261 cv
806.069 216.812 786.54 210.085 761.316 210.085 cv
736.239 210.085 716.788 216.812 702.96 230.261 cv
689.133 243.707 682.222 263.959 682.222 291.009 cv
682.222 318.058 689.133 338.305 702.96 351.752 cv
f
800.752 364.632 mo
803.862 367.749 li
836.186 398.822 li
836.312 398.822 li
800.752 364.632 li
cp
f
793.915 398.822 mo
771.522 374.813 li
767.472 371.698 li
792.775 398.822 li
793.915 398.822 li
f
814.471 262.385 mo
807.051 262.385 801.036 256.373 801.036 248.959 cv
801.036 241.538 807.051 235.53 814.471 235.53 cv
821.884 235.53 827.895 241.538 827.895 248.959 cv
827.895 256.373 821.884 262.385 814.471 262.385 cv
level3{
gsave
clp
[13.4285 0 0 13.4285 814.466 248.958 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@
o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4
ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56ks7=e@o@<m4ec56k
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s7=e=o$mL+eFrF^oC15tnC-amdcp2JjmCITmEseWd+dm5f^$o7lHdlBcHb\"b37-kkKUp,c+iDb]]IAI
jNFslbH^*MY2[U(iQ8"VaeRe9T\mh[hT2)@a->E#Okds9gr>6+`J3*cKA"1lfu/6i_fs_MFOn<Jf"u:S
_.hE8A^eG'e%f;<^KT%"<m\QYd(W<%]h?Ya8'S\6c+H<c]KFBL36Jfib.9=L\h2"6.EAqFa1*>5\/rVu
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0
`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-
[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt*lYT0`O?o-[iWMt
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.236364 .981818 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4285 0 0 13.4285 814.466 248.958 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8Mup
qtg-`p\+:PoCDG?md9B,lKRNqjlGI]iS`VLgtUQ9f[n^)eC2jmcd'eZbK7iGa2Q!7_8*h"]tCqe\@8oS
Za-j?YHFt-Wi;qpVPKu]TqJ!JS!ob4Q^*f!P*(idNJrdQM26n?KS+l,IXQTjH?j^XF`_\FE,TW2Chmd!
B4b[a@UNPL?!LT:=BAL%;c-@e:/+DS8Ou??6pj:,5X%=n3]T/Y2Dm9G0eY.2.k2tr-RL,a+sA$L*??.@
~>
<~o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
naZ/>naZ,<nF,i7n*f`5mdBK0mHj3+m-O*)lg*j$lK[["l07Hrkih6oki_-lkN:phjlPUcjlPRajQ#:\
j5]1Zio8qUiS`YPi8EPNhr!;IhVI#Dh;-oBgt^Z=gY:K;g=k96g"G$1f\"j/f@SX*f%/C%e^`4#eC<!s
e'landaHRldF$@gd*U+bcd0q`cHa_[c-=MWbfn;Tbfe2Qb0%lKaiVZHaiMQEa2c6?`l?$<`l5p9`5KU4
~>
<~eC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!teC<!t
e'ldpe'ldpe'c[mdaHRkdF$@hdEp7ed*U.ccd0q`cd0q`cHa_[c-=MXc-=MXc-4DUbfn;SbKJ)PbK@uM
b0%lKaiVZHaiMQEaN2HDaN2EBa2c6@`l?$<`l?!:`Pog8`5KU4`5KR2_o'C0_SX1,_SX.*_83t(^qdb$
^qd_"^V@Ou^:q=q^:q:o]tM+m]Y(ni]Y(nh]=Y\e]=Y\e]"5J`\[f8]\[f8]\@B&X\$riU\$riU[^NWQ
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
818.007 261.025 mo
813.63 261.025 810.07 257.432 810.07 253.003 cv
810.07 248.582 813.63 244.979 818.007 244.979 cv
822.385 244.979 825.944 248.582 825.944 253.003 cv
825.944 257.432 822.385 261.025 818.007 261.025 cv
cp
0 .368627 .341176 rgb
f
823.337 252.805 mo
823.337 255.969 820.768 258.535 817.599 258.535 cv
816.17 258.535 812.536 256.945 812.536 256.945 cv
812.536 256.945 811.194 253.69 811.194 252.132 cv
811.194 248.961 813.761 246.397 816.929 246.397 cv
819.147 246.397 821.991 247.68 821.991 247.68 cv
821.991 247.68 823.036 250.953 823.093 251.156 cv
823.251 251.677 823.337 252.229 823.337 252.805 cv
cp
.878431 .396078 0 rgb
f
822.286 249.768 mo
822.286 253.918 818.918 257.282 814.766 257.282 cv
810.615 257.282 807.252 253.918 807.252 249.768 cv
807.252 245.613 810.615 242.249 814.766 242.249 cv
818.918 242.249 822.286 245.613 822.286 249.768 cv
cp
1 .768627 0 rgb
f
814.766 254.854 mo
811.963 254.854 809.677 252.572 809.677 249.768 cv
809.677 246.959 811.963 244.677 814.766 244.677 cv
817.571 244.677 819.857 246.959 819.857 249.768 cv
819.857 252.572 817.571 254.854 814.766 254.854 cv
cp
1 .917647 .501961 rgb
f
810.633 250.464 mo
810.633 247.835 812.772 245.694 815.409 245.694 cv
817.223 245.694 818.806 246.712 819.612 248.212 cv
818.954 246.168 817.032 244.677 814.766 244.677 cv
811.963 244.677 809.677 246.959 809.677 249.768 cv
809.677 251.877 810.966 253.69 812.801 254.457 cv
811.498 253.606 810.633 252.14 810.633 250.464 cv
cp
1 1 1 rgb
f
817.263 249.768 mo
817.263 251.144 816.141 252.26 814.766 252.26 cv
813.393 252.26 812.269 251.144 812.269 249.768 cv
812.269 248.388 813.393 247.274 814.766 247.274 cv
816.141 247.274 817.263 248.388 817.263 249.768 cv
cp
f
819.858 325.56 mo
814.18 325.56 809.323 322.031 807.361 317.048 cv
808.529 312.915 809.276 308.389 809.603 303.466 cv
812.066 300.553 815.747 298.704 819.858 298.704 cv
827.273 298.704 833.287 304.716 833.287 312.132 cv
833.287 319.545 827.273 325.56 819.858 325.56 cv
level3{
gsave
clp
[13.4277 0 0 13.4277 819.859 312.133 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4277 0 0 13.4277 819.859 312.133 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
807.361 317.048 mo
806.762 315.525 806.433 313.867 806.433 312.132 cv
806.433 308.829 807.625 305.805 809.603 303.466 cv
809.276 308.389 808.529 312.915 807.361 317.048 cv
level3{
gsave
clp
[13.4277 0 0 13.4277 819.859 312.133 ]ct
/1 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4F
h44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$
SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8s4s4Fh44N$SH%E8
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s4s4CgRS&mRe>=%n^a)pe<oOLQKHP[im*eFb`gc(P1Ia;e&RQr`K/3[NlStq_nV/F]o0M7MRU-PZaYao
[>(`gKr;2/UT]<BXb*%CJX<?dPG`njV1+;sI>4GBJtIC=SU#ONG]oL!EgLrdP]^]'F(LJT@?,>5N,VpW
DcMU2:kig\KPO,1CIEYd5^mB.HtPB`Ai"XB06LeTF(-J9@No_u*c57&CL.`i>nL[R%:iWK@TinB=9)Z/
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,
?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5
<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.!+&_,?<7,5<rcQ.
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.236364 .981818 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4277 0 0 13.4277 819.859 312.133 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8Mup
qtg*^p@\(LnaQ#7m-Es$kiV!fio/hQh;$c<f[n['e'cXjcHXSUaiMK@`59@+^V.:l\[],V['R$AYH=n,
WMl_kUnaWVT:MLAR[BG-P`q5kNfAsSM2-h>K7\Z(IXQQhH$FLTFE2A>D/=!%BP1me@prbP?!LT:=BAO&
;Gg4b9hS)M7n,p76:!h"4?>J^2Dm<H0eb74.k2qp-6sf[+<MXE)]BP/'b_2l%h9$W$4-qA"9SZ)!!!!!
~>
<~gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]>
g=k96g"=p.f%&=#e'lamdEp4ccHXVXbKJ)Ob/q`Ga2Z-<`5KR1_SO%'^V7Fq]tCth]",A]\$rfR[C!9H
ZE^[=YHP+2XfSS(Wi;trVl-DgV50l]U7n9RT:_^GSXc1=R[TY3R$X,(P`q;oOcbcfO,f3ZN/NUOM2@%D
LPCM:KS+o/JUi6!IXZ]nI!^0bG^+FUG'.qLF)uAAEH#i7DJa6,CMR[!BkV-kARo=]@U`bR?sd5H?!U`A
~>
<~S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:S"#n:
S"#k7R@0J2R$X/+Q^=#'Q'IW"P`q;pP*1ujOcb`eOH5H`NfK-ZNK&mUN/NUPMi*CLM26tCLPLY>L4t>8
KS5#2K7ec-Jq8K(J:N0"It)orIXQWmI!^3dH?sm_H$FRYGB\7SG'8"NF`__HEcQ2@EcH&;E,TZ5DJj?/
D/F**CMIU!C2.HrBP;$kB4bafAS#F`A7T4\@U`bS@:<PO?XI/H?=$oC?!LW>>?Y35=]nm0=BAR*<`W7%
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
823.396 324.2 mo
819.019 324.2 815.46 320.6 815.46 316.179 cv
815.46 311.754 819.019 308.154 823.396 308.154 cv
827.777 308.154 831.333 311.754 831.333 316.179 cv
831.333 320.6 827.777 324.2 823.396 324.2 cv
cp
0 .368627 .341176 rgb
f
828.727 315.976 mo
828.727 319.145 826.161 321.704 822.996 321.704 cv
821.567 321.704 817.926 320.119 817.926 320.119 cv
817.926 320.119 816.588 316.863 816.588 315.301 cv
816.588 312.14 819.151 309.568 822.318 309.568 cv
824.542 309.568 827.386 310.854 827.386 310.854 cv
827.386 310.854 828.425 314.125 828.483 314.328 cv
828.64 314.851 828.727 315.402 828.727 315.976 cv
cp
.878431 .396078 0 rgb
f
827.675 312.938 mo
827.675 317.091 824.312 320.455 820.161 320.455 cv
816.006 320.455 812.641 317.091 812.641 312.938 cv
812.641 308.786 816.006 305.423 820.161 305.423 cv
824.312 305.423 827.675 308.786 827.675 312.938 cv
cp
1 .768627 0 rgb
f
820.161 318.029 mo
817.354 318.029 815.069 315.747 815.069 312.938 cv
815.069 310.134 817.354 307.846 820.161 307.846 cv
822.966 307.846 825.252 310.134 825.252 312.938 cv
825.252 315.747 822.966 318.029 820.161 318.029 cv
cp
1 .917647 .501961 rgb
f
816.026 313.639 mo
816.026 311.005 818.168 308.864 820.794 308.864 cv
822.615 308.864 824.2 309.888 825.004 311.384 cv
824.344 309.339 822.425 307.846 820.161 307.846 cv
817.354 307.846 815.069 310.134 815.069 312.938 cv
815.069 315.047 816.36 316.863 818.193 317.634 cv
816.887 316.782 816.026 315.307 816.026 313.639 cv
cp
1 1 1 rgb
f
822.654 312.938 mo
822.654 314.317 821.533 315.432 820.161 315.432 cv
818.781 315.432 817.667 314.317 817.667 312.938 cv
817.667 311.56 818.781 310.444 820.161 310.444 cv
821.533 310.444 822.654 311.56 822.654 312.938 cv
cp
f
806.531 354.021 mo
799.111 354.021 793.099 348.008 793.099 340.593 cv
793.099 339.978 793.14 339.374 793.22 338.781 cv
795.053 337.403 796.741 335.852 798.283 334.127 cv
800.044 332.157 801.603 329.996 802.959 327.646 cv
804.097 327.333 805.294 327.166 806.531 327.166 cv
813.944 327.166 819.956 333.178 819.956 340.593 cv
819.956 348.008 813.944 354.021 806.531 354.021 cv
level3{
gsave
clp
[13.4282 0 0 13.4282 806.527 340.594 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4282 0 0 13.4282 806.527 340.594 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
793.22 338.781 mo
793.944 333.415 797.839 329.054 802.959 327.646 cv
801.603 329.996 800.044 332.157 798.283 334.127 cv
796.741 335.852 795.053 337.403 793.22 338.781 cv
level3{
gsave
clp
[13.4282 0 0 13.4282 806.527 340.594 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4282 0 0 13.4282 806.527 340.594 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
810.07 352.662 mo
805.69 352.662 802.135 349.06 802.135 344.638 cv
802.135 340.219 805.69 336.613 810.07 336.613 cv
814.449 336.613 818.007 340.219 818.007 344.638 cv
818.007 349.06 814.449 352.662 810.07 352.662 cv
cp
0 .368627 .341176 rgb
f
815.398 344.435 mo
815.398 347.6 812.831 350.172 809.665 350.172 cv
808.235 350.172 804.6 348.58 804.6 348.58 cv
804.6 348.58 803.257 345.324 803.257 343.764 cv
803.257 340.601 805.823 338.033 808.99 338.033 cv
811.208 338.033 814.056 339.315 814.056 339.315 cv
814.056 339.315 815.097 342.591 815.159 342.788 cv
815.312 343.314 815.398 343.863 815.398 344.435 cv
cp
.878431 .396078 0 rgb
f
814.347 341.4 mo
814.347 345.553 810.983 348.919 806.831 348.919 cv
802.678 348.919 799.317 345.553 799.317 341.4 cv
799.317 337.248 802.678 333.883 806.831 333.883 cv
810.983 333.883 814.347 337.248 814.347 341.4 cv
cp
1 .768627 0 rgb
f
806.831 346.493 mo
804.026 346.493 801.741 344.208 801.741 341.4 cv
801.741 338.594 804.026 336.313 806.831 336.313 cv
809.641 336.313 811.921 338.594 811.921 341.4 cv
811.921 344.208 809.641 346.493 806.831 346.493 cv
cp
1 .917647 .501961 rgb
f
802.695 342.1 mo
802.695 339.466 804.835 337.324 807.472 337.324 cv
809.289 337.324 810.87 338.349 811.678 339.849 cv
811.021 337.797 809.097 336.313 806.831 336.313 cv
804.026 336.313 801.741 338.594 801.741 341.4 cv
801.741 343.506 803.03 345.324 804.867 346.094 cv
803.559 345.239 802.695 343.771 802.695 342.1 cv
cp
1 1 1 rgb
f
809.323 341.4 mo
809.323 342.778 808.212 343.896 806.831 343.896 cv
805.453 343.896 804.335 342.778 804.335 341.4 cv
804.335 340.02 805.453 338.908 806.831 338.908 cv
808.212 338.908 809.323 340.02 809.323 341.4 cv
cp
f
789.315 242.831 mo
781.905 242.831 775.89 236.82 775.89 229.407 cv
775.89 221.984 781.905 215.978 789.315 215.978 cv
789.631 215.978 789.944 215.988 790.254 216.01 cv
791.977 216.423 793.665 216.881 795.311 217.385 cv
799.721 219.586 802.75 224.14 802.75 229.407 cv
802.75 236.82 796.735 242.831 789.315 242.831 cv
level3{
gsave
clp
[13.4282 0 0 13.4282 789.32 229.404 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4282 0 0 13.4282 789.32 229.404 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
795.311 217.385 mo
793.665 216.881 791.977 216.423 790.254 216.01 cv
792.061 216.134 793.771 216.616 795.311 217.385 cv
level3{
gsave
clp
[13.4282 0 0 13.4282 789.32 229.404 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4282 0 0 13.4282 789.32 229.404 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
792.857 241.473 mo
788.481 241.473 784.921 237.877 784.921 233.452 cv
784.921 229.029 788.481 225.429 792.857 225.429 cv
797.235 225.429 800.796 229.029 800.796 233.452 cv
800.796 237.877 797.235 241.473 792.857 241.473 cv
cp
0 .368627 .341176 rgb
f
798.183 233.248 mo
798.183 236.412 795.62 238.982 792.454 238.982 cv
791.026 238.982 787.387 237.392 787.387 237.392 cv
787.387 237.392 786.051 234.139 786.051 232.578 cv
786.051 229.413 788.612 226.842 791.781 226.842 cv
793.999 226.842 796.845 228.13 796.845 228.13 cv
796.845 228.13 797.886 231.401 797.944 231.604 cv
798.104 232.122 798.183 232.675 798.183 233.248 cv
cp
.878431 .396078 0 rgb
f
797.138 230.216 mo
797.138 234.367 793.77 237.729 789.617 237.729 cv
785.472 237.729 782.101 234.367 782.101 230.216 cv
782.101 226.064 785.472 222.695 789.617 222.695 cv
793.77 222.695 797.138 226.064 797.138 230.216 cv
cp
1 .768627 0 rgb
f
789.617 235.302 mo
786.81 235.302 784.53 233.019 784.53 230.216 cv
784.53 227.406 786.81 225.123 789.617 225.123 cv
792.427 225.123 794.71 227.406 794.71 230.216 cv
794.71 233.019 792.427 235.302 789.617 235.302 cv
cp
1 .917647 .501961 rgb
f
785.484 230.915 mo
785.484 228.279 787.629 226.14 790.257 226.14 cv
792.081 226.14 793.663 227.16 794.465 228.658 cv
793.807 226.609 791.886 225.123 789.617 225.123 cv
786.81 225.123 784.53 227.406 784.53 230.216 cv
784.53 232.321 785.821 234.139 787.656 234.904 cv
786.35 234.053 785.484 232.585 785.484 230.915 cv
cp
1 1 1 rgb
f
792.115 230.216 mo
792.115 231.591 790.999 232.709 789.617 232.709 cv
788.24 232.709 787.124 231.591 787.124 230.216 cv
787.124 228.834 788.24 227.72 789.617 227.72 cv
790.999 227.72 792.115 228.834 792.115 230.216 cv
cp
f
747.186 368.8 mo
739.768 368.8 733.755 362.786 733.755 355.376 cv
733.755 349.617 737.375 344.707 742.463 342.796 cv
746.836 344.798 751.815 346.085 757.402 346.659 cv
759.404 349.004 760.613 352.049 760.613 355.376 cv
760.613 362.786 754.599 368.8 747.186 368.8 cv
level3{
gsave
clp
[13.4292 0 0 13.4292 747.184 355.371 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4292 0 0 13.4292 747.184 355.371 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
753.353 343.44 mo
750.711 343.127 748.207 342.649 745.843 342.009 cv
746.285 341.965 746.733 341.942 747.186 341.942 cv
749.409 341.942 751.506 342.483 753.353 343.44 cv
level3{
gsave
clp
[13.4292 0 0 13.4292 747.184 355.371 ]ct
/2 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s829bqsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:Rs829b
qsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^
n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:Rs829bqsXR^n,N:R
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s829`qsO@YmeZhKq"jFOqX4"Pmdg5AnG;P>q<dMDmHOH6kkXW-q<[/:m,@a+htZQoq!?c0le2$uf(\L[
pZp9%ld5@kcM$PIp?KfolH&Y``V&N6p$'<cl+ZfS]_(I"o]`mXkdL-I[.ELdoB<CLkcOI?X7GGQo&ln@
kG7\3U@IE>n`HD4k*to'RITF*nE,u)k*#5qORV@kn)]Jrjb`HfL[X;Xmc8ufjFH[ZIdZ9EmGiKZj*0nN
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~GO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7
mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEX
j*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nNGO=F7mGiEXj*0nN
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.236364 .981818 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4292 0 0 13.4292 747.184 355.371 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8N#r
r;?HgqYL$`q"OLTo^qeIoCDGAnF,f4m-O''lKRNrki_*ijQ,@\io/hRhqm5Gh;$c>g=b03f@JL%eC2jo
dEp7dcHa\Ybfe/OaiMQD`l5m6_ns7+^q[Us]Y(kf]",>\\$rfR[C!9GZ*:I9Y-+n.XK/A$WMl_lV59u_
US=HUTV%gHS=H(;R[KP0QBd`"PEV/lOcYZcNfB!UMi*@JLkgb?KnY24Jq8H&IsuipI!g9eH$FOWG'8%P
~>
<~qYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'b
qYL'bqYL'bqYBs_q>'j^q>'j^q>'j^q"XXZq"XXZq"XXZq"XXYp\4FVp\4FVp\4FVp@e4Rp@e4Rp@e4R
p@e4Qp%A"Np%A"Np%A"Mo^qeJo^qeJo^qeIoCMSFoCMSFoCMSFoCMPDo()ABo()ABo()>@naZ/>naZ/>
naZ,<nF5r:nF5r:nF5r:nF,i7n*f`6n*f`6n*f]4mdBN2mdBN2mdBK0mHs<.mHs<.mHs9,m-O**m-O**
~>
<~mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
mHs<.mHs<.mHs<.mHs<.mHs9,m-O**m-O**m-O**m-O**lg*m&lg*m&lg*m&lg*m&lK[["lK[["lK[["
lK[["lK[Wul07Hsl07Hsl07Hsl0.?pkih6okih6okih6okND$kkND$kkND$kkND$kkND!ik2tggk2tgg
k2tggk2k^djlPUcjlPUcjlPUcjlPUbjQ,C_jQ,C_jQ,C_jQ,C^j5]1[j5]1[j5]1[j5].Yio8tWio8tW
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
757.402 346.659 mo
751.815 346.085 746.836 344.798 742.463 342.796 cv
743.532 342.395 744.665 342.126 745.843 342.009 cv
748.207 342.649 750.711 343.127 753.353 343.44 cv
754.904 344.244 756.278 345.341 757.402 346.659 cv
level3{
gsave
clp
[13.4292 0 0 13.4292 747.184 355.371 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4292 0 0 13.4292 747.184 355.371 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
750.729 367.444 mo
746.349 367.444 742.791 363.846 742.791 359.422 cv
742.791 354.995 746.349 351.395 750.729 351.395 cv
755.101 351.395 758.663 354.995 758.663 359.422 cv
758.663 363.846 755.101 367.444 750.729 367.444 cv
cp
0 .368627 .341176 rgb
f
756.053 359.222 mo
756.053 362.386 753.488 364.946 750.32 364.946 cv
748.89 364.946 745.255 363.361 745.255 363.361 cv
745.255 363.361 743.915 360.105 743.915 358.545 cv
743.915 355.38 746.479 352.811 749.646 352.811 cv
751.863 352.811 754.707 354.098 754.707 354.098 cv
754.707 354.098 755.751 357.372 755.809 357.569 cv
755.969 358.094 756.053 358.642 756.053 359.222 cv
cp
.878431 .396078 0 rgb
f
755.005 356.181 mo
755.005 360.332 751.639 363.699 747.486 363.699 cv
743.334 363.699 739.973 360.332 739.973 356.181 cv
739.973 352.026 743.334 348.662 747.486 348.662 cv
751.639 348.662 755.005 352.026 755.005 356.181 cv
cp
1 .768627 0 rgb
f
747.486 361.27 mo
744.681 361.27 742.396 358.985 742.396 356.181 cv
742.396 353.376 744.681 351.09 747.486 351.09 cv
750.294 351.09 752.575 353.376 752.575 356.181 cv
752.575 358.985 750.294 361.27 747.486 361.27 cv
cp
1 .917647 .501961 rgb
f
743.351 356.88 mo
743.351 354.248 745.49 352.106 748.126 352.106 cv
749.943 352.106 751.524 353.132 752.334 354.625 cv
751.676 352.584 749.751 351.09 747.486 351.09 cv
744.681 351.09 742.396 353.376 742.396 356.181 cv
742.396 358.29 743.685 360.105 745.521 360.874 cv
744.219 360.023 743.351 358.552 743.351 356.88 cv
cp
1 1 1 rgb
f
749.981 356.181 mo
749.981 357.56 748.863 358.674 747.486 358.674 cv
746.108 358.674 744.991 357.56 744.991 356.181 cv
744.991 354.809 746.108 353.685 747.486 353.685 cv
748.863 353.685 749.981 354.809 749.981 356.181 cv
cp
f
797.138 394.713 mo
789.724 394.713 783.711 388.696 783.711 381.283 cv
783.711 373.867 789.724 367.855 797.138 367.855 cv
804.556 367.855 810.568 373.867 810.568 381.283 cv
810.568 388.696 804.556 394.713 797.138 394.713 cv
level3{
gsave
clp
[13.4287 0 0 13.4287 797.14 381.284 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4287 0 0 13.4287 797.14 381.284 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
800.675 393.354 mo
796.302 393.354 792.743 389.753 792.743 385.331 cv
792.743 380.907 796.302 377.305 800.675 377.305 cv
805.056 377.305 808.614 380.907 808.614 385.331 cv
808.614 389.753 805.056 393.354 800.675 393.354 cv
cp
0 .368627 .341176 rgb
f
806.007 385.131 mo
806.007 388.299 803.44 390.86 800.276 390.86 cv
798.845 390.86 795.209 389.272 795.209 389.272 cv
795.209 389.272 793.866 386.016 793.866 384.458 cv
793.866 381.288 796.431 378.725 799.597 378.725 cv
801.82 378.725 804.662 380.006 804.662 380.006 cv
804.662 380.006 805.705 383.281 805.763 383.483 cv
805.924 384.003 806.007 384.553 806.007 385.131 cv
cp
.878431 .396078 0 rgb
f
804.953 382.091 mo
804.953 386.242 801.59 389.611 797.442 389.611 cv
793.288 389.611 789.925 386.242 789.925 382.091 cv
789.925 377.938 793.288 374.577 797.442 374.577 cv
801.59 374.577 804.953 377.938 804.953 382.091 cv
cp
1 .768627 0 rgb
f
797.442 387.183 mo
794.634 387.183 792.348 384.898 792.348 382.091 cv
792.348 379.286 794.634 376.999 797.442 376.999 cv
800.249 376.999 802.53 379.286 802.53 382.091 cv
802.53 384.898 800.249 387.183 797.442 387.183 cv
cp
1 .917647 .501961 rgb
f
793.306 382.79 mo
793.306 380.162 795.446 378.02 798.078 378.02 cv
799.898 378.02 801.479 379.042 802.282 380.536 cv
801.622 378.494 799.703 376.999 797.442 376.999 cv
794.634 376.999 792.348 379.286 792.348 382.091 cv
792.348 384.2 793.644 386.016 795.474 386.788 cv
794.168 385.934 793.306 384.464 793.306 382.79 cv
cp
1 1 1 rgb
f
799.937 382.091 mo
799.937 383.47 798.815 384.582 797.442 384.582 cv
796.06 384.582 794.946 383.47 794.946 382.091 cv
794.946 380.714 796.06 379.599 797.442 379.599 cv
798.815 379.599 799.937 380.714 799.937 382.091 cv
cp
f
756.598 236.333 mo
749.178 236.333 743.17 230.321 743.17 222.901 cv
743.17 219.746 744.258 216.846 746.08 214.555 cv
751.82 213.652 757.935 213.201 764.428 213.201 cv
764.915 213.201 765.401 213.204 765.884 213.209 cv
768.434 215.652 770.021 219.091 770.021 222.901 cv
770.021 230.321 764.012 236.333 756.598 236.333 cv
level3{
gsave
clp
[13.4263 0 0 13.4263 756.596 222.906 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4263 0 0 13.4263 756.596 222.906 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
751.589 210.444 mo
753.136 209.822 754.827 209.479 756.598 209.479 cv
757.993 209.479 759.338 209.692 760.603 210.087 cv
757.512 210.103 754.507 210.222 751.589 210.444 cv
level3{
gsave
clp
[13.4263 0 0 13.4263 756.596 222.906 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4263 0 0 13.4263 756.596 222.906 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
746.08 214.555 mo
747.517 212.747 749.411 211.319 751.589 210.444 cv
754.507 210.222 757.512 210.103 760.603 210.087 cv
762.605 210.712 764.406 211.793 765.884 213.209 cv
765.401 213.204 764.915 213.201 764.428 213.201 cv
757.935 213.201 751.82 213.652 746.08 214.555 cv
level3{
gsave
clp
[13.4263 0 0 13.4263 756.596 222.906 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4263 0 0 13.4263 756.596 222.906 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
760.134 234.974 mo
755.762 234.974 752.197 231.373 752.197 226.947 cv
752.197 222.525 755.762 218.928 760.134 218.928 cv
764.514 218.928 768.078 222.525 768.078 226.947 cv
768.078 231.373 764.514 234.974 760.134 234.974 cv
cp
0 .368627 .341176 rgb
f
765.464 226.746 mo
765.464 229.917 762.896 232.479 759.732 232.479 cv
758.304 232.479 754.667 230.896 754.667 230.896 cv
754.667 230.896 753.322 227.636 753.322 226.072 cv
753.322 222.906 755.892 220.342 759.058 220.342 cv
761.279 220.342 764.124 221.624 764.124 221.624 cv
764.124 221.624 765.162 224.901 765.227 225.104 cv
765.377 225.626 765.464 226.178 765.464 226.746 cv
cp
.878431 .396078 0 rgb
f
764.413 223.714 mo
764.413 227.865 761.052 231.228 756.899 231.228 cv
752.746 231.228 749.378 227.865 749.378 223.714 cv
749.378 219.563 752.746 216.192 756.899 216.192 cv
761.052 216.192 764.413 219.563 764.413 223.714 cv
cp
1 .768627 0 rgb
f
756.899 228.806 mo
754.092 228.806 751.807 226.522 751.807 223.714 cv
751.807 220.905 754.092 218.622 756.899 218.622 cv
759.704 218.622 761.991 220.905 761.991 223.714 cv
761.991 226.522 759.704 228.806 756.899 228.806 cv
cp
1 .917647 .501961 rgb
f
752.764 224.412 mo
752.764 221.78 754.905 219.639 757.534 219.639 cv
759.352 219.639 760.94 220.656 761.746 222.158 cv
761.081 220.111 759.164 218.622 756.899 218.622 cv
754.092 218.622 751.807 220.905 751.807 223.714 cv
751.807 225.823 753.098 227.636 754.933 228.407 cv
753.624 227.552 752.764 226.083 752.764 224.412 cv
cp
1 1 1 rgb
f
759.395 223.714 mo
759.395 225.09 758.276 226.207 756.899 226.207 cv
755.519 226.207 754.406 225.09 754.406 223.714 cv
754.406 222.333 755.519 221.22 756.899 221.22 cv
758.276 221.22 759.395 222.333 759.395 223.714 cv
cp
f
722.708 244.52 mo
715.292 244.52 709.284 238.507 709.284 231.089 cv
709.284 230.875 709.289 230.663 709.299 230.452 cv
714.943 225.669 721.419 221.88 728.728 219.086 cv
733.123 221.292 736.139 225.839 736.139 231.089 cv
736.139 238.507 730.128 244.52 722.708 244.52 cv
level3{
gsave
clp
[13.4275 0 0 13.4275 722.711 231.093 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4275 0 0 13.4275 722.711 231.093 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
712.061 222.912 mo
714.267 220.045 717.605 218.093 721.408 217.728 cv
718.106 219.234 714.991 220.961 712.061 222.912 cv
level3{
gsave
clp
[13.4275 0 0 13.4275 722.711 231.093 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4275 0 0 13.4275 722.711 231.093 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
709.299 230.452 mo
709.431 227.621 710.441 225.019 712.061 222.912 cv
714.991 220.961 718.106 219.234 721.408 217.728 cv
721.836 217.687 722.269 217.666 722.708 217.666 cv
724.873 217.666 726.917 218.177 728.728 219.086 cv
721.419 221.88 714.943 225.669 709.299 230.452 cv
level3{
gsave
clp
[13.4275 0 0 13.4275 722.711 231.093 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4275 0 0 13.4275 722.711 231.093 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
726.251 243.162 mo
721.876 243.162 718.316 239.562 718.316 235.136 cv
718.316 230.713 721.876 227.115 726.251 227.115 cv
730.628 227.115 734.187 230.713 734.187 235.136 cv
734.187 239.562 730.628 243.162 726.251 243.162 cv
cp
0 .368627 .341176 rgb
f
731.578 234.936 mo
731.578 238.099 729.009 240.667 725.843 240.667 cv
724.415 240.667 720.782 239.082 720.782 239.082 cv
720.782 239.082 719.44 235.821 719.44 234.26 cv
719.44 231.092 722.005 228.531 725.175 228.531 cv
727.387 228.531 730.234 229.812 730.234 229.812 cv
730.234 229.812 731.273 233.09 731.336 233.289 cv
731.492 233.816 731.578 234.364 731.578 234.936 cv
cp
.878431 .396078 0 rgb
f
730.526 231.899 mo
730.526 236.052 727.166 239.414 723.009 239.414 cv
718.856 239.414 715.495 236.052 715.495 231.899 cv
715.495 227.749 718.856 224.382 723.009 224.382 cv
727.166 224.382 730.526 227.749 730.526 231.899 cv
cp
1 .768627 0 rgb
f
723.009 236.993 mo
720.206 236.993 717.923 234.709 717.923 231.899 cv
717.923 229.093 720.206 226.809 723.009 226.809 cv
725.815 226.809 728.103 229.093 728.103 231.899 cv
728.103 234.709 725.815 236.993 723.009 236.993 cv
cp
1 .917647 .501961 rgb
f
718.876 232.602 mo
718.876 229.967 721.021 227.826 723.651 227.826 cv
725.467 227.826 727.052 228.845 727.856 230.347 cv
727.2 228.299 725.278 226.809 723.009 226.809 cv
720.206 226.809 717.923 229.093 717.923 231.899 cv
717.923 234.011 719.209 235.821 721.047 236.596 cv
719.746 235.743 718.876 234.269 718.876 232.602 cv
cp
1 1 1 rgb
f
725.507 231.899 mo
725.507 233.277 724.389 234.393 723.009 234.393 cv
721.633 234.393 720.515 233.277 720.515 231.899 cv
720.515 230.519 721.633 229.407 723.009 229.407 cv
724.389 229.407 725.507 230.519 725.507 231.899 cv
cp
f
697.707 298.484 mo
692.187 298.484 687.445 295.156 685.382 290.393 cv
685.486 286.106 685.773 281.996 686.241 278.067 cv
688.6 274.208 692.853 271.633 697.707 271.633 cv
705.125 271.633 711.134 277.642 711.134 285.056 cv
711.134 292.478 705.125 298.484 697.707 298.484 cv
level3{
gsave
clp
[13.4263 0 0 13.4263 697.707 285.059 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4263 0 0 13.4263 697.707 285.059 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
685.382 290.393 mo
684.673 288.758 684.28 286.953 684.28 285.056 cv
684.28 282.495 684.997 280.102 686.241 278.067 cv
685.773 281.996 685.486 286.106 685.382 290.393 cv
level3{
gsave
clp
[13.4263 0 0 13.4263 697.707 285.059 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4263 0 0 13.4263 697.707 285.059 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
701.246 297.128 mo
696.871 297.128 693.31 293.529 693.31 289.108 cv
693.31 284.684 696.871 281.084 701.246 281.084 cv
705.624 281.084 709.183 284.684 709.183 289.108 cv
709.183 293.529 705.624 297.128 701.246 297.128 cv
cp
0 .368627 .341176 rgb
f
706.576 288.903 mo
706.576 292.069 704.007 294.638 700.844 294.638 cv
699.411 294.638 695.78 293.049 695.78 293.049 cv
695.78 293.049 694.436 289.79 694.436 288.23 cv
694.436 285.063 697.008 282.498 700.17 282.498 cv
702.386 282.498 705.231 283.778 705.231 283.778 cv
705.231 283.778 706.272 287.058 706.335 287.255 cv
706.493 287.783 706.576 288.333 706.576 288.903 cv
cp
.878431 .396078 0 rgb
f
705.527 285.87 mo
705.527 290.02 702.159 293.385 698.007 293.385 cv
693.856 293.385 690.49 290.02 690.49 285.87 cv
690.49 281.715 693.856 278.351 698.007 278.351 cv
702.159 278.351 705.527 281.715 705.527 285.87 cv
cp
1 .768627 0 rgb
f
698.007 290.963 mo
695.201 290.963 692.919 288.675 692.919 285.87 cv
692.919 283.063 695.201 280.779 698.007 280.779 cv
700.816 280.779 703.096 283.063 703.096 285.87 cv
703.096 288.675 700.816 290.963 698.007 290.963 cv
cp
1 .917647 .501961 rgb
f
693.876 286.572 mo
693.876 283.935 696.016 281.792 698.647 281.792 cv
700.462 281.792 702.048 282.814 702.852 284.316 cv
702.193 282.264 700.272 280.779 698.007 280.779 cv
695.201 280.779 692.919 283.063 692.919 285.87 cv
692.919 287.978 694.21 289.79 696.046 290.563 cv
694.739 289.714 693.876 288.236 693.876 286.572 cv
cp
1 1 1 rgb
f
700.502 285.87 mo
700.502 287.243 699.386 288.363 698.007 288.363 cv
696.634 288.363 695.511 287.243 695.511 285.87 cv
695.511 284.489 696.634 283.377 698.007 283.377 cv
699.386 283.377 700.502 284.489 700.502 285.87 cv
cp
f
822.657 294.206 mo
816.181 294.206 810.781 289.627 809.511 283.533 cv
809.433 282.581 809.338 281.644 809.228 280.722 cv
809.257 273.331 815.254 267.351 822.657 267.351 cv
830.069 267.351 836.079 273.36 836.079 280.776 cv
836.079 288.192 830.069 294.206 822.657 294.206 cv
level3{
gsave
clp
[13.4268 0 0 13.4268 822.653 280.778 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4268 0 0 13.4268 822.653 280.778 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
809.511 283.533 mo
809.325 282.643 809.228 281.721 809.228 280.776 cv
809.228 280.758 809.228 280.74 809.228 280.722 cv
809.338 281.644 809.433 282.581 809.511 283.533 cv
level3{
gsave
clp
[13.4268 0 0 13.4268 822.653 280.778 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4268 0 0 13.4268 822.653 280.778 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
826.196 292.849 mo
821.816 292.849 818.26 289.247 818.26 284.824 cv
818.26 280.401 821.816 276.803 826.196 276.803 cv
830.574 276.803 834.13 280.401 834.13 284.824 cv
834.13 289.247 830.574 292.849 826.196 292.849 cv
cp
0 .368627 .341176 rgb
f
831.523 284.621 mo
831.523 287.788 828.953 290.357 825.791 290.357 cv
824.358 290.357 820.728 288.77 820.728 288.77 cv
820.728 288.77 819.38 285.509 819.38 283.95 cv
819.38 280.781 821.95 278.218 825.115 278.218 cv
827.334 278.218 830.178 279.498 830.178 279.498 cv
830.178 279.498 831.222 282.778 831.281 282.976 cv
831.437 283.498 831.523 284.049 831.523 284.621 cv
cp
.878431 .396078 0 rgb
f
830.476 281.587 mo
830.476 285.739 827.108 289.104 822.956 289.104 cv
818.804 289.104 815.44 285.739 815.44 281.587 cv
815.44 277.438 818.804 274.067 822.956 274.067 cv
827.108 274.067 830.476 277.438 830.476 281.587 cv
cp
1 .768627 0 rgb
f
822.956 286.679 mo
820.154 286.679 817.866 284.393 817.866 281.587 cv
817.866 278.782 820.154 276.498 822.956 276.498 cv
825.761 276.498 828.046 278.782 828.046 281.587 cv
828.046 284.393 825.761 286.679 822.956 286.679 cv
cp
1 .917647 .501961 rgb
f
818.821 282.286 mo
818.821 279.654 820.963 277.511 823.595 277.511 cv
825.41 277.511 826.997 278.534 827.799 280.031 cv
827.144 277.982 825.222 276.498 822.956 276.498 cv
820.154 276.498 817.866 278.782 817.866 281.587 cv
817.866 283.697 819.155 285.509 820.99 286.28 cv
819.687 285.427 818.821 283.956 818.821 282.286 cv
cp
1 1 1 rgb
f
825.449 281.587 mo
825.449 282.963 824.331 284.081 822.956 284.081 cv
821.581 284.081 820.462 282.963 820.462 281.587 cv
820.462 280.209 821.581 279.092 822.956 279.092 cv
824.331 279.092 825.449 280.209 825.449 281.587 cv
cp
f
703.319 266.363 mo
697.629 266.363 692.765 262.824 690.809 257.826 cv
693.206 251.053 696.392 245.054 700.365 239.832 cv
701.316 239.618 702.304 239.506 703.319 239.506 cv
710.734 239.506 716.746 245.521 716.746 252.932 cv
716.746 260.351 710.734 266.363 703.319 266.363 cv
level3{
gsave
clp
[13.4282 0 0 13.4282 703.318 252.935 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4282 0 0 13.4282 703.318 252.935 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
690.809 257.826 mo
690.216 256.31 689.89 254.659 689.89 252.932 cv
689.89 246.535 694.37 241.178 700.365 239.832 cv
696.392 245.054 693.206 251.053 690.809 257.826 cv
level3{
gsave
clp
[13.4282 0 0 13.4282 703.318 252.935 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4282 0 0 13.4282 703.318 252.935 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
706.856 265.005 mo
702.478 265.005 698.922 261.402 698.922 256.979 cv
698.922 252.556 702.478 248.959 706.856 248.959 cv
711.233 248.959 714.792 252.556 714.792 256.979 cv
714.792 261.402 711.233 265.005 706.856 265.005 cv
cp
0 .368627 .341176 rgb
f
712.186 256.778 mo
712.186 259.945 709.615 262.514 706.453 262.514 cv
705.022 262.514 701.388 260.92 701.388 260.92 cv
701.388 260.92 700.044 257.665 700.044 256.103 cv
700.044 252.939 702.608 250.371 705.774 250.371 cv
707.998 250.371 710.845 251.653 710.845 251.653 cv
710.845 251.653 711.884 254.932 711.94 255.13 cv
712.099 255.653 712.186 256.204 712.186 256.778 cv
cp
.878431 .396078 0 rgb
f
711.134 253.745 mo
711.134 257.892 707.771 261.26 703.62 261.26 cv
699.468 261.26 696.1 257.892 696.1 253.745 cv
696.1 249.589 699.468 246.226 703.62 246.226 cv
707.771 246.226 711.134 249.589 711.134 253.745 cv
cp
1 .768627 0 rgb
f
703.62 258.83 mo
700.812 258.83 698.528 256.552 698.528 253.745 cv
698.528 250.933 700.812 248.649 703.62 248.649 cv
706.423 248.649 708.711 250.933 708.711 253.745 cv
708.711 256.552 706.423 258.83 703.62 258.83 cv
cp
1 .917647 .501961 rgb
f
699.483 254.438 mo
699.483 251.813 701.625 249.667 704.259 249.667 cv
706.074 249.667 707.659 250.689 708.463 252.186 cv
707.804 250.142 705.886 248.649 703.62 248.649 cv
700.812 248.649 698.528 250.933 698.528 253.745 cv
698.528 255.851 699.822 257.665 701.649 258.434 cv
700.346 257.58 699.483 256.11 699.483 254.438 cv
cp
1 1 1 rgb
f
706.114 253.745 mo
706.114 255.12 704.993 256.239 703.62 256.239 cv
702.238 256.239 701.126 255.12 701.126 253.745 cv
701.126 252.363 702.238 251.247 703.62 251.247 cv
704.993 251.247 706.114 252.363 706.114 253.745 cv
cp
f
700.989 330.723 mo
694.952 330.723 689.846 326.738 688.156 321.252 cv
687.99 320.537 687.831 319.812 687.68 319.083 cv
687.602 318.495 687.561 317.895 687.561 317.286 cv
687.561 309.876 693.572 303.867 700.989 303.867 cv
708.403 303.867 714.416 309.876 714.416 317.286 cv
714.416 324.71 708.403 330.723 700.989 330.723 cv
level3{
gsave
clp
[13.4275 0 0 13.4275 700.989 317.295 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4275 0 0 13.4275 700.989 317.295 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
688.156 321.252 mo
687.94 320.551 687.78 319.827 687.68 319.083 cv
687.831 319.812 687.99 320.537 688.156 321.252 cv
level3{
gsave
clp
[13.4275 0 0 13.4275 700.989 317.295 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4275 0 0 13.4275 700.989 317.295 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
704.525 329.362 mo
700.147 329.362 696.587 325.765 696.587 321.337 cv
696.587 316.917 700.147 313.315 704.525 313.315 cv
708.901 313.315 712.465 316.917 712.465 321.337 cv
712.465 325.765 708.901 329.362 704.525 329.362 cv
cp
0 .368627 .341176 rgb
f
709.851 321.138 mo
709.851 324.304 707.288 326.869 704.122 326.869 cv
702.695 326.869 699.056 325.284 699.056 325.284 cv
699.056 325.284 697.714 322.021 697.714 320.462 cv
697.714 317.296 700.282 314.729 703.442 314.729 cv
705.661 314.729 708.51 316.008 708.51 316.008 cv
708.51 316.008 709.551 319.29 709.608 319.488 cv
709.77 320.014 709.851 320.565 709.851 321.138 cv
cp
.878431 .396078 0 rgb
f
708.805 318.101 mo
708.805 322.257 705.437 325.615 701.286 325.615 cv
697.134 325.615 693.771 322.257 693.771 318.101 cv
693.771 313.95 697.134 310.582 701.286 310.582 cv
705.437 310.582 708.805 313.95 708.805 318.101 cv
cp
1 .768627 0 rgb
f
701.286 323.193 mo
698.479 323.193 696.195 320.91 696.195 318.101 cv
696.195 315.296 698.479 313.01 701.286 313.01 cv
704.095 313.01 706.376 315.296 706.376 318.101 cv
706.376 320.91 704.095 323.193 701.286 323.193 cv
cp
1 .917647 .501961 rgb
f
697.151 318.802 mo
697.151 316.168 699.29 314.029 701.924 314.029 cv
703.745 314.029 705.322 315.047 706.13 316.55 cv
705.473 314.499 703.551 313.01 701.286 313.01 cv
698.479 313.01 696.195 315.296 696.195 318.101 cv
696.195 320.207 697.484 322.021 699.317 322.796 cv
698.011 321.941 697.151 320.47 697.151 318.802 cv
cp
1 1 1 rgb
f
703.782 318.101 mo
703.782 319.476 702.666 320.594 701.286 320.594 cv
699.909 320.594 698.793 319.476 698.793 318.101 cv
698.793 316.719 699.909 315.607 701.286 315.607 cv
702.666 315.607 703.782 316.719 703.782 318.101 cv
cp
f
717.923 356.58 mo
710.507 356.58 704.494 350.57 704.494 343.15 cv
704.494 335.737 710.507 329.723 717.923 329.723 cv
725.336 329.723 731.351 335.737 731.351 343.15 cv
731.351 350.57 725.336 356.58 717.923 356.58 cv
level3{
gsave
clp
[13.4287 0 0 13.4287 717.922 343.151 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4287 0 0 13.4287 717.922 343.151 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
721.46 355.219 mo
717.082 355.219 713.521 351.626 713.521 347.202 cv
713.521 342.776 717.082 339.178 721.46 339.178 cv
725.832 339.178 729.396 342.776 729.396 347.202 cv
729.396 351.626 725.832 355.219 721.46 355.219 cv
cp
0 .368627 .341176 rgb
f
726.784 346.999 mo
726.784 350.165 724.22 352.729 721.052 352.729 cv
719.627 352.729 715.994 351.144 715.994 351.144 cv
715.994 351.144 714.648 347.882 714.648 346.321 cv
714.648 343.158 717.219 340.598 720.379 340.598 cv
722.603 340.598 725.449 341.877 725.449 341.877 cv
725.449 341.877 726.488 345.148 726.546 345.351 cv
726.706 345.868 726.784 346.423 726.784 346.999 cv
cp
.878431 .396078 0 rgb
f
725.741 343.961 mo
725.741 348.112 722.37 351.479 718.22 351.479 cv
714.069 351.479 710.704 348.112 710.704 343.961 cv
710.704 339.811 714.069 336.447 718.22 336.447 cv
722.37 336.447 725.741 339.811 725.741 343.961 cv
cp
1 .768627 0 rgb
f
718.22 349.048 mo
715.41 349.048 713.133 346.765 713.133 343.961 cv
713.133 341.157 715.41 338.873 718.22 338.873 cv
721.029 338.873 723.31 341.157 723.31 343.961 cv
723.31 346.765 721.029 349.048 718.22 349.048 cv
cp
1 .917647 .501961 rgb
f
714.087 344.663 mo
714.087 342.028 716.227 339.889 718.858 339.889 cv
720.681 339.889 722.261 340.908 723.065 342.407 cv
722.407 340.36 720.485 338.873 718.22 338.873 cv
715.41 338.873 713.133 341.157 713.133 343.961 cv
713.133 346.072 714.424 347.882 716.253 348.656 cv
714.948 347.804 714.087 346.331 714.087 344.663 cv
cp
1 1 1 rgb
f
720.718 343.961 mo
720.718 345.34 719.601 346.454 718.22 346.454 cv
716.843 346.454 715.727 345.34 715.727 343.961 cv
715.727 342.584 716.843 341.466 718.22 341.466 cv
719.601 341.466 720.718 342.584 720.718 343.961 cv
cp
f
779.405 372.779 mo
771.987 372.779 765.974 366.769 765.974 359.347 cv
765.974 351.935 771.987 345.925 779.405 345.925 cv
786.818 345.925 792.833 351.935 792.833 359.347 cv
792.833 366.769 786.818 372.779 779.405 372.779 cv
level3{
gsave
clp
[13.4287 0 0 13.4287 779.403 359.352 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.4287 0 0 13.4287 779.403 359.352 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
782.946 371.417 mo
778.569 371.417 775.011 367.82 775.011 363.394 cv
775.011 358.969 778.569 355.376 782.946 355.376 cv
787.321 355.376 790.881 358.969 790.881 363.394 cv
790.881 367.82 787.321 371.417 782.946 371.417 cv
cp
0 .368627 .341176 rgb
f
788.271 363.195 mo
788.271 366.359 785.707 368.926 782.539 368.926 cv
781.107 368.926 777.474 367.34 777.474 367.34 cv
777.474 367.34 776.133 364.079 776.133 362.521 cv
776.133 359.353 778.7 356.788 781.863 356.788 cv
784.083 356.788 786.929 358.069 786.929 358.069 cv
786.929 358.069 787.971 361.348 788.03 361.547 cv
788.185 362.069 788.271 362.625 788.271 363.195 cv
cp
.878431 .396078 0 rgb
f
787.226 360.161 mo
787.226 364.31 783.857 367.677 779.704 367.677 cv
775.556 367.677 772.188 364.31 772.188 360.161 cv
772.188 356.007 775.556 352.643 779.704 352.643 cv
783.857 352.643 787.226 356.007 787.226 360.161 cv
cp
1 .768627 0 rgb
f
779.704 365.247 mo
776.899 365.247 774.612 362.967 774.612 360.161 cv
774.612 357.349 776.899 355.066 779.704 355.066 cv
782.512 355.066 784.794 357.349 784.794 360.161 cv
784.794 362.967 782.512 365.247 779.704 365.247 cv
cp
1 .917647 .501961 rgb
f
775.569 360.858 mo
775.569 358.228 777.709 356.084 780.346 356.084 cv
782.161 356.084 783.743 357.103 784.547 358.606 cv
783.894 356.558 781.97 355.066 779.704 355.066 cv
776.899 355.066 774.612 357.349 774.612 360.161 cv
774.612 362.267 775.905 364.079 777.741 364.856 cv
776.438 363.997 775.569 362.526 775.569 360.858 cv
cp
1 1 1 rgb
f
782.197 360.161 mo
782.197 361.538 781.079 362.652 779.704 362.652 cv
778.329 362.652 777.209 361.538 777.209 360.161 cv
777.209 358.78 778.329 357.666 779.704 357.666 cv
781.079 357.666 782.197 358.78 782.197 360.161 cv
cp
f
996.866 423.915 mo
974.827 423.915 957.354 418.352 944.931 407.377 cv
932.344 396.266 910.276 373.289 910.276 373.289 cv
910.276 373.289 li
912.342 375.253 914.607 377.34 917.046 379.493 cv
929.468 390.466 946.942 396.03 968.983 396.03 cv
991.166 396.03 1008.75 390.47 1021.25 379.503 cv
1033.92 368.385 1040.35 352.07 1040.35 331.02 cv
1040.35 228.814 li
1068.23 256.7 li
1068.23 358.903 li
1068.23 379.958 1061.8 396.268 1049.13 407.386 cv
1036.64 418.353 1019.05 423.915 996.866 423.915 cv
952.251 342.486 mo
948.172 342.486 944.545 342.047 941.339 341.159 cv
940.369 337.729 939.881 333.814 939.881 329.432 cv
939.881 228.814 li
967.761 256.7 li
967.761 339.482 li
963.508 341.498 958.373 342.486 952.251 342.486 cv
.901961 .745098 .623529 rgb
f
968.983 396.03 mo
946.942 396.03 929.468 390.466 917.046 379.493 cv
904.459 368.38 896.525 359.06 896.525 359.06 cv
898.078 228.814 li
923.146 212.084 li
939.881 228.814 li
939.881 329.432 li
939.881 339.344 942.379 346.869 947.303 351.79 cv
952.299 356.789 959.389 359.217 968.983 359.217 cv
978.597 359.217 985.775 356.774 990.931 351.751 cv
995.982 346.83 998.546 339.321 998.546 329.432 cv
998.546 228.814 li
1023.61 212.084 li
1040.35 228.814 li
1040.35 331.02 li
1040.35 352.07 1033.92 368.385 1021.25 379.503 cv
1008.75 390.47 991.166 396.03 968.983 396.03 cv
.670588 .254902 0 rgb
f
952.251 379.299 mo
930.212 379.299 912.739 373.735 900.314 362.763 cv
887.726 351.65 881.347 335.342 881.347 314.289 cv
881.347 212.084 li
923.146 212.084 li
923.146 312.7 li
923.146 322.614 925.645 330.138 930.571 335.061 cv
935.565 340.059 942.657 342.486 952.251 342.486 cv
961.867 342.486 969.048 340.047 974.199 335.021 cv
979.252 330.1 981.812 322.591 981.812 312.7 cv
981.812 212.084 li
1023.61 212.084 li
1023.61 314.289 li
1023.61 335.342 1017.19 351.653 1004.52 362.771 cv
992.022 373.74 974.436 379.299 952.251 379.299 cv
1 .87451 .529412 rgb
f
903.266 359.422 mo
891.622 349.141 885.804 334.099 885.804 314.289 cv
885.804 216.544 li
918.686 216.544 li
918.686 312.7 li
918.686 323.889 921.597 332.396 927.421 338.217 cv
933.237 344.037 941.518 346.946 952.251 346.946 cv
962.985 346.946 971.338 344.037 977.312 338.217 cv
983.284 332.396 986.271 323.889 986.271 312.7 cv
986.271 216.544 li
1019.15 216.544 li
1019.15 314.289 li
1019.15 334.099 1013.29 349.141 1001.58 359.422 cv
989.862 369.703 973.418 374.84 952.251 374.84 cv
931.234 374.84 914.908 369.703 903.266 359.422 cv
1 .752941 .180392 rgb
f
986.271 312.7 mo
986.271 323.889 983.284 332.396 977.312 338.217 cv
971.338 344.037 962.985 346.946 952.251 346.946 cv
942.483 346.946 934.754 344.528 929.058 339.708 cv
929.525 340.263 930.007 340.804 930.519 341.316 cv
936.339 347.139 944.616 350.046 955.352 350.046 cv
966.087 350.046 974.436 347.139 980.412 341.316 cv
986.385 335.497 989.372 326.99 989.372 315.8 cv
989.372 219.644 li
1019.15 219.644 li
1019.15 216.544 li
986.271 216.544 li
986.271 312.7 li
.74902 .286275 0 rgb
f
902.661 358.853 mo
893.495 348.78 888.907 334.966 888.907 317.39 cv
888.907 219.644 li
918.686 219.644 li
918.686 216.544 li
885.804 216.544 li
885.804 314.289 li
885.804 333.743 891.43 348.591 902.661 358.853 cv
f
1001.35 271.569 mo
996.099 271.569 991.556 268.541 989.372 264.135 cv
989.372 252.283 li
991.556 247.877 996.099 244.848 1001.35 244.848 cv
1008.73 244.848 1014.71 250.83 1014.71 258.209 cv
1014.71 265.589 1008.73 271.569 1001.35 271.569 cv
level3{
gsave
clp
[13.3611 0 0 13.3611 1001.35 258.208 ]ct
/3 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jC
nq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6
K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUrs71jCnq@&6K`CUr
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s71jCnUpl2K)b=ks6kI;mXG3'IK/\^s6P(3lZrNqGlR&Ps64\+k]HjgErY<Bs5n;#j_t1[D?&[4s5Rnp
ibAGOBE-q's57Jghdc]C@fP7ms4gu]gg:$8?2rV_s4LTUfNJ7,=9$lPs413MePlLu;?,-Bs3jdDdS9bh
9`NL5s3O@;cU\#\8,ph&s3*k1bX2?Q63#(ls2dJ)a?9LC49*>]s2I%u`Adh82?1QNs2$Pk_D2),0`Sp@
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e
^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&
0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>s1g8e^b5Z&0)r^>
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.236364 .981818 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3611 0 0 13.3611 1001.35 258.208 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
255 <~naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>
nF5r9n*f`6n*]W3mHs<-m-O**m-F!'lK[[!l07Hsl0.?pkND$kkND!ik2k^djlGL`j5]1[j5].Yio/kT
i8EPOi8EMMhqm5Hh;-oBgt^Z=gY:K;g=k96g"G$1f[na,f@SX*f%/C%e^W*ueC<!se'landa?Iid*U.d
d*U+bcd'h]c-=MWbfn8RbKJ)Pb0%lKaiVZGaN2EBa2Z-=`l?$;`Pod6`5BL1_SX1+_83t(_8*k%^V@Ou
~>
<~K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/K7ef/
JqAT*JUr?%IsuiqI=6NkI!g9fH?jd]G^+IWGBS+OF`__IF)uAAEH,r:E,TZ5Df0E/Chmg$C2.KtBkV-l
AnGXeAS#C^@q&nV@:<SP?XI,G?<piB>[(E9>$>'3=]ea,<`W4"<)cgr;c6Lj:f'ta:JX_\9h\5S91qoM
8kDQE7n,s;7Rfg76pj:-6:!n'5X7Ot5!D.n4?P\e4$#A^3&ilV2`EWP2)I-H1GU^?0ek@90J>%2/M/P+
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
989.372 264.135 mo
988.487 262.349 987.989 260.338 987.989 258.209 cv
987.989 256.08 988.487 254.069 989.372 252.283 cv
989.372 264.135 li
level3{
gsave
clp
[13.3611 0 0 13.3611 1001.35 258.208 ]ct
/4 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&c
fP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<
C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"s4D&cfP1B<C&ch"
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s4D&benG$4B)L+hqpApMc=6Xo@/7rPprHb8``r/T>4oa7oY4K!]iFX8;t7Crn@)6_Zqp+q:$o/Xm&itH
X%;NT7d6g>kbLT/U-[q75inS$jI89lR60Dp3T65^i0-(VO>PgS1>RjBgkd]<L+V)3/(fG'f7,4"I4!Kk
-.I2bdrln_F<AnN*megFcYXTGCDb<0(X-J+b@;4.@1gUf&BJ)da&rhj<surH$,]XG_GCEP:'A@*!l%;,
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?
8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls
!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*^I\F?8H?Ls!5D)*
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.236364 .981818 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3611 0 0 13.3611 1001.35 258.208 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8N#s
rVc]mr;?Hhqtg0cq>'j^q>'g\q"OOWp@e4Qp%@tLo^h\Go()AAnaZ,<nF,i7n*]W3mHs<-m-O'(lg!d#
l07Hrkih3mkN:phjlPUbjQ,@]j5T(XiSibRi8EMMhqm5Hh;-oBgt^Z=g=b04f\"j.f@SU)f%&=$eC<!s
e'landa?Iid*U.ccd0n^cHXVYbfn;SbKJ)Ob0%iJaiMQEa2c6?`l?!9`5BL1_SX1+_83q&^q[Y!^:q=q
~>
<~f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX*
e^`4"eC2jodEp4bc-=JUbK@rKaN)?@`Pod5_ns7*^V7Fq]Y(kf]",>\\$i]O['R'DZ*:I9Y-+n.X/`.u
W2HPjV50l\U7n6QT:VXFS=>t8R@'>-QBd`"PEV/lOH5E^NJrdQMM[.EL4t>7K7ec,J:E#sI=-EhH?sj]
GBS+OFE;MDEH#i6DJa3+CMIQsB4kgfARo:[@:<PN?<pf@>?Y03='&F&<E)mp;,C(b:/4MW91hcI84Z9B
~>
<~BP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'m
B4kgfAS#C_@q&nV@:<PN?XI,G?!LW=>$>*4=]ea,=&r@%<)cdo;Gp@h:esk_:JOVY9M8#N8kMZG84Q-=
77BX56UO1+5sR\#5<_7o4?P\e4$#A^3&`cS2E!EL1c$mB0ek@80/"q1/M&G'.Olns.4?Pk-7'ra,U=TY
+sA'O+!)IE*??+=)]BS3(`*u)()@W!'GD,m&J5Qc&.]6\%1EXQ$O[:J#m^b@"pG/5"9\f.!W`9$!!!!!
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
1004.87 270.218 mo
1000.52 270.218 996.976 266.637 996.976 262.235 cv
996.976 257.835 1000.52 254.255 1004.87 254.255 cv
1009.23 254.255 1012.77 257.835 1012.77 262.235 cv
1012.77 266.637 1009.23 270.218 1004.87 270.218 cv
cp
.74902 .286275 0 rgb
f
1010.17 262.035 mo
1010.17 265.185 1007.62 267.737 1004.47 267.737 cv
1003.05 267.737 999.429 266.159 999.429 266.159 cv
999.429 266.159 998.093 262.916 998.093 261.364 cv
998.093 258.215 1000.65 255.661 1003.8 255.661 cv
1006 255.661 1008.83 256.938 1008.83 256.938 cv
1008.83 256.938 1009.87 260.199 1009.93 260.397 cv
1010.09 260.914 1010.17 261.465 1010.17 262.035 cv
cp
.878431 .396078 0 rgb
f
1009.13 259.016 mo
1009.13 263.146 1005.78 266.492 1001.65 266.492 cv
997.517 266.492 994.17 263.146 994.17 259.016 cv
994.17 254.884 997.517 251.534 1001.65 251.534 cv
1005.78 251.534 1009.13 254.884 1009.13 259.016 cv
cp
1 .768627 0 rgb
f
1001.65 264.076 mo
998.857 264.076 996.585 261.805 996.585 259.016 cv
996.585 256.221 998.857 253.949 1001.65 253.949 cv
1004.44 253.949 1006.71 256.221 1006.71 259.016 cv
1006.71 261.805 1004.44 264.076 1001.65 264.076 cv
cp
1 .917647 .501961 rgb
f
997.534 259.71 mo
997.534 257.09 999.666 254.959 1002.28 254.959 cv
1004.09 254.959 1005.67 255.978 1006.47 257.467 cv
1005.81 255.431 1003.9 253.949 1001.65 253.949 cv
998.857 253.949 996.585 256.221 996.585 259.016 cv
996.585 261.114 997.867 262.916 999.693 263.683 cv
998.394 262.833 997.534 261.372 997.534 259.71 cv
cp
1 1 1 rgb
f
1004.13 259.016 mo
1004.13 260.384 1003.02 261.497 1001.65 261.497 cv
1000.28 261.497 999.167 260.384 999.167 259.016 cv
999.167 257.644 1000.28 256.53 1001.65 256.53 cv
1003.02 256.53 1004.13 257.644 1004.13 259.016 cv
cp
f
1001.35 337.837 mo
994.788 337.837 989.332 333.108 988.204 326.872 cv
988.793 324.346 989.159 321.619 989.302 318.693 cv
991.458 314.209 996.042 311.114 1001.35 311.114 cv
1008.73 311.114 1014.71 317.099 1014.71 324.476 cv
1014.71 331.855 1008.73 337.837 1001.35 337.837 cv
level3{
gsave
clp
[13.3613 0 0 13.3613 1001.35 324.476 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3613 0 0 13.3613 1001.35 324.476 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
988.204 326.872 mo
988.063 326.095 987.989 325.294 987.989 324.476 cv
987.989 322.404 988.461 320.443 989.302 318.693 cv
989.159 321.619 988.793 324.346 988.204 326.872 cv
level3{
gsave
clp
[13.3613 0 0 13.3613 1001.35 324.476 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3613 0 0 13.3613 1001.35 324.476 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1004.87 336.483 mo
1000.52 336.483 996.976 332.903 996.976 328.501 cv
996.976 324.1 1000.52 320.521 1004.87 320.521 cv
1009.22 320.521 1012.77 324.1 1012.77 328.501 cv
1012.77 332.903 1009.22 336.483 1004.87 336.483 cv
cp
.74902 .286275 0 rgb
f
1010.17 328.302 mo
1010.17 331.451 1007.61 334.003 1004.47 334.003 cv
1003.05 334.003 999.429 332.426 999.429 332.426 cv
999.429 332.426 998.093 329.184 998.093 327.631 cv
998.093 324.48 1000.65 321.928 1003.8 321.928 cv
1006 321.928 1008.83 323.204 1008.83 323.204 cv
1008.83 323.204 1009.87 326.466 1009.93 326.661 cv
1010.09 327.181 1010.17 327.731 1010.17 328.302 cv
cp
.878431 .396078 0 rgb
f
1009.13 325.282 mo
1009.13 329.41 1005.78 332.759 1001.65 332.759 cv
997.517 332.759 994.168 329.41 994.168 325.282 cv
994.168 321.148 997.517 317.8 1001.65 317.8 cv
1005.78 317.8 1009.13 321.148 1009.13 325.282 cv
cp
1 .768627 0 rgb
f
1001.65 330.343 mo
998.857 330.343 996.585 328.071 996.585 325.282 cv
996.585 322.488 998.857 320.217 1001.65 320.217 cv
1004.44 320.217 1006.71 322.488 1006.71 325.282 cv
1006.71 328.071 1004.44 330.343 1001.65 330.343 cv
cp
1 .917647 .501961 rgb
f
997.534 325.977 mo
997.534 323.358 999.666 321.228 1002.28 321.228 cv
1004.09 321.228 1005.67 322.244 1006.47 323.732 cv
1005.81 321.696 1003.9 320.217 1001.65 320.217 cv
998.857 320.217 996.585 322.488 996.585 325.282 cv
996.585 327.377 997.867 329.184 999.691 329.949 cv
998.394 329.1 997.534 327.639 997.534 325.977 cv
cp
1 1 1 rgb
f
1004.13 325.282 mo
1004.13 326.652 1003.02 327.763 1001.65 327.763 cv
1000.28 327.763 999.167 326.652 999.167 325.282 cv
999.167 323.91 1000.28 322.799 1001.65 322.799 cv
1003.02 322.799 1004.13 323.91 1004.13 325.282 cv
cp
f
986.133 363.162 mo
978.753 363.162 972.772 357.179 972.772 349.798 cv
972.772 348.618 972.925 347.474 973.213 346.385 cv
975.908 345.057 978.307 343.368 980.412 341.316 cv
981.871 339.895 983.151 338.314 984.254 336.572 cv
984.867 336.486 985.495 336.441 986.133 336.441 cv
993.51 336.441 999.488 342.422 999.488 349.798 cv
999.488 357.179 993.51 363.162 986.133 363.162 cv
level3{
gsave
clp
[13.3589 0 0 13.3589 986.131 349.802 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3589 0 0 13.3589 986.131 349.802 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
973.213 346.385 mo
974.566 341.25 978.9 337.326 984.254 336.572 cv
983.151 338.314 981.871 339.895 980.412 341.316 cv
978.307 343.368 975.908 345.057 973.213 346.385 cv
level3{
gsave
clp
[13.3589 0 0 13.3589 986.131 349.802 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3589 0 0 13.3589 986.131 349.802 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
989.652 361.81 mo
985.297 361.81 981.755 358.228 981.755 353.827 cv
981.755 349.427 985.297 345.846 989.652 345.846 cv
994.008 345.846 997.549 349.427 997.549 353.827 cv
997.549 358.228 994.008 361.81 989.652 361.81 cv
cp
.74902 .286275 0 rgb
f
994.949 353.626 mo
994.949 356.776 992.397 359.329 989.248 359.329 cv
987.826 359.329 984.21 357.749 984.21 357.749 cv
984.21 357.749 982.876 354.509 982.876 352.955 cv
982.876 349.804 985.428 347.251 988.576 347.251 cv
990.784 347.251 993.616 348.527 993.616 348.527 cv
993.616 348.527 994.653 351.788 994.712 351.986 cv
994.865 352.506 994.949 353.058 994.949 353.626 cv
cp
.878431 .396078 0 rgb
f
993.907 350.604 mo
993.907 354.735 990.562 358.085 986.43 358.085 cv
982.299 358.085 978.947 354.735 978.947 350.604 cv
978.947 346.475 982.299 343.126 986.43 343.126 cv
990.562 343.126 993.907 346.475 993.907 350.604 cv
cp
1 .768627 0 rgb
f
986.43 355.669 mo
983.635 355.669 981.364 353.396 981.364 350.604 cv
981.364 347.811 983.635 345.54 986.43 345.54 cv
989.222 345.54 991.491 347.811 991.491 350.604 cv
991.491 353.396 989.222 355.669 986.43 355.669 cv
cp
1 .917647 .501961 rgb
f
982.315 351.3 mo
982.315 348.683 984.445 346.552 987.064 346.552 cv
988.872 346.552 990.448 347.567 991.249 349.06 cv
990.595 347.021 988.68 345.54 986.43 345.54 cv
983.635 345.54 981.364 347.811 981.364 350.604 cv
981.364 352.702 982.649 354.509 984.471 355.276 cv
983.178 354.426 982.315 352.962 982.315 351.3 cv
cp
1 1 1 rgb
f
988.91 350.604 mo
988.91 351.976 987.8 353.085 986.43 353.085 cv
985.06 353.085 983.949 351.976 983.949 350.604 cv
983.949 349.233 985.06 348.123 986.43 348.123 cv
987.8 348.123 988.91 349.233 988.91 350.604 cv
cp
f
900.321 304.654 mo
895.488 304.654 891.253 302.087 888.907 298.241 cv
888.907 284.348 li
891.253 280.502 895.488 277.935 900.321 277.935 cv
907.7 277.935 913.683 283.917 913.683 291.294 cv
913.683 298.673 907.7 304.654 900.321 304.654 cv
level3{
gsave
clp
[13.3601 0 0 13.3601 900.322 291.294 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3601 0 0 13.3601 900.322 291.294 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
888.907 298.241 mo
887.672 296.217 886.961 293.839 886.961 291.294 cv
886.961 288.75 887.672 286.372 888.907 284.348 cv
888.907 298.241 li
level3{
gsave
clp
[13.3601 0 0 13.3601 900.322 291.294 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3601 0 0 13.3601 900.322 291.294 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
903.845 303.304 mo
899.489 303.304 895.948 299.724 895.948 295.319 cv
895.948 290.917 899.489 287.337 903.845 287.337 cv
908.198 287.337 911.743 290.917 911.743 295.319 cv
911.743 299.724 908.198 303.304 903.845 303.304 cv
cp
.74902 .286275 0 rgb
f
909.144 295.119 mo
909.144 298.27 906.591 300.823 903.442 300.823 cv
902.021 300.823 898.402 299.243 898.402 299.243 cv
898.402 299.243 897.068 296 897.068 294.451 cv
897.068 291.299 899.621 288.747 902.77 288.747 cv
904.979 288.747 907.81 290.021 907.81 290.021 cv
907.81 290.021 908.847 293.284 908.906 293.479 cv
909.063 294 909.144 294.549 909.144 295.119 cv
cp
.878431 .396078 0 rgb
f
908.1 292.097 mo
908.1 296.23 904.751 299.577 900.62 299.577 cv
896.493 299.577 893.142 296.23 893.142 292.097 cv
893.142 287.968 896.493 284.619 900.62 284.619 cv
904.751 284.619 908.1 287.968 908.1 292.097 cv
cp
1 .768627 0 rgb
f
900.62 297.162 mo
897.828 297.162 895.558 294.891 895.558 292.097 cv
895.558 289.306 897.828 287.034 900.62 287.034 cv
903.415 287.034 905.686 289.306 905.686 292.097 cv
905.686 294.891 903.415 297.162 900.62 297.162 cv
cp
1 .917647 .501961 rgb
f
896.508 292.794 mo
896.508 290.174 898.638 288.046 901.257 288.046 cv
903.066 288.046 904.643 289.06 905.44 290.554 cv
904.788 288.515 902.876 287.034 900.62 287.034 cv
897.828 287.034 895.558 289.306 895.558 292.097 cv
895.558 294.197 896.842 296 898.667 296.768 cv
897.366 295.921 896.508 294.457 896.508 292.794 cv
cp
1 1 1 rgb
f
903.104 292.097 mo
903.104 293.469 901.99 294.58 900.62 294.58 cv
899.251 294.58 898.14 293.469 898.14 292.097 cv
898.14 290.727 899.251 289.615 900.62 289.615 cv
901.99 289.615 903.104 290.727 903.104 292.097 cv
cp
f
1001.35 304.654 mo
996.099 304.654 991.556 301.625 989.372 297.22 cv
989.372 285.369 li
991.556 280.964 996.099 277.935 1001.35 277.935 cv
1008.73 277.935 1014.71 283.917 1014.71 291.294 cv
1014.71 298.673 1008.73 304.654 1001.35 304.654 cv
level3{
gsave
clp
[13.3606 0 0 13.3606 1001.35 291.294 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3606 0 0 13.3606 1001.35 291.294 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
989.372 297.22 mo
988.487 295.434 987.989 293.423 987.989 291.294 cv
987.989 289.166 988.487 287.155 989.372 285.369 cv
989.372 297.22 li
level3{
gsave
clp
[13.3606 0 0 13.3606 1001.35 291.294 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3606 0 0 13.3606 1001.35 291.294 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1004.87 303.304 mo
1000.52 303.304 996.976 299.724 996.976 295.319 cv
996.976 290.917 1000.52 287.337 1004.87 287.337 cv
1009.22 287.337 1012.77 290.917 1012.77 295.319 cv
1012.77 299.724 1009.22 303.304 1004.87 303.304 cv
cp
.74902 .286275 0 rgb
f
1010.17 295.119 mo
1010.17 298.27 1007.61 300.823 1004.47 300.823 cv
1003.05 300.823 999.429 299.243 999.429 299.243 cv
999.429 299.243 998.093 296 998.093 294.451 cv
998.093 291.299 1000.65 288.747 1003.8 288.747 cv
1006 288.747 1008.83 290.021 1008.83 290.021 cv
1008.83 290.021 1009.87 293.284 1009.93 293.479 cv
1010.09 294 1010.17 294.549 1010.17 295.119 cv
cp
.878431 .396078 0 rgb
f
1009.13 292.097 mo
1009.13 296.23 1005.78 299.577 1001.65 299.577 cv
997.517 299.577 994.168 296.23 994.168 292.097 cv
994.168 287.968 997.517 284.619 1001.65 284.619 cv
1005.78 284.619 1009.13 287.968 1009.13 292.097 cv
cp
1 .768627 0 rgb
f
1001.65 297.162 mo
998.857 297.162 996.585 294.891 996.585 292.097 cv
996.585 289.306 998.857 287.034 1001.65 287.034 cv
1004.44 287.034 1006.71 289.306 1006.71 292.097 cv
1006.71 294.891 1004.44 297.162 1001.65 297.162 cv
cp
1 .917647 .501961 rgb
f
997.534 292.794 mo
997.534 290.174 999.666 288.046 1002.28 288.046 cv
1004.09 288.046 1005.67 289.06 1006.47 290.554 cv
1005.81 288.515 1003.9 287.034 1001.65 287.034 cv
998.857 287.034 996.585 289.306 996.585 292.097 cv
996.585 294.197 997.867 296 999.691 296.768 cv
998.394 295.921 997.534 294.457 997.534 292.794 cv
cp
1 1 1 rgb
f
1004.13 292.097 mo
1004.13 293.469 1003.02 294.58 1001.65 294.58 cv
1000.28 294.58 999.167 293.469 999.167 292.097 cv
999.167 290.727 1000.28 289.615 1001.65 289.615 cv
1003.02 289.615 1004.13 290.727 1004.13 292.097 cv
cp
f
900.321 271.569 mo
895.488 271.569 891.253 269.002 888.907 265.157 cv
888.907 251.261 li
891.253 247.415 895.488 244.848 900.321 244.848 cv
907.7 244.848 913.683 250.83 913.683 258.209 cv
913.683 265.589 907.7 271.569 900.321 271.569 cv
level3{
gsave
clp
[13.3606 0 0 13.3606 900.322 258.208 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3606 0 0 13.3606 900.322 258.208 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
888.907 265.157 mo
887.672 263.132 886.961 260.754 886.961 258.209 cv
886.961 255.664 887.672 253.286 888.907 251.261 cv
888.907 265.157 li
level3{
gsave
clp
[13.3606 0 0 13.3606 900.322 258.208 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3606 0 0 13.3606 900.322 258.208 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
903.845 270.218 mo
899.489 270.218 895.948 266.637 895.948 262.235 cv
895.948 257.835 899.489 254.255 903.845 254.255 cv
908.198 254.255 911.743 257.835 911.743 262.235 cv
911.743 266.637 908.198 270.218 903.845 270.218 cv
cp
.74902 .286275 0 rgb
f
909.144 262.035 mo
909.144 265.185 906.591 267.737 903.442 267.737 cv
902.021 267.737 898.402 266.159 898.402 266.159 cv
898.402 266.159 897.068 262.916 897.068 261.364 cv
897.068 258.215 899.621 255.661 902.77 255.661 cv
904.979 255.661 907.81 256.938 907.81 256.938 cv
907.81 256.938 908.847 260.199 908.906 260.397 cv
909.063 260.914 909.144 261.465 909.144 262.035 cv
cp
.878431 .396078 0 rgb
f
908.1 259.016 mo
908.1 263.146 904.751 266.492 900.62 266.492 cv
896.493 266.492 893.142 263.146 893.142 259.016 cv
893.142 254.884 896.493 251.534 900.62 251.534 cv
904.751 251.534 908.1 254.884 908.1 259.016 cv
cp
1 .768627 0 rgb
f
900.62 264.076 mo
897.828 264.076 895.558 261.805 895.558 259.016 cv
895.558 256.221 897.828 253.949 900.62 253.949 cv
903.415 253.949 905.686 256.221 905.686 259.016 cv
905.686 261.805 903.415 264.076 900.62 264.076 cv
cp
1 .917647 .501961 rgb
f
896.508 259.71 mo
896.508 257.09 898.638 254.959 901.257 254.959 cv
903.066 254.959 904.643 255.978 905.44 257.467 cv
904.788 255.431 902.876 253.949 900.62 253.949 cv
897.828 253.949 895.558 256.221 895.558 259.016 cv
895.558 261.114 896.842 262.916 898.667 263.683 cv
897.366 262.833 896.508 261.372 896.508 259.71 cv
cp
1 1 1 rgb
f
903.104 259.016 mo
903.104 260.384 901.99 261.497 900.62 261.497 cv
899.251 261.497 898.14 260.384 898.14 259.016 cv
898.14 257.644 899.251 256.53 900.62 256.53 cv
901.99 256.53 903.104 257.644 903.104 259.016 cv
cp
f
1006.64 216.544 mo
996.056 216.544 li
997.679 215.843 999.469 215.454 1001.35 215.454 cv
1003.23 215.454 1005.02 215.843 1006.64 216.544 cv
level3{
gsave
clp
[13.3604 0 0 13.3604 1001.35 228.813 ]ct
/5 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(
ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!
\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6s7j,(ppgA!\Gu?6
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s7j,(ppgA!\,Z33s7`u%p9jqo[/]j,s7N_uos4VjZ2aI#s7EPqo<82cY5e*rs73;lnuVl]X8h^is7*,h
n>ZHWW;l@bs6llcn#$-QV>otZs6ZT]mA'^KUAsSRs6QEYl_"4CTE"5Ks6?0TlC@n=S,_`Bs66!PkaDJ7
R/c?9s6#aKkEc/1Q2g!2s5fIEjc]Z)P5jU*s5]:Aj,a6#O8n4"s5K%<if*orMuVans58b6i/.KkM#Z@f
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3
hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6h
L]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7es5/V3hhV6hL]?7e
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.236364 .981818 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3604 0 0 13.3604 1001.35 228.813 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
255 <~p\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FV
p\4FVp\4CTp@e4Rp%A"Np%A"Np%7nKo^qeJo^qbHoCMSFo()ABo()ABo'u8?naZ/>nF5r:nF5r:nF,i7
n*f`6n*f]4mdBN2mHs<.mHs9,m-O**m-O*)lg*m&lg!d#lK[["lK[Wul07Hskih6okih6oki_-lkND$j
k2tggk2tggjlPUcjlPRajQ,C_j5]1[j5]1[j5].Yio8tWiSibSiSibSiS`YPi8EPNhr!>Khqm5HhVR,G
~>
<~\$riU\$riU\$riU\$riU\$riU\$riU\$riU\$riU\$riU\$riU\$riU\$riU\$riU\$riU\$riU\$riU
\$riT[^NWQ[^ENN['[3HZa7!EZa-mBZ*CR<Yct=7YHP.5Y-+q0Xf\_-XfSV*XK/D&WiE(uWMukrWMlbo
Vl-GiVP^5fVPU,cUnjf]USFQXU8"BVTqS0QTV.pLT:VXGSt;OESXl:@S=?";R[T\6R[TY4R@'A/Q^=&)
QBmi&QBd`#Pa%DrPEV/mP*(lhOcbcfOH>QbO,o<]NfK-[NK&pVN/W[QMi*CLM2@(FLkpkCLkgb@L5(G;
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
1001.35 242.173 mo
996.099 242.173 991.556 239.145 989.372 234.74 cv
989.372 222.889 li
989.964 221.696 990.729 220.602 991.634 219.644 cv
1011.07 219.644 li
1013.33 222.037 1014.71 225.264 1014.71 228.814 cv
1014.71 236.193 1008.73 242.173 1001.35 242.173 cv
level3{
gsave
clp
[13.3604 0 0 13.3604 1001.35 228.813 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3604 0 0 13.3604 1001.35 228.813 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
989.372 234.74 mo
988.487 232.954 987.989 230.943 987.989 228.814 cv
987.989 226.687 988.487 224.675 989.372 222.889 cv
989.372 234.74 li
1011.07 219.644 mo
991.634 219.644 li
992.873 218.332 994.375 217.27 996.056 216.544 cv
1006.64 216.544 li
1008.32 217.27 1009.83 218.332 1011.07 219.644 cv
level3{
gsave
clp
[13.3604 0 0 13.3604 1001.35 228.813 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3604 0 0 13.3604 1001.35 228.813 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1004.87 240.821 mo
1000.52 240.821 996.976 237.242 996.976 232.84 cv
996.976 228.438 1000.52 224.858 1004.87 224.858 cv
1009.23 224.858 1012.77 228.438 1012.77 232.84 cv
1012.77 237.242 1009.23 240.821 1004.87 240.821 cv
cp
.74902 .286275 0 rgb
f
1010.17 232.639 mo
1010.17 235.789 1007.62 238.341 1004.47 238.341 cv
1003.05 238.341 999.429 236.763 999.429 236.763 cv
999.429 236.763 998.093 233.521 998.093 231.968 cv
998.093 228.82 1000.65 226.267 1003.8 226.267 cv
1006 226.267 1008.83 227.54 1008.83 227.54 cv
1008.83 227.54 1009.87 230.803 1009.93 230.998 cv
1010.09 231.52 1010.17 232.069 1010.17 232.639 cv
cp
.878431 .396078 0 rgb
f
1009.13 229.618 mo
1009.13 233.748 1005.78 237.098 1001.65 237.098 cv
997.517 237.098 994.17 233.748 994.17 229.618 cv
994.17 225.487 997.517 222.138 1001.65 222.138 cv
1005.78 222.138 1009.13 225.487 1009.13 229.618 cv
cp
1 .768627 0 rgb
f
1001.65 234.684 mo
998.857 234.684 996.585 232.412 996.585 229.618 cv
996.585 226.826 998.857 224.555 1001.65 224.555 cv
1004.44 224.555 1006.71 226.826 1006.71 229.618 cv
1006.71 232.412 1004.44 234.684 1001.65 234.684 cv
cp
1 .917647 .501961 rgb
f
997.534 230.313 mo
997.534 227.695 999.666 225.565 1002.28 225.565 cv
1004.09 225.565 1005.67 226.582 1006.47 228.072 cv
1005.81 226.035 1003.9 224.555 1001.65 224.555 cv
998.857 224.555 996.585 226.826 996.585 229.618 cv
996.585 231.717 997.867 233.521 999.693 234.288 cv
998.394 233.439 997.534 231.975 997.534 230.313 cv
cp
1 1 1 rgb
f
1004.13 229.618 mo
1004.13 230.99 1003.02 232.099 1001.65 232.099 cv
1000.28 232.099 999.167 230.99 999.167 229.618 cv
999.167 228.247 1000.28 227.137 1001.65 227.137 cv
1003.02 227.137 1004.13 228.247 1004.13 229.618 cv
cp
f
900.321 242.173 mo
895.488 242.173 891.253 239.606 888.907 235.761 cv
888.907 221.868 li
889.396 221.067 889.966 220.322 890.606 219.644 cv
910.037 219.644 li
912.297 222.037 913.683 225.264 913.683 228.814 cv
913.683 236.193 907.7 242.173 900.321 242.173 cv
level3{
gsave
clp
[13.3599 0 0 13.3599 900.322 228.813 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3599 0 0 13.3599 900.322 228.813 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
905.615 216.544 mo
895.028 216.544 li
896.651 215.843 898.441 215.454 900.321 215.454 cv
902.202 215.454 903.992 215.843 905.615 216.544 cv
level3{
gsave
clp
[13.3599 0 0 13.3599 900.322 228.813 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3599 0 0 13.3599 900.322 228.813 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
888.907 235.761 mo
887.672 233.737 886.961 231.359 886.961 228.814 cv
886.961 226.27 887.672 223.892 888.907 221.868 cv
888.907 235.761 li
910.037 219.644 mo
890.606 219.644 li
891.845 218.332 893.348 217.27 895.028 216.544 cv
905.615 216.544 li
907.296 217.27 908.798 218.332 910.037 219.644 cv
level3{
gsave
clp
[13.3599 0 0 13.3599 900.322 228.813 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3599 0 0 13.3599 900.322 228.813 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
903.845 240.821 mo
899.489 240.821 895.948 237.242 895.948 232.84 cv
895.948 228.438 899.489 224.858 903.845 224.858 cv
908.198 224.858 911.743 228.438 911.743 232.84 cv
911.743 237.242 908.198 240.821 903.845 240.821 cv
cp
.74902 .286275 0 rgb
f
909.144 232.639 mo
909.144 235.789 906.591 238.341 903.442 238.341 cv
902.021 238.341 898.402 236.763 898.402 236.763 cv
898.402 236.763 897.068 233.521 897.068 231.968 cv
897.068 228.82 899.621 226.267 902.77 226.267 cv
904.979 226.267 907.81 227.54 907.81 227.54 cv
907.81 227.54 908.847 230.803 908.906 230.998 cv
909.063 231.52 909.144 232.069 909.144 232.639 cv
cp
.878431 .396078 0 rgb
f
908.1 229.618 mo
908.1 233.748 904.751 237.098 900.62 237.098 cv
896.493 237.098 893.142 233.748 893.142 229.618 cv
893.142 225.487 896.493 222.138 900.62 222.138 cv
904.751 222.138 908.1 225.487 908.1 229.618 cv
cp
1 .768627 0 rgb
f
900.62 234.684 mo
897.828 234.684 895.558 232.412 895.558 229.618 cv
895.558 226.826 897.828 224.555 900.62 224.555 cv
903.415 224.555 905.686 226.826 905.686 229.618 cv
905.686 232.412 903.415 234.684 900.62 234.684 cv
cp
1 .917647 .501961 rgb
f
896.508 230.313 mo
896.508 227.695 898.638 225.565 901.257 225.565 cv
903.066 225.565 904.643 226.582 905.44 228.072 cv
904.788 226.035 902.876 224.555 900.62 224.555 cv
897.828 224.555 895.558 226.826 895.558 229.618 cv
895.558 231.717 896.842 233.521 898.667 234.288 cv
897.366 233.439 896.508 231.975 896.508 230.313 cv
cp
1 1 1 rgb
f
903.104 229.618 mo
903.104 230.99 901.99 232.099 900.62 232.099 cv
899.251 232.099 898.14 230.99 898.14 229.618 cv
898.14 228.247 899.251 227.137 900.62 227.137 cv
901.99 227.137 903.104 228.247 903.104 229.618 cv
cp
f
900.321 337.837 mo
896.371 337.837 892.819 336.12 890.372 333.392 cv
889.404 328.498 888.915 323.21 888.907 317.53 cv
891.254 313.683 895.489 311.114 900.321 311.114 cv
907.7 311.114 913.683 317.099 913.683 324.476 cv
913.683 331.855 907.7 337.837 900.321 337.837 cv
level3{
gsave
clp
[13.3608 0 0 13.3608 900.322 324.476 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3608 0 0 13.3608 900.322 324.476 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
890.372 333.392 mo
888.251 331.027 886.961 327.902 886.961 324.476 cv
886.961 321.932 887.673 319.554 888.907 317.53 cv
888.915 323.21 889.404 328.498 890.372 333.392 cv
level3{
gsave
clp
[13.3608 0 0 13.3608 900.322 324.476 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3608 0 0 13.3608 900.322 324.476 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
903.845 336.483 mo
899.489 336.483 895.948 332.903 895.948 328.501 cv
895.948 324.1 899.489 320.521 903.845 320.521 cv
908.198 320.521 911.743 324.1 911.743 328.501 cv
911.743 332.903 908.198 336.483 903.845 336.483 cv
cp
.74902 .286275 0 rgb
f
909.144 328.302 mo
909.144 331.451 906.591 334.003 903.442 334.003 cv
902.021 334.003 898.405 332.426 898.405 332.426 cv
898.405 332.426 897.068 329.184 897.068 327.631 cv
897.068 324.48 899.621 321.928 902.77 321.928 cv
904.98 321.928 907.81 323.204 907.81 323.204 cv
907.81 323.204 908.847 326.466 908.906 326.661 cv
909.063 327.181 909.144 327.731 909.144 328.302 cv
cp
.878431 .396078 0 rgb
f
908.103 325.282 mo
908.103 329.41 904.753 332.759 900.62 332.759 cv
896.493 332.759 893.145 329.41 893.145 325.282 cv
893.145 321.148 896.493 317.8 900.62 317.8 cv
904.753 317.8 908.103 321.148 908.103 325.282 cv
cp
1 .768627 0 rgb
f
900.62 330.343 mo
897.828 330.343 895.558 328.071 895.558 325.282 cv
895.558 322.488 897.828 320.217 900.62 320.217 cv
903.415 320.217 905.686 322.488 905.686 325.282 cv
905.686 328.071 903.415 330.343 900.62 330.343 cv
cp
1 .917647 .501961 rgb
f
896.511 325.977 mo
896.511 323.358 898.64 321.228 901.259 321.228 cv
903.066 321.228 904.643 322.244 905.44 323.732 cv
904.788 321.696 902.876 320.217 900.62 320.217 cv
897.828 320.217 895.558 322.488 895.558 325.282 cv
895.558 327.377 896.842 329.184 898.667 329.949 cv
897.368 329.1 896.511 327.639 896.511 325.977 cv
cp
1 1 1 rgb
f
903.104 325.282 mo
903.104 326.652 901.99 327.763 900.62 327.763 cv
899.251 327.763 898.143 326.652 898.143 325.282 cv
898.143 323.91 899.251 322.799 900.62 322.799 cv
901.99 322.799 903.104 323.91 903.104 325.282 cv
cp
f
916.286 363.162 mo
908.908 363.162 902.926 357.179 902.926 349.798 cv
902.926 342.422 908.908 336.441 916.286 336.441 cv
923.666 336.441 929.645 342.422 929.645 349.798 cv
929.645 357.179 923.666 363.162 916.286 363.162 cv
level3{
gsave
clp
[13.3604 0 0 13.3604 916.285 349.802 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3604 0 0 13.3604 916.285 349.802 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
919.808 361.81 mo
915.455 361.81 911.91 358.228 911.91 353.827 cv
911.91 349.427 915.455 345.846 919.808 345.846 cv
924.163 345.846 927.702 349.427 927.702 353.827 cv
927.702 358.228 924.163 361.81 919.808 361.81 cv
cp
.74902 .286275 0 rgb
f
925.107 353.626 mo
925.107 356.776 922.553 359.329 919.405 359.329 cv
917.983 359.329 914.367 357.749 914.367 357.749 cv
914.367 357.749 913.028 354.509 913.028 352.955 cv
913.028 349.804 915.581 347.251 918.731 347.251 cv
920.94 347.251 923.77 348.527 923.77 348.527 cv
923.77 348.527 924.809 351.788 924.868 351.986 cv
925.024 352.506 925.107 353.058 925.107 353.626 cv
cp
.878431 .396078 0 rgb
f
924.064 350.604 mo
924.064 354.735 920.716 358.085 916.585 358.085 cv
912.452 358.085 909.106 354.735 909.106 350.604 cv
909.106 346.475 912.452 343.126 916.585 343.126 cv
920.716 343.126 924.064 346.475 924.064 350.604 cv
cp
1 .768627 0 rgb
f
916.585 355.669 mo
913.79 355.669 911.523 353.396 911.523 350.604 cv
911.523 347.811 913.79 345.54 916.585 345.54 cv
919.378 345.54 921.647 347.811 921.647 350.604 cv
921.647 353.396 919.378 355.669 916.585 355.669 cv
cp
1 .917647 .501961 rgb
f
912.471 351.3 mo
912.471 348.683 914.603 346.552 917.218 346.552 cv
919.028 346.552 920.604 347.567 921.405 349.06 cv
920.75 347.021 918.839 345.54 916.585 345.54 cv
913.79 345.54 911.523 347.811 911.523 350.604 cv
911.523 352.702 912.804 354.509 914.63 355.276 cv
913.33 354.426 912.471 352.962 912.471 351.3 cv
cp
1 1 1 rgb
f
919.065 350.604 mo
919.065 351.976 917.955 353.085 916.585 353.085 cv
915.216 353.085 914.103 351.976 914.103 350.604 cv
914.103 349.233 915.216 348.123 916.585 348.123 cv
917.955 348.123 919.065 349.233 919.065 350.604 cv
cp
f
952.251 346.946 mo
952.211 346.946 952.17 346.946 952.131 346.946 cv
952.117 346.946 952.104 346.946 952.09 346.946 cv
952.064 346.946 952.038 346.946 952.011 346.946 cv
951.994 346.946 951.976 346.946 951.958 346.946 cv
951.936 346.946 951.915 346.945 951.893 346.945 cv
951.873 346.945 951.852 346.945 951.832 346.945 cv
951.814 346.945 951.795 346.945 951.777 346.944 cv
951.753 346.944 951.73 346.944 951.707 346.944 cv
951.692 346.944 951.676 346.944 951.661 346.943 cv
951.637 346.943 951.612 346.943 951.587 346.943 cv
951.574 346.942 951.559 346.942 951.546 346.942 cv
951.519 346.942 951.492 346.941 951.465 346.941 cv
951.455 346.941 951.447 346.941 951.437 346.941 cv
951.406 346.94 951.375 346.94 951.344 346.939 cv
951.341 346.939 951.338 346.939 951.335 346.939 cv
948.747 346.898 946.306 346.683 944.012 346.294 cv
946.126 344.891 948.663 344.073 951.392 344.073 cv
954.256 344.073 956.91 344.976 959.085 346.511 cv
956.926 346.801 954.648 346.946 952.251 346.946 cv
level3{
gsave
clp
[13.3594 0 0 13.3594 951.39 357.434 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3594 0 0 13.3594 951.39 357.434 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
951.392 370.793 mo
944.011 370.793 938.03 364.813 938.03 357.433 cv
938.03 353.807 939.475 350.518 941.82 348.111 cv
945.786 349.401 950.296 350.046 955.352 350.046 cv
957.761 350.046 960.049 349.9 962.218 349.607 cv
963.81 351.806 964.749 354.51 964.749 357.433 cv
964.749 364.813 958.768 370.793 951.392 370.793 cv
952.251 346.946 mo
952.211 346.946 952.17 346.946 952.131 346.946 cv
952.17 346.946 952.211 346.946 952.251 346.946 cv
954.648 346.946 956.926 346.801 959.085 346.511 cv
959.085 346.511 li
956.926 346.801 954.648 346.946 952.251 346.946 cv
952.09 346.946 mo
952.064 346.946 952.038 346.946 952.011 346.946 cv
952.038 346.946 952.064 346.946 952.09 346.946 cv
951.958 346.946 mo
951.936 346.946 951.915 346.945 951.893 346.945 cv
951.915 346.945 951.936 346.946 951.958 346.946 cv
951.832 346.945 mo
951.814 346.945 951.795 346.945 951.777 346.944 cv
951.795 346.945 951.814 346.945 951.832 346.945 cv
951.707 346.944 mo
951.692 346.944 951.676 346.944 951.661 346.943 cv
951.676 346.944 951.692 346.944 951.707 346.944 cv
951.587 346.943 mo
951.573 346.942 951.56 346.942 951.546 346.942 cv
951.559 346.942 951.574 346.942 951.587 346.943 cv
951.465 346.941 mo
951.456 346.941 951.446 346.941 951.437 346.941 cv
951.447 346.941 951.455 346.941 951.465 346.941 cv
951.344 346.939 mo
951.34 346.939 951.338 346.939 951.335 346.939 cv
951.338 346.939 951.341 346.939 951.344 346.939 cv
level3{
gsave
clp
[13.3594 0 0 13.3594 951.39 357.434 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3594 0 0 13.3594 951.39 357.434 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
955.352 350.046 mo
950.296 350.046 945.786 349.401 941.82 348.111 cv
942.483 347.431 943.218 346.821 944.012 346.294 cv
946.306 346.683 948.747 346.898 951.335 346.939 cv
951.338 346.939 951.34 346.939 951.344 346.939 cv
951.375 346.94 951.406 346.94 951.437 346.941 cv
951.446 346.941 951.456 346.941 951.465 346.941 cv
951.492 346.941 951.519 346.942 951.546 346.942 cv
951.56 346.942 951.573 346.942 951.587 346.943 cv
951.612 346.943 951.637 346.943 951.661 346.943 cv
951.676 346.944 951.692 346.944 951.707 346.944 cv
951.73 346.944 951.753 346.944 951.777 346.944 cv
951.795 346.945 951.814 346.945 951.832 346.945 cv
951.852 346.945 951.873 346.945 951.893 346.945 cv
951.915 346.945 951.936 346.946 951.958 346.946 cv
951.976 346.946 951.994 346.946 952.011 346.946 cv
952.038 346.946 952.064 346.946 952.09 346.946 cv
952.104 346.946 952.117 346.946 952.131 346.946 cv
952.17 346.946 952.211 346.946 952.251 346.946 cv
954.648 346.946 956.926 346.801 959.085 346.511 cv
960.292 347.363 961.352 348.41 962.218 349.607 cv
960.049 349.9 957.761 350.046 955.352 350.046 cv
level3{
gsave
clp
[13.3594 0 0 13.3594 951.39 357.434 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3594 0 0 13.3594 951.39 357.434 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
954.913 369.44 mo
950.561 369.44 947.017 365.861 947.017 361.459 cv
947.017 357.058 950.561 353.479 954.913 353.479 cv
959.267 353.479 962.808 357.058 962.808 361.459 cv
962.808 365.861 959.267 369.44 954.913 369.44 cv
cp
.74902 .286275 0 rgb
f
960.214 361.258 mo
960.214 364.408 957.661 366.961 954.51 366.961 cv
953.088 366.961 949.47 365.382 949.47 365.382 cv
949.47 365.382 948.133 362.14 948.133 360.59 cv
948.133 357.438 950.688 354.885 953.837 354.885 cv
956.046 354.885 958.878 356.159 958.878 356.159 cv
958.878 356.159 959.911 359.422 959.971 359.621 cv
960.127 360.139 960.214 360.688 960.214 361.258 cv
cp
.878431 .396078 0 rgb
f
959.169 358.238 mo
959.169 362.369 955.82 365.716 951.69 365.716 cv
947.558 365.716 944.211 362.369 944.211 358.238 cv
944.211 354.108 947.558 350.757 951.69 350.757 cv
955.82 350.757 959.169 354.108 959.169 358.238 cv
cp
1 .768627 0 rgb
f
951.69 363.302 mo
948.898 363.302 946.625 361.031 946.625 358.238 cv
946.625 355.445 948.898 353.173 951.69 353.173 cv
954.483 353.173 956.753 355.445 956.753 358.238 cv
956.753 361.031 954.483 363.302 951.69 363.302 cv
cp
1 .917647 .501961 rgb
f
947.575 358.934 mo
947.575 356.315 949.704 354.185 952.326 354.185 cv
954.131 354.185 955.709 355.199 956.511 356.691 cv
955.858 354.656 953.943 353.173 951.69 353.173 cv
948.898 353.173 946.625 355.445 946.625 358.238 cv
946.625 360.337 947.908 362.14 949.734 362.907 cv
948.435 362.06 947.575 360.596 947.575 358.934 cv
cp
1 1 1 rgb
f
954.171 358.238 mo
954.171 359.609 953.062 360.719 951.69 360.719 cv
950.32 360.719 949.207 359.609 949.207 358.238 cv
949.207 356.868 950.32 355.757 951.69 355.757 cv
953.062 355.757 954.171 356.868 954.171 358.238 cv
cp
f
1157.09 417.653 mo
1116.26 417.653 li
1089.02 390.418 li
1129.85 390.418 li
1129.85 229.755 li
1157.09 256.99 li
1157.09 350.104 li
1154.86 353.286 li
1154.86 374.078 li
1157.09 376.308 li
1157.09 417.653 li
.901961 .745098 .623529 rgb
f
1089.02 390.418 mo
1072.68 374.078 li
1089.02 229.755 li
1113.51 213.414 li
1129.85 229.755 li
1129.85 390.418 li
1089.02 390.418 li
0 .368627 .341176 rgb
f
1072.68 374.078 mo
1072.68 213.414 li
1113.51 213.414 li
1113.51 374.078 li
1072.68 374.078 li
.466667 .929412 .890196 rgb
f
1077.04 217.769 mo
1109.16 217.769 li
1109.16 369.722 li
1077.04 369.722 li
1077.04 217.769 li
.117647 .772549 .717647 rgb
f
1077.04 369.722 mo
1080.07 369.722 li
1080.07 220.796 li
1109.16 220.796 li
1109.16 217.769 li
1077.04 217.769 li
1077.04 369.722 li
0 .368627 .341176 rgb
f
1097.02 217.769 mo
1085.54 217.769 li
1087.27 216.918 1089.22 216.44 1091.28 216.44 cv
1093.34 216.44 1095.29 216.918 1097.02 217.769 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1091.28 229.489 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1091.28 229.489 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1091.28 242.538 mo
1086.51 242.538 1082.34 239.982 1080.07 236.166 cv
1080.07 222.813 li
1080.5 222.093 1080.99 221.418 1081.55 220.796 cv
1101.01 220.796 li
1103.07 223.104 1104.33 226.151 1104.33 229.49 cv
1104.33 236.696 1098.49 242.538 1091.28 242.538 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1091.28 229.489 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1091.28 229.489 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1080.07 236.166 mo
1078.9 234.213 1078.23 231.929 1078.23 229.49 cv
1078.23 227.05 1078.9 224.767 1080.07 222.813 cv
1080.07 236.166 li
1101.01 220.796 mo
1081.55 220.796 li
1082.66 219.547 1084.02 218.515 1085.54 217.769 cv
1097.02 217.769 li
1098.54 218.515 1099.89 219.547 1101.01 220.796 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1091.28 229.489 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1091.28 229.489 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1094.72 241.22 mo
1090.47 241.22 1087.01 237.721 1087.01 233.421 cv
1087.01 229.124 1090.47 225.625 1094.72 225.625 cv
1098.97 225.625 1102.43 229.124 1102.43 233.421 cv
1102.43 237.721 1098.97 241.22 1094.72 241.22 cv
cp
0 .368627 .341176 rgb
f
1099.9 233.226 mo
1099.9 236.303 1097.4 238.796 1094.33 238.796 cv
1092.94 238.796 1089.41 237.253 1089.41 237.253 cv
1089.41 237.253 1088.1 234.088 1088.1 232.57 cv
1088.1 229.494 1090.59 227.001 1093.67 227.001 cv
1095.83 227.001 1098.59 228.247 1098.59 228.247 cv
1098.59 228.247 1099.6 231.432 1099.66 231.625 cv
1099.81 232.132 1099.9 232.67 1099.9 233.226 cv
cp
.878431 .396078 0 rgb
f
1098.88 230.274 mo
1098.88 234.309 1095.61 237.579 1091.57 237.579 cv
1087.54 237.579 1084.27 234.309 1084.27 230.274 cv
1084.27 226.24 1087.54 222.971 1091.57 222.971 cv
1095.61 222.971 1098.88 226.24 1098.88 230.274 cv
cp
1 .768627 0 rgb
f
1091.57 235.222 mo
1088.84 235.222 1086.62 233.003 1086.62 230.274 cv
1086.62 227.547 1088.84 225.328 1091.57 225.328 cv
1094.3 225.328 1096.52 227.547 1096.52 230.274 cv
1096.52 233.003 1094.3 235.222 1091.57 235.222 cv
cp
1 .917647 .501961 rgb
f
1087.56 230.954 mo
1087.56 228.396 1089.63 226.315 1092.19 226.315 cv
1093.96 226.315 1095.5 227.309 1096.28 228.767 cv
1095.64 226.775 1093.77 225.328 1091.57 225.328 cv
1088.84 225.328 1086.62 227.547 1086.62 230.274 cv
1086.62 232.325 1087.88 234.088 1089.66 234.837 cv
1088.4 234.007 1087.56 232.578 1087.56 230.954 cv
cp
1 1 1 rgb
f
1094 230.274 mo
1094 231.614 1092.91 232.699 1091.57 232.699 cv
1090.23 232.699 1089.15 231.614 1089.15 230.274 cv
1089.15 228.936 1090.23 227.852 1091.57 227.852 cv
1092.91 227.852 1094 228.936 1094 230.274 cv
cp
f
1091.28 367.419 mo
1086.51 367.419 1082.34 364.862 1080.07 361.044 cv
1080.07 347.692 li
1082.34 343.876 1086.51 341.32 1091.28 341.32 cv
1098.49 341.32 1104.33 347.161 1104.33 354.368 cv
1104.33 361.574 1098.49 367.419 1091.28 367.419 cv
level3{
gsave
clp
[13.0493 0 0 13.0493 1091.28 354.369 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0493 0 0 13.0493 1091.28 354.369 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1080.07 361.044 mo
1078.9 359.091 1078.23 356.807 1078.23 354.368 cv
1078.23 351.929 1078.9 349.645 1080.07 347.692 cv
1080.07 361.044 li
level3{
gsave
clp
[13.0493 0 0 13.0493 1091.28 354.369 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0493 0 0 13.0493 1091.28 354.369 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1094.72 366.099 mo
1090.47 366.099 1087.01 362.601 1087.01 358.301 cv
1087.01 354.005 1090.47 350.504 1094.72 350.504 cv
1098.97 350.504 1102.43 354.005 1102.43 358.301 cv
1102.43 362.601 1098.97 366.099 1094.72 366.099 cv
cp
0 .368627 .341176 rgb
f
1099.9 358.104 mo
1099.9 361.183 1097.4 363.676 1094.33 363.676 cv
1092.94 363.676 1089.41 362.135 1089.41 362.135 cv
1089.41 362.135 1088.1 358.968 1088.1 357.451 cv
1088.1 354.373 1090.59 351.88 1093.67 351.88 cv
1095.83 351.88 1098.59 353.125 1098.59 353.125 cv
1098.59 353.125 1099.6 356.311 1099.66 356.504 cv
1099.81 357.012 1099.9 357.548 1099.9 358.104 cv
cp
.878431 .396078 0 rgb
f
1098.88 355.155 mo
1098.88 359.189 1095.61 362.459 1091.57 362.459 cv
1087.54 362.459 1084.27 359.189 1084.27 355.155 cv
1084.27 351.12 1087.54 347.85 1091.57 347.85 cv
1095.61 347.85 1098.88 351.12 1098.88 355.155 cv
cp
1 .768627 0 rgb
f
1091.57 360.101 mo
1088.84 360.101 1086.62 357.882 1086.62 355.155 cv
1086.62 352.428 1088.84 350.208 1091.57 350.208 cv
1094.3 350.208 1096.52 352.428 1096.52 355.155 cv
1096.52 357.882 1094.3 360.101 1091.57 360.101 cv
cp
1 .917647 .501961 rgb
f
1087.56 355.833 mo
1087.56 353.276 1089.63 351.196 1092.19 351.196 cv
1093.96 351.196 1095.5 352.188 1096.28 353.646 cv
1095.64 351.655 1093.77 350.208 1091.57 350.208 cv
1088.84 350.208 1086.62 352.428 1086.62 355.155 cv
1086.62 357.203 1087.88 358.968 1089.66 359.718 cv
1088.4 358.888 1087.56 357.457 1087.56 355.833 cv
cp
1 1 1 rgb
f
1094 355.155 mo
1094 356.493 1092.91 357.577 1091.57 357.577 cv
1090.23 357.577 1089.15 356.493 1089.15 355.155 cv
1089.15 353.816 1090.23 352.73 1091.57 352.73 cv
1092.91 352.73 1094 353.816 1094 355.155 cv
cp
f
1091.28 303.005 mo
1086.51 303.005 1082.34 300.447 1080.07 296.629 cv
1080.07 283.283 li
1082.34 279.466 1086.51 276.908 1091.28 276.908 cv
1098.49 276.908 1104.33 282.75 1104.33 289.956 cv
1104.33 297.162 1098.49 303.005 1091.28 303.005 cv
level3{
gsave
clp
[13.0481 0 0 13.0481 1091.28 289.957 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0481 0 0 13.0481 1091.28 289.957 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1080.07 296.629 mo
1078.9 294.676 1078.23 292.394 1078.23 289.956 cv
1078.23 287.518 1078.9 285.236 1080.07 283.283 cv
1080.07 296.629 li
level3{
gsave
clp
[13.0481 0 0 13.0481 1091.28 289.957 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0481 0 0 13.0481 1091.28 289.957 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1094.72 301.685 mo
1090.47 301.685 1087.01 298.188 1087.01 293.888 cv
1087.01 289.59 1090.47 286.093 1094.72 286.093 cv
1098.97 286.093 1102.43 289.59 1102.43 293.888 cv
1102.43 298.188 1098.97 301.685 1094.72 301.685 cv
cp
0 .368627 .341176 rgb
f
1099.9 293.693 mo
1099.9 296.77 1097.4 299.262 1094.33 299.262 cv
1092.94 299.262 1089.41 297.721 1089.41 297.721 cv
1089.41 297.721 1088.1 294.554 1088.1 293.036 cv
1088.1 289.961 1090.59 287.468 1093.67 287.468 cv
1095.83 287.468 1098.59 288.714 1098.59 288.714 cv
1098.59 288.714 1099.6 291.896 1099.66 292.09 cv
1099.81 292.601 1099.9 293.136 1099.9 293.693 cv
cp
.878431 .396078 0 rgb
f
1098.88 290.743 mo
1098.88 294.776 1095.61 298.048 1091.57 298.048 cv
1087.54 298.048 1084.27 294.776 1084.27 290.743 cv
1084.27 286.706 1087.54 283.436 1091.57 283.436 cv
1095.61 283.436 1098.88 286.706 1098.88 290.743 cv
cp
1 .768627 0 rgb
f
1091.57 295.688 mo
1088.84 295.688 1086.62 293.47 1086.62 290.743 cv
1086.62 288.015 1088.84 285.797 1091.57 285.797 cv
1094.3 285.797 1096.52 288.015 1096.52 290.743 cv
1096.52 293.47 1094.3 295.688 1091.57 295.688 cv
cp
1 .917647 .501961 rgb
f
1087.56 291.422 mo
1087.56 288.864 1089.63 286.783 1092.19 286.783 cv
1093.96 286.783 1095.5 287.776 1096.28 289.231 cv
1095.64 287.24 1093.77 285.797 1091.57 285.797 cv
1088.84 285.797 1086.62 288.015 1086.62 290.743 cv
1086.62 292.791 1087.88 294.554 1089.66 295.304 cv
1088.4 294.476 1087.56 293.044 1087.56 291.422 cv
cp
1 1 1 rgb
f
1094 290.743 mo
1094 292.08 1092.91 293.166 1091.57 293.166 cv
1090.23 293.166 1089.15 292.08 1089.15 290.743 cv
1089.15 289.402 1090.23 288.317 1091.57 288.317 cv
1092.91 288.317 1094 289.402 1094 290.743 cv
cp
f
1091.28 272.545 mo
1086.51 272.545 1082.34 269.987 1080.07 266.169 cv
1080.07 252.822 li
1082.34 249.004 1086.51 246.447 1091.28 246.447 cv
1098.49 246.447 1104.33 252.288 1104.33 259.495 cv
1104.33 266.702 1098.49 272.545 1091.28 272.545 cv
level3{
gsave
clp
[13.0483 0 0 13.0483 1091.28 259.496 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0483 0 0 13.0483 1091.28 259.496 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1080.07 266.169 mo
1078.9 264.216 1078.23 261.934 1078.23 259.495 cv
1078.23 257.056 1078.9 254.774 1080.07 252.822 cv
1080.07 266.169 li
level3{
gsave
clp
[13.0483 0 0 13.0483 1091.28 259.496 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0483 0 0 13.0483 1091.28 259.496 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1094.72 271.226 mo
1090.47 271.226 1087.01 267.727 1087.01 263.429 cv
1087.01 259.129 1090.47 255.631 1094.72 255.631 cv
1098.97 255.631 1102.43 259.129 1102.43 263.429 cv
1102.43 267.727 1098.97 271.226 1094.72 271.226 cv
cp
0 .368627 .341176 rgb
f
1099.9 263.232 mo
1099.9 266.309 1097.4 268.801 1094.33 268.801 cv
1092.94 268.801 1089.41 267.261 1089.41 267.261 cv
1089.41 267.261 1088.1 264.093 1088.1 262.577 cv
1088.1 259.501 1090.59 257.007 1093.67 257.007 cv
1095.83 257.007 1098.59 258.253 1098.59 258.253 cv
1098.59 258.253 1099.6 261.438 1099.66 261.631 cv
1099.81 262.14 1099.9 262.675 1099.9 263.232 cv
cp
.878431 .396078 0 rgb
f
1098.88 260.281 mo
1098.88 264.316 1095.61 267.587 1091.57 267.587 cv
1087.54 267.587 1084.27 264.316 1084.27 260.281 cv
1084.27 256.247 1087.54 252.977 1091.57 252.977 cv
1095.61 252.977 1098.88 256.247 1098.88 260.281 cv
cp
1 .768627 0 rgb
f
1091.57 265.228 mo
1088.84 265.228 1086.62 263.01 1086.62 260.281 cv
1086.62 257.554 1088.84 255.335 1091.57 255.335 cv
1094.3 255.335 1096.52 257.554 1096.52 260.281 cv
1096.52 263.01 1094.3 265.228 1091.57 265.228 cv
cp
1 .917647 .501961 rgb
f
1087.56 260.96 mo
1087.56 258.403 1089.63 256.322 1092.19 256.322 cv
1093.96 256.322 1095.5 257.314 1096.28 258.771 cv
1095.64 256.781 1093.77 255.335 1091.57 255.335 cv
1088.84 255.335 1086.62 257.554 1086.62 260.281 cv
1086.62 262.332 1087.88 264.093 1089.66 264.842 cv
1088.4 264.013 1087.56 262.584 1087.56 260.96 cv
cp
1 1 1 rgb
f
1094 260.281 mo
1094 261.621 1092.91 262.703 1091.57 262.703 cv
1090.23 262.703 1089.15 261.621 1089.15 260.281 cv
1089.15 258.942 1090.23 257.857 1091.57 257.857 cv
1092.91 257.857 1094 258.942 1094 260.281 cv
cp
f
1091.28 334.373 mo
1086.51 334.373 1082.34 331.815 1080.07 327.997 cv
1080.07 314.652 li
1082.34 310.834 1086.51 308.276 1091.28 308.276 cv
1098.49 308.276 1104.33 314.118 1104.33 321.324 cv
1104.33 328.53 1098.49 334.373 1091.28 334.373 cv
level3{
gsave
clp
[13.0483 0 0 13.0483 1091.28 321.324 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0483 0 0 13.0483 1091.28 321.324 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1080.07 327.997 mo
1078.9 326.044 1078.23 323.763 1078.23 321.324 cv
1078.23 318.886 1078.9 316.604 1080.07 314.652 cv
1080.07 327.997 li
level3{
gsave
clp
[13.0483 0 0 13.0483 1091.28 321.324 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0483 0 0 13.0483 1091.28 321.324 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1094.72 333.054 mo
1090.47 333.054 1087.01 329.555 1087.01 325.256 cv
1087.01 320.959 1090.47 317.46 1094.72 317.46 cv
1098.97 317.46 1102.43 320.959 1102.43 325.256 cv
1102.43 329.555 1098.97 333.054 1094.72 333.054 cv
cp
0 .368627 .341176 rgb
f
1099.9 325.06 mo
1099.9 328.137 1097.4 330.631 1094.33 330.631 cv
1092.94 330.631 1089.41 329.088 1089.41 329.088 cv
1089.41 329.088 1088.1 325.922 1088.1 324.404 cv
1088.1 321.329 1090.59 318.835 1093.67 318.835 cv
1095.83 318.835 1098.59 320.081 1098.59 320.081 cv
1098.59 320.081 1099.6 323.267 1099.66 323.459 cv
1099.81 323.967 1099.9 324.503 1099.9 325.06 cv
cp
.878431 .396078 0 rgb
f
1098.88 322.11 mo
1098.88 326.144 1095.61 329.415 1091.57 329.415 cv
1087.54 329.415 1084.27 326.144 1084.27 322.11 cv
1084.27 318.074 1087.54 314.805 1091.57 314.805 cv
1095.61 314.805 1098.88 318.074 1098.88 322.11 cv
cp
1 .768627 0 rgb
f
1091.57 327.055 mo
1088.84 327.055 1086.62 324.836 1086.62 322.11 cv
1086.62 319.382 1088.84 317.163 1091.57 317.163 cv
1094.3 317.163 1096.52 319.382 1096.52 322.11 cv
1096.52 324.836 1094.3 327.055 1091.57 327.055 cv
cp
1 .917647 .501961 rgb
f
1087.56 322.79 mo
1087.56 320.231 1089.63 318.15 1092.19 318.15 cv
1093.96 318.15 1095.5 319.142 1096.28 320.6 cv
1095.64 318.608 1093.77 317.163 1091.57 317.163 cv
1088.84 317.163 1086.62 319.382 1086.62 322.11 cv
1086.62 324.158 1087.88 325.922 1089.66 326.672 cv
1088.4 325.842 1087.56 324.413 1087.56 322.79 cv
cp
1 1 1 rgb
f
1094 322.11 mo
1094 323.447 1092.91 324.533 1091.57 324.533 cv
1090.23 324.533 1089.15 323.447 1089.15 322.11 cv
1089.15 320.771 1090.23 319.685 1091.57 319.685 cv
1092.91 319.685 1094 320.771 1094 322.11 cv
cp
f
1333.18 417.653 mo
1198.43 417.653 li
1171.2 390.418 li
1305.95 390.418 li
1305.95 354.463 li
1333.18 381.696 li
1333.18 417.653 li
1289.08 338.121 mo
1242.77 338.121 li
1303.95 250.768 li
1303.95 229.755 li
1331.18 256.99 li
1331.18 278.003 li
1289.08 338.121 li
1200.05 288.808 mo
1176.96 265.708 li
1216.25 265.708 li
1200.05 288.808 li
.901961 .745098 .623529 rgb
f
1171.2 390.418 mo
1154.86 374.078 li
1171.2 369.626 li
1244.04 265.708 li
1176.96 265.708 li
1160.62 249.368 li
1176.96 229.755 li
1287.61 213.414 li
1303.95 229.755 li
1303.95 250.768 li
1231.32 354.463 li
1289.6 338.121 li
1305.95 354.463 li
1305.95 390.418 li
1171.2 390.418 li
.670588 .117647 .105882 rgb
f
1154.86 374.078 mo
1154.86 353.286 li
1227.7 249.368 li
1160.62 249.368 li
1160.62 213.414 li
1287.61 213.414 li
1287.61 234.426 li
1214.98 338.121 li
1289.6 338.121 li
1289.6 374.078 li
1154.86 374.078 li
1 .678431 .309804 rgb
f
1159.21 354.658 mo
1236.08 245.014 li
1164.97 245.014 li
1164.97 217.771 li
1283.25 217.771 li
1283.25 233.053 li
1206.61 342.475 li
1285.25 342.475 li
1285.25 369.722 li
1159.21 369.722 li
1159.21 354.658 li
.929412 .321569 .239216 rgb
f
1168 220.796 mo
1283.25 220.796 li
1283.25 217.771 li
1164.97 217.771 li
1164.97 245.014 li
1168 245.014 li
1168 220.796 li
.729412 .133333 0 rgb
f
1209.64 345.505 mo
1285.25 345.505 li
1285.25 342.475 li
1206.61 342.475 li
1209.64 345.505 li
f
1162.24 357.688 mo
1239.1 248.042 li
1236.08 245.014 li
1159.21 354.658 li
1159.21 369.722 li
1162.24 369.722 li
1162.24 357.688 li
f
1263.75 242.17 mo
1256.54 242.17 1250.7 236.327 1250.7 229.118 cv
1250.7 225.955 1251.83 223.055 1253.7 220.796 cv
1273.8 220.796 li
1275.67 223.055 1276.8 225.955 1276.8 229.118 cv
1276.8 236.327 1270.96 242.17 1263.75 242.17 cv
level3{
gsave
clp
[13.0491 0 0 13.0491 1263.75 229.121 ]ct
/6 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4
g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-d
NW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^ls4WJ4g5Z-dNW7^l
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s4WJ4fSoj^MuM7armQ]&d>7eJLAfANrQBlmab'H2Jc*K;r54$^_1)9rI/CU(qmq+M\9[qZGl"djqQb8>
Y]T]DEqueVq5J?.Vf):+DYTuCpRl<rSne"iB_Im-p6]IcQ"BZQA+bsnooEPSN*l47?M'%ZoS-TBKNdtu
=n@,Fo6j[1HWBW^<:Y31noRb!E_l4D:@W0qn7t\dBM.c+8ag1\mp\cT?q'Ki7.+8GmTDjD=$Z.P5OD?3
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7
;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF
4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1m8?+7;EaDF4mc-1
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.236364 .981818 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0491 0 0 13.0491 1263.75 229.121 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W,urr2lprVc]nrVc]nrVcZlr;?Kjr;?Kiqtp9fqtp9fqtp9eqYL'bqYL'bqYBs_q>'j^q>'j^q=sa[
q"XXZq"XXZq"OOWp\4FVp\4CTp@e4Rp@e4Qp%A"Np%A"Np%A"Mo^qeJo^qeJoCMSFoCMSFoCMSFo()AB
o()ABo'u8?naZ/>naZ/>naQ&;nF5r:nF5r9n*f`6n*f`6mdBN2mdBN2md9E/mHs<.mHs<.mHj3+m-O**
~>
<~g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'2
f@SX*f%&:"e'c[ld*U+acHXSWbK@uLaN2EA`l5m7_ns:,^qd_!^:h1k]",A]\@8oT[C!<IZEga>Yck44
XfSV)Wi;qpVl$;eUna]ZTqJ$LSt2CAS!oe6R$a5+Q'@JrP*1rhOH5E]N/NUOM2@%DLPCM:KS+l-J:N,u
IXQTkH[:!`G^"=RF`_\GEcH&:DJj<-Chmg$BkV-kAn>L`@q&nU?sm>J?<pf?>$5!1='&F&<)Z[m;,L1f
~>
<~N/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^S
Mi3LNMMd7ILkgb@LPLV<KnY25KS+o/JUrB&J:N-!IsuiqI=6KiH[C'bH?jd]H$FRYGBS.PF`heJFE;JC
EH,u;E,]`5DJa6-D/=$(CMR["C2%?pB4kjhAnGUcARo:\@U`eT@:<PO?X@&F?!U`@>[(B8>$5!2=BJ[,
=&r=$<E)ps;c?Rk;,L.d:JOY[9he>U9M8#N8kMZH8OuBC7n,s:77BU46pj:-5s[e%5X7Ou5<_4n4?P_g
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
1270.2 217.771 mo
1257.31 217.771 li
1259.21 216.689 1261.41 216.071 1263.75 216.071 cv
1266.1 216.071 1268.3 216.689 1270.2 217.771 cv
level3{
gsave
clp
[13.0491 0 0 13.0491 1263.75 229.121 ]ct
/7 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6R
m[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tA
QiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?s6c6Rm[*tAQiHK?
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s6c6Rm?dk>Q2g08s6>gJl')/2OoOU,s5oCBjc9B%NW8$ts5Jt:iJRZnM#Z@gs5/S2h1ksbK`BeZs4W))
fn'1UJ,e,Ms42VueU7DHHiMQ@s3c/ld<P]<G5om2s3>`dc#`p/ErX=%s2o9[a_q."D?%Xms2AdR`+f7i
C&c(`s1r=I^h!J[AH0AQs1Mk@]O:cO?iR]Cs1)D7\6K!B>5u$6s0Pl-ZWI14<WB='s0,E$Y>YD';#dXn
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)s
X\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!
:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOms/f)sX\\u!:]IOm
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.236364 .981818 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0491 0 0 13.0491 1263.75 229.121 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
255 <~mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
m-O*)lg*j$lKRQtkih6nkND!ik2k^djQ,C^j5].Yio/kTi8EPNhr!;IhVR,Fh;$f@gY:K:g=k65g"=s0
f@SX*f%/C%e^W*ue'ldodaHOjdEp7ecd0q_cHa\Zc-4DUbKJ)Ob0%iJaiMQEa2c6?`l5m7`5BL1_o'C/
_SO%'^q[Y!^:q=p]tM(k]Xtef]"5J`\[f8\\@B#W\$i`R[C!<IZa6sCZE^[>Yct@8YHP+3Y-"h.XK8M)
~>
<~QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&QBmi&
QBmf#Pa%DsPEM)lP*1rhOH>QcO,f6\NK&pVN/W[QMi*CLM2@%DLPLY?L4t>8KnY25K7ef.JqAQ)JUi6"
IXZ`pI=6KjI!^3eH?sm_G^+FVGB\4RF`hhKFEDSFF)l;AEH,r9Df9N2DJa6-Ci!p'CMR["BkV0nBP;$j
AnGUcA7K+Z@q/tV@:<PO?sd8J?=$oB>[1N<>?b97>$5!2=BAR)<`W7$<E)ps;c6Lj;,L1e:esk_:/4PZ
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
1273.8 220.796 mo
1253.7 220.796 li
1254.71 219.583 1255.93 218.555 1257.31 217.771 cv
1270.2 217.771 li
1271.58 218.555 1272.8 219.583 1273.8 220.796 cv
level3{
gsave
clp
[13.0491 0 0 13.0491 1263.75 229.121 ]ct
/8 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[
ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,
C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOos3PK[ctWO,C&cOo
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s3PKZc=m1#B)Kb^qo<4C`+&PY@/.KDpUjf*\m+j:>4f1(o<MHgY>t+p;t-ebn#'"MUegBO:$eKFlC:K2
RRlY/7d$")k)i$mN^;`b5i[\bieBSRK0.t@3So3Dh0V'8GVn/t1>6e'fl/UrD(X=R/(J8^e79uV@4'E0
-.,sBcrhO<<ZfRb*m@G#b=rnt9,Pc@(W]#[a$LHY57tgr&ApL<_DVh=1CLuQ$,8%s^+0B"-j7..!kKQU
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c
+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u
!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S\fq-c+oo1u!4j?S
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [.236364 .981818 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0491 0 0 13.0491 1263.75 229.121 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8N#s
rVc]mr;?Hhqtg0cq>'j]q"XUXp\+=Sp%A"Mo^qbHoCDJCnaZ/=nF5o8n*]W3md9E/m-O*)lK[Wul0.?p
kND$jk2tdejlGL`j5]1Zio8qTi8<GLhVR,Fh;-lAgtUT<g=k96g"G$1f@JO(e^`4"eC;sre'c[mdF$@g
d*U+bcd'h\bfn;SbKJ&Nb/qcIaN2HCa2c6?`Pod6`5BL1_SX1+_83q&^q[Y!^:q=p]Y(kg]=PSb\[f8]
~>
<~cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q`cd0q_
c-=JUb/q`Ga2Z*:_ns7*^q[Us]Xtee\[],W[C!9HZE^X;Y-+n.X/`.tVl$;dUnaZXTV%jJSXc1<R[KP0
QBd\uP*(ieNfB!VMi*@ILPCM9K7\Z)IsuipI!^0bG^"=RFEDSEEH#i6D/=!&BkV-kARo:[@:3JM?<pf?
>$4s/<`N*t;Gg7d:/+DU91hcH7Rfg76pj:,5X.Fq4?GSa3&``Q1c$mA0eY.2/1W5#.4?Pj,pX]Z+X&!P
~>
<~BP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'m
B4kgfAS#C_@q&nV@:<PN?XI,G?!LW=>$>*4=]ea,=&r@%<)cdo;Gp@h:esk_:JOVY9M8#N8kMZG84Q-=
77BX56UO1+5sR\#5<_7o4?P\e4$#A^3&`cS2E!EL1c$mB0ek@80/"q1/M&G'.Olns.4?Pk-7'ra,U=TY
+sA'O+!)IE*??+=)]BS3(`*u)()@W!'GD,m&J5Qc&.]6\%1EXQ$O[:J#m^b@"pG/5"9\f.!W`9$!!!!!
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
1267.19 240.849 mo
1262.94 240.849 1259.48 237.353 1259.48 233.052 cv
1259.48 228.754 1262.94 225.257 1267.19 225.257 cv
1271.45 225.257 1274.91 228.754 1274.91 233.052 cv
1274.91 237.353 1271.45 240.849 1267.19 240.849 cv
cp
.729412 .133333 0 rgb
f
1272.37 232.855 mo
1272.37 235.933 1269.87 238.427 1266.8 238.427 cv
1265.41 238.427 1261.88 236.885 1261.88 236.885 cv
1261.88 236.885 1260.57 233.72 1260.57 232.202 cv
1260.57 229.124 1263.07 226.631 1266.14 226.631 cv
1268.3 226.631 1271.06 227.876 1271.06 227.876 cv
1271.06 227.876 1272.08 231.062 1272.14 231.255 cv
1272.29 231.763 1272.37 232.301 1272.37 232.855 cv
cp
.878431 .396078 0 rgb
f
1271.35 229.905 mo
1271.35 233.94 1268.08 237.21 1264.04 237.21 cv
1260.01 237.21 1256.74 233.94 1256.74 229.905 cv
1256.74 225.872 1260.01 222.6 1264.04 222.6 cv
1268.08 222.6 1271.35 225.872 1271.35 229.905 cv
cp
1 .768627 0 rgb
f
1264.04 234.852 mo
1261.32 234.852 1259.1 232.633 1259.1 229.905 cv
1259.1 227.178 1261.32 224.959 1264.04 224.959 cv
1266.77 224.959 1268.99 227.178 1268.99 229.905 cv
1268.99 232.633 1266.77 234.852 1264.04 234.852 cv
cp
1 .917647 .501961 rgb
f
1260.02 230.584 mo
1260.02 228.026 1262.11 225.946 1264.67 225.946 cv
1266.43 225.946 1267.97 226.938 1268.75 228.396 cv
1268.11 226.405 1266.25 224.959 1264.04 224.959 cv
1261.32 224.959 1259.1 227.178 1259.1 229.905 cv
1259.1 231.954 1260.35 233.72 1262.13 234.468 cv
1260.87 233.638 1260.02 232.208 1260.02 230.584 cv
cp
1 1 1 rgb
f
1266.47 229.905 mo
1266.47 231.244 1265.38 232.327 1264.04 232.327 cv
1262.71 232.327 1261.62 231.244 1261.62 229.905 cv
1261.62 228.566 1262.71 227.481 1264.04 227.481 cv
1265.38 227.481 1266.47 228.566 1266.47 229.905 cv
cp
f
1205.99 242.168 mo
1198.78 242.168 1192.94 236.327 1192.94 229.118 cv
1192.94 225.955 1194.06 223.055 1195.94 220.796 cv
1216.03 220.796 li
1217.91 223.055 1219.03 225.955 1219.03 229.118 cv
1219.03 236.327 1213.19 242.168 1205.99 242.168 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1205.98 229.119 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1205.98 229.119 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1212.43 217.771 mo
1199.54 217.771 li
1201.44 216.688 1203.64 216.07 1205.99 216.07 cv
1208.33 216.07 1210.53 216.688 1212.43 217.771 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1205.98 229.119 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1205.98 229.119 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1216.03 220.796 mo
1195.94 220.796 li
1196.94 219.583 1198.16 218.555 1199.54 217.771 cv
1212.43 217.771 li
1213.81 218.555 1215.03 219.583 1216.03 220.796 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1205.98 229.119 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1205.98 229.119 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1209.43 240.848 mo
1205.17 240.848 1201.71 237.353 1201.71 233.052 cv
1201.71 228.753 1205.17 225.257 1209.43 225.257 cv
1213.68 225.257 1217.14 228.753 1217.14 233.052 cv
1217.14 237.353 1213.68 240.848 1209.43 240.848 cv
cp
.729412 .133333 0 rgb
f
1214.6 232.854 mo
1214.6 235.933 1212.11 238.426 1209.03 238.426 cv
1207.64 238.426 1204.11 236.882 1204.11 236.882 cv
1204.11 236.882 1202.8 233.716 1202.8 232.202 cv
1202.8 229.124 1205.3 226.631 1208.38 226.631 cv
1210.53 226.631 1213.3 227.876 1213.3 227.876 cv
1213.3 227.876 1214.31 231.062 1214.37 231.255 cv
1214.52 231.762 1214.6 232.299 1214.6 232.854 cv
cp
.878431 .396078 0 rgb
f
1213.58 229.904 mo
1213.58 233.94 1210.31 237.209 1206.28 237.209 cv
1202.24 237.209 1198.97 233.94 1198.97 229.904 cv
1198.97 225.872 1202.24 222.599 1206.28 222.599 cv
1210.31 222.599 1213.58 225.872 1213.58 229.904 cv
cp
1 .768627 0 rgb
f
1206.28 234.851 mo
1203.55 234.851 1201.33 232.632 1201.33 229.904 cv
1201.33 227.176 1203.55 224.958 1206.28 224.958 cv
1209 224.958 1211.22 227.176 1211.22 229.904 cv
1211.22 232.632 1209 234.851 1206.28 234.851 cv
cp
1 .917647 .501961 rgb
f
1202.26 230.584 mo
1202.26 228.025 1204.34 225.945 1206.9 225.945 cv
1208.67 225.945 1210.2 226.938 1210.99 228.395 cv
1210.34 226.404 1208.48 224.958 1206.28 224.958 cv
1203.55 224.958 1201.33 227.176 1201.33 229.904 cv
1201.33 231.954 1202.59 233.716 1204.37 234.465 cv
1203.1 233.636 1202.26 232.208 1202.26 230.584 cv
cp
1 1 1 rgb
f
1208.7 229.904 mo
1208.7 231.244 1207.62 232.327 1206.28 232.327 cv
1204.94 232.327 1203.85 231.244 1203.85 229.904 cv
1203.85 228.566 1204.94 227.479 1206.28 227.479 cv
1207.62 227.479 1208.7 228.566 1208.7 229.904 cv
cp
f
1234.87 242.168 mo
1227.66 242.168 1221.82 236.327 1221.82 229.118 cv
1221.82 225.955 1222.95 223.055 1224.82 220.796 cv
1244.92 220.796 li
1246.79 223.055 1247.92 225.955 1247.92 229.118 cv
1247.92 236.327 1242.08 242.168 1234.87 242.168 cv
1238.31 225.257 mo
1234.06 225.257 1230.6 228.753 1230.6 233.052 cv
1230.6 237.352 1234.06 240.848 1238.31 240.848 cv
1242.56 240.848 1246.02 237.352 1246.02 233.052 cv
1246.02 228.753 1242.56 225.257 1238.31 225.257 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1234.87 229.119 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1234.87 229.119 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1241.31 217.771 mo
1228.42 217.771 li
1230.33 216.688 1232.53 216.07 1234.87 216.07 cv
1237.21 216.07 1239.41 216.688 1241.31 217.771 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1234.87 229.119 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1234.87 229.119 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1244.92 220.796 mo
1224.82 220.796 li
1225.83 219.583 1227.05 218.555 1228.42 217.771 cv
1241.31 217.771 li
1242.69 218.555 1243.91 219.583 1244.92 220.796 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1234.87 229.119 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1234.87 229.119 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1238.31 240.848 mo
1234.06 240.848 1230.6 237.352 1230.6 233.052 cv
1230.6 228.753 1234.06 225.257 1238.31 225.257 cv
1242.56 225.257 1246.02 228.753 1246.02 233.052 cv
1246.02 237.352 1242.56 240.848 1238.31 240.848 cv
.729412 .133333 0 rgb
f
1243.48 232.855 mo
1243.48 235.933 1240.99 238.426 1237.92 238.426 cv
1236.53 238.426 1232.99 236.885 1232.99 236.885 cv
1232.99 236.885 1231.69 233.716 1231.69 232.202 cv
1231.69 229.124 1234.18 226.631 1237.26 226.631 cv
1239.42 226.631 1242.18 227.876 1242.18 227.876 cv
1242.18 227.876 1243.19 231.062 1243.25 231.255 cv
1243.4 231.762 1243.48 232.3 1243.48 232.855 cv
cp
.878431 .396078 0 rgb
f
1242.46 229.905 mo
1242.46 233.94 1239.2 237.21 1235.16 237.21 cv
1231.13 237.21 1227.86 233.94 1227.86 229.905 cv
1227.86 225.872 1231.13 222.599 1235.16 222.599 cv
1239.2 222.599 1242.46 225.872 1242.46 229.905 cv
cp
1 .768627 0 rgb
f
1235.16 234.852 mo
1232.43 234.852 1230.22 232.632 1230.22 229.905 cv
1230.22 227.178 1232.43 224.959 1235.16 224.959 cv
1237.89 224.959 1240.11 227.178 1240.11 229.905 cv
1240.11 232.632 1237.89 234.852 1235.16 234.852 cv
cp
1 .917647 .501961 rgb
f
1231.14 230.584 mo
1231.14 228.026 1233.22 225.946 1235.78 225.946 cv
1237.55 225.946 1239.09 226.938 1239.87 228.395 cv
1239.23 226.404 1237.36 224.959 1235.16 224.959 cv
1232.43 224.959 1230.22 227.178 1230.22 229.905 cv
1230.22 231.954 1231.47 233.716 1233.25 234.467 cv
1231.98 233.636 1231.14 232.208 1231.14 230.584 cv
cp
1 1 1 rgb
f
1237.58 229.905 mo
1237.58 231.244 1236.5 232.327 1235.16 232.327 cv
1233.82 232.327 1232.74 231.244 1232.74 229.905 cv
1232.74 228.566 1233.82 227.481 1235.16 227.481 cv
1236.5 227.481 1237.58 228.566 1237.58 229.905 cv
cp
f
1177.1 242.168 mo
1173.56 242.168 1170.35 240.757 1168 238.465 cv
1168 220.796 li
1187.15 220.796 li
1189.03 223.055 1190.15 225.955 1190.15 229.118 cv
1190.15 236.327 1184.31 242.168 1177.1 242.168 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1177.1 229.119 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1177.1 229.119 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1164.97 233.929 mo
1164.38 232.441 1164.05 230.817 1164.05 229.118 cv
1164.05 227.42 1164.38 225.797 1164.97 224.309 cv
1164.97 233.929 li
level3{
gsave
clp
[13.0488 0 0 13.0488 1177.1 229.119 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1177.1 229.119 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1183.55 217.771 mo
1170.66 217.771 li
1172.56 216.688 1174.76 216.07 1177.1 216.07 cv
1179.45 216.07 1181.65 216.688 1183.55 217.771 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1177.1 229.119 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1177.1 229.119 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1168 238.465 mo
1166.69 237.194 1165.65 235.652 1164.97 233.929 cv
1164.97 224.309 li
1166.07 221.537 1168.09 219.231 1170.66 217.771 cv
1183.55 217.771 li
1184.93 218.555 1186.15 219.583 1187.15 220.796 cv
1168 220.796 li
1168 238.465 li
level3{
gsave
clp
[13.0488 0 0 13.0488 1177.1 229.119 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1177.1 229.119 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1180.54 240.848 mo
1176.29 240.848 1172.83 237.353 1172.83 233.052 cv
1172.83 228.753 1176.29 225.257 1180.54 225.257 cv
1184.79 225.257 1188.25 228.753 1188.25 233.052 cv
1188.25 237.353 1184.79 240.848 1180.54 240.848 cv
cp
.729412 .133333 0 rgb
f
1185.72 232.855 mo
1185.72 235.933 1183.22 238.426 1180.15 238.426 cv
1178.76 238.426 1175.23 236.885 1175.23 236.885 cv
1175.23 236.885 1173.92 233.716 1173.92 232.202 cv
1173.92 229.124 1176.42 226.631 1179.49 226.631 cv
1181.65 226.631 1184.42 227.876 1184.42 227.876 cv
1184.42 227.876 1185.43 231.062 1185.49 231.255 cv
1185.64 231.762 1185.72 232.3 1185.72 232.855 cv
cp
.878431 .396078 0 rgb
f
1184.7 229.905 mo
1184.7 233.94 1181.43 237.21 1177.39 237.21 cv
1173.36 237.21 1170.09 233.94 1170.09 229.905 cv
1170.09 225.872 1173.36 222.599 1177.39 222.599 cv
1181.43 222.599 1184.7 225.872 1184.7 229.905 cv
cp
1 .768627 0 rgb
f
1177.39 234.852 mo
1174.67 234.852 1172.45 232.632 1172.45 229.905 cv
1172.45 227.178 1174.67 224.959 1177.39 224.959 cv
1180.13 224.959 1182.34 227.178 1182.34 229.905 cv
1182.34 232.632 1180.13 234.852 1177.39 234.852 cv
cp
1 .917647 .501961 rgb
f
1173.38 230.584 mo
1173.38 228.026 1175.46 225.946 1178.01 225.946 cv
1179.78 225.946 1181.32 226.938 1182.11 228.395 cv
1181.46 226.404 1179.6 224.959 1177.39 224.959 cv
1174.67 224.959 1172.45 227.178 1172.45 229.905 cv
1172.45 231.954 1173.7 233.716 1175.49 234.467 cv
1174.22 233.636 1173.38 232.208 1173.38 230.584 cv
cp
1 1 1 rgb
f
1179.82 229.905 mo
1179.82 231.244 1178.74 232.327 1177.39 232.327 cv
1176.06 232.327 1174.97 231.244 1174.97 229.905 cv
1174.97 228.566 1176.06 227.481 1177.39 227.481 cv
1178.74 227.481 1179.82 228.566 1179.82 229.905 cv
cp
f
1266.34 366.757 mo
1259.13 366.757 1253.29 360.916 1253.29 353.709 cv
1253.29 350.601 1254.37 347.747 1256.19 345.505 cv
1276.48 345.505 li
1278.3 347.747 1279.39 350.601 1279.39 353.709 cv
1279.39 360.916 1273.54 366.757 1266.34 366.757 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1266.34 353.708 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1266.34 353.708 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1272.98 342.475 mo
1259.69 342.475 li
1261.64 341.322 1263.91 340.659 1266.34 340.659 cv
1268.76 340.659 1271.04 341.322 1272.98 342.475 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1266.34 353.708 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1266.34 353.708 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1276.48 345.505 mo
1256.19 345.505 li
1257.17 344.299 1258.35 343.27 1259.69 342.475 cv
1272.98 342.475 li
1274.32 343.27 1275.51 344.299 1276.48 345.505 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1266.34 353.708 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1266.34 353.708 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1269.78 365.439 mo
1265.52 365.439 1262.07 361.94 1262.07 357.642 cv
1262.07 353.343 1265.52 349.846 1269.78 349.846 cv
1274.03 349.846 1277.49 353.343 1277.49 357.642 cv
1277.49 361.94 1274.03 365.439 1269.78 365.439 cv
cp
.729412 .133333 0 rgb
f
1274.95 357.446 mo
1274.95 360.521 1272.46 363.017 1269.38 363.017 cv
1268 363.017 1264.46 361.474 1264.46 361.474 cv
1264.46 361.474 1263.16 358.308 1263.16 356.79 cv
1263.16 353.715 1265.65 351.222 1268.73 351.222 cv
1270.89 351.222 1273.65 352.467 1273.65 352.467 cv
1273.65 352.467 1274.66 355.65 1274.72 355.846 cv
1274.87 356.353 1274.95 356.89 1274.95 357.446 cv
cp
.878431 .396078 0 rgb
f
1273.93 354.495 mo
1273.93 358.529 1270.67 361.8 1266.63 361.8 cv
1262.6 361.8 1259.33 358.529 1259.33 354.495 cv
1259.33 350.46 1262.6 347.19 1266.63 347.19 cv
1270.67 347.19 1273.93 350.46 1273.93 354.495 cv
cp
1 .768627 0 rgb
f
1266.63 359.441 mo
1263.9 359.441 1261.68 357.222 1261.68 354.495 cv
1261.68 351.768 1263.9 349.55 1266.63 349.55 cv
1269.36 349.55 1271.58 351.768 1271.58 354.495 cv
1271.58 357.222 1269.36 359.441 1266.63 359.441 cv
cp
1 .917647 .501961 rgb
f
1262.61 355.175 mo
1262.61 352.617 1264.69 350.536 1267.25 350.536 cv
1269.02 350.536 1270.56 351.528 1271.34 352.985 cv
1270.7 350.995 1268.83 349.55 1266.63 349.55 cv
1263.9 349.55 1261.68 351.768 1261.68 354.495 cv
1261.68 356.546 1262.94 358.308 1264.72 359.058 cv
1263.45 358.228 1262.61 356.8 1262.61 355.175 cv
cp
1 1 1 rgb
f
1269.05 354.495 mo
1269.05 355.833 1267.97 356.919 1266.63 356.919 cv
1265.29 356.919 1264.21 355.833 1264.21 354.495 cv
1264.21 353.156 1265.29 352.07 1266.63 352.07 cv
1267.97 352.07 1269.05 353.156 1269.05 354.495 cv
cp
f
1212.79 342.475 mo
1206.61 342.475 li
1207.81 340.764 li
1209.61 340.992 1211.3 341.589 1212.79 342.475 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1206.15 353.708 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1206.15 353.708 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1206.15 366.757 mo
1198.94 366.757 1193.1 360.916 1193.1 353.709 cv
1193.1 346.504 1198.94 340.659 1206.15 340.659 cv
1206.71 340.659 1207.27 340.695 1207.81 340.764 cv
1206.61 342.475 li
1212.79 342.475 li
1212.79 342.475 li
1206.61 342.475 li
1209.64 345.505 li
1216.3 345.505 li
1218.11 347.747 1219.2 350.601 1219.2 353.709 cv
1219.2 360.916 1213.36 366.757 1206.15 366.757 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1206.15 353.708 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1206.15 353.708 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1216.3 345.505 mo
1209.64 345.505 li
1206.61 342.475 li
1212.79 342.475 li
1214.13 343.27 1215.32 344.299 1216.3 345.505 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1206.15 353.708 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1206.15 353.708 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1209.59 365.438 mo
1205.34 365.438 1201.88 361.94 1201.88 357.642 cv
1201.88 353.343 1205.34 349.846 1209.59 349.846 cv
1213.84 349.846 1217.3 353.343 1217.3 357.642 cv
1217.3 361.94 1213.84 365.438 1209.59 365.438 cv
cp
.729412 .133333 0 rgb
f
1214.76 357.446 mo
1214.76 360.521 1212.27 363.014 1209.2 363.014 cv
1207.81 363.014 1204.28 361.474 1204.28 361.474 cv
1204.28 361.474 1202.97 358.307 1202.97 356.79 cv
1202.97 353.712 1205.46 351.219 1208.54 351.219 cv
1210.7 351.219 1213.46 352.466 1213.46 352.466 cv
1213.46 352.466 1214.47 355.65 1214.53 355.843 cv
1214.68 356.351 1214.76 356.888 1214.76 357.446 cv
cp
.878431 .396078 0 rgb
f
1213.75 354.495 mo
1213.75 358.527 1210.48 361.8 1206.44 361.8 cv
1202.41 361.8 1199.14 358.527 1199.14 354.495 cv
1199.14 350.459 1202.41 347.188 1206.44 347.188 cv
1210.48 347.188 1213.75 350.459 1213.75 354.495 cv
cp
1 .768627 0 rgb
f
1206.44 359.439 mo
1203.71 359.439 1201.5 357.221 1201.5 354.495 cv
1201.5 351.768 1203.71 349.547 1206.44 349.547 cv
1209.17 349.547 1211.39 351.768 1211.39 354.495 cv
1211.39 357.221 1209.17 359.439 1206.44 359.439 cv
cp
1 .917647 .501961 rgb
f
1202.42 355.175 mo
1202.42 352.614 1204.5 350.534 1207.06 350.534 cv
1208.83 350.534 1210.37 351.528 1211.15 352.984 cv
1210.51 350.993 1208.64 349.547 1206.44 349.547 cv
1203.71 349.547 1201.5 351.768 1201.5 354.495 cv
1201.5 356.543 1202.75 358.307 1204.53 359.057 cv
1203.26 358.227 1202.42 356.796 1202.42 355.175 cv
cp
1 1 1 rgb
f
1208.87 354.495 mo
1208.87 355.833 1207.78 356.918 1206.44 356.918 cv
1205.1 356.918 1204.02 355.833 1204.02 354.495 cv
1204.02 353.156 1205.1 352.069 1206.44 352.069 cv
1207.78 352.069 1208.87 353.156 1208.87 354.495 cv
cp
f
1236.24 366.757 mo
1229.04 366.757 1223.2 360.916 1223.2 353.709 cv
1223.2 350.601 1224.28 347.747 1226.1 345.505 cv
1246.39 345.505 li
1248.21 347.747 1249.29 350.601 1249.29 353.709 cv
1249.29 360.916 1243.45 366.757 1236.24 366.757 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1236.25 353.708 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1236.25 353.708 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1242.89 342.475 mo
1229.6 342.475 li
1231.55 341.322 1233.82 340.659 1236.24 340.659 cv
1238.67 340.659 1240.94 341.322 1242.89 342.475 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1236.25 353.708 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1236.25 353.708 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1246.39 345.505 mo
1226.1 345.505 li
1227.07 344.299 1228.26 343.27 1229.6 342.475 cv
1242.89 342.475 li
1244.23 343.27 1245.42 344.299 1246.39 345.505 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1236.25 353.708 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1236.25 353.708 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1239.68 365.438 mo
1235.43 365.438 1231.97 361.94 1231.97 357.642 cv
1231.97 353.343 1235.43 349.846 1239.68 349.846 cv
1243.94 349.846 1247.4 353.343 1247.4 357.642 cv
1247.4 361.94 1243.94 365.438 1239.68 365.438 cv
cp
.729412 .133333 0 rgb
f
1244.86 357.446 mo
1244.86 360.521 1242.37 363.014 1239.29 363.014 cv
1237.9 363.014 1234.37 361.474 1234.37 361.474 cv
1234.37 361.474 1233.06 358.307 1233.06 356.79 cv
1233.06 353.715 1235.56 351.222 1238.63 351.222 cv
1240.79 351.222 1243.56 352.467 1243.56 352.467 cv
1243.56 352.467 1244.57 355.65 1244.62 355.846 cv
1244.78 356.351 1244.86 356.888 1244.86 357.446 cv
cp
.878431 .396078 0 rgb
f
1243.84 354.495 mo
1243.84 358.529 1240.57 361.8 1236.54 361.8 cv
1232.5 361.8 1229.23 358.529 1229.23 354.495 cv
1229.23 350.46 1232.5 347.188 1236.54 347.188 cv
1240.57 347.188 1243.84 350.46 1243.84 354.495 cv
cp
1 .768627 0 rgb
f
1236.54 359.439 mo
1233.81 359.439 1231.59 357.221 1231.59 354.495 cv
1231.59 351.768 1233.81 349.547 1236.54 349.547 cv
1239.26 349.547 1241.48 351.768 1241.48 354.495 cv
1241.48 357.221 1239.26 359.439 1236.54 359.439 cv
cp
1 .917647 .501961 rgb
f
1232.52 355.175 mo
1232.52 352.614 1234.6 350.534 1237.16 350.534 cv
1238.92 350.534 1240.46 351.528 1241.25 352.984 cv
1240.6 350.993 1238.74 349.547 1236.54 349.547 cv
1233.81 349.547 1231.59 351.768 1231.59 354.495 cv
1231.59 356.546 1232.84 358.307 1234.63 359.057 cv
1233.36 358.227 1232.52 356.8 1232.52 355.175 cv
cp
1 1 1 rgb
f
1238.96 354.495 mo
1238.96 355.833 1237.87 356.919 1236.54 356.919 cv
1235.2 356.919 1234.11 355.833 1234.11 354.495 cv
1234.11 353.156 1235.2 352.069 1236.54 352.069 cv
1237.87 352.069 1238.96 353.156 1238.96 354.495 cv
cp
f
1176.06 366.757 mo
1169.72 366.757 1164.43 362.236 1163.25 356.241 cv
1174.07 340.809 li
1174.72 340.711 1175.38 340.659 1176.06 340.659 cv
1183.26 340.659 1189.11 346.504 1189.11 353.709 cv
1189.11 360.916 1183.26 366.757 1176.06 366.757 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1176.06 353.708 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1176.06 353.708 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1163.25 356.241 mo
1163.09 355.422 1163.01 354.575 1163.01 353.709 cv
1163.01 347.178 1167.81 341.766 1174.07 340.809 cv
1163.25 356.241 li
level3{
gsave
clp
[13.0488 0 0 13.0488 1176.06 353.708 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1176.06 353.708 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1179.5 365.438 mo
1175.24 365.438 1171.78 361.94 1171.78 357.642 cv
1171.78 353.343 1175.24 349.846 1179.5 349.846 cv
1183.75 349.846 1187.21 353.343 1187.21 357.642 cv
1187.21 361.94 1183.75 365.438 1179.5 365.438 cv
cp
.729412 .133333 0 rgb
f
1184.67 357.446 mo
1184.67 360.521 1182.18 363.014 1179.1 363.014 cv
1177.71 363.014 1174.18 361.474 1174.18 361.474 cv
1174.18 361.474 1172.88 358.307 1172.88 356.79 cv
1172.88 353.715 1175.37 351.222 1178.45 351.222 cv
1180.6 351.222 1183.37 352.467 1183.37 352.467 cv
1183.37 352.467 1184.38 355.65 1184.44 355.846 cv
1184.59 356.351 1184.67 356.888 1184.67 357.446 cv
cp
.878431 .396078 0 rgb
f
1183.65 354.495 mo
1183.65 358.529 1180.38 361.8 1176.35 361.8 cv
1172.31 361.8 1169.04 358.529 1169.04 354.495 cv
1169.04 350.46 1172.31 347.188 1176.35 347.188 cv
1180.38 347.188 1183.65 350.46 1183.65 354.495 cv
cp
1 .768627 0 rgb
f
1176.35 359.439 mo
1173.62 359.439 1171.4 357.221 1171.4 354.495 cv
1171.4 351.768 1173.62 349.547 1176.35 349.547 cv
1179.08 349.547 1181.29 351.768 1181.29 354.495 cv
1181.29 357.221 1179.08 359.439 1176.35 359.439 cv
cp
1 .917647 .501961 rgb
f
1172.33 355.175 mo
1172.33 352.614 1174.41 350.534 1176.97 350.534 cv
1178.74 350.534 1180.27 351.528 1181.06 352.984 cv
1180.42 350.993 1178.55 349.547 1176.35 349.547 cv
1173.62 349.547 1171.4 351.768 1171.4 354.495 cv
1171.4 356.546 1172.66 358.307 1174.44 359.057 cv
1173.17 358.227 1172.33 356.8 1172.33 355.175 cv
cp
1 1 1 rgb
f
1178.77 354.495 mo
1178.77 355.833 1177.69 356.919 1176.35 356.919 cv
1175.01 356.919 1173.92 355.833 1173.92 354.495 cv
1173.92 353.156 1175.01 352.069 1176.35 352.069 cv
1177.69 352.069 1178.77 353.156 1178.77 354.495 cv
cp
f
1192.79 341.2 mo
1186.9 341.2 1181.92 337.295 1180.3 331.93 cv
1192.08 315.122 li
1192.31 315.109 1192.55 315.103 1192.79 315.103 cv
1199.99 315.103 1205.84 320.944 1205.84 328.15 cv
1205.84 335.359 1199.99 341.2 1192.79 341.2 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1192.79 328.151 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1192.79 328.151 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1180.19 324.73 mo
1181 321.76 1182.82 319.211 1185.27 317.483 cv
1180.19 324.73 li
level3{
gsave
clp
[13.0488 0 0 13.0488 1192.79 328.151 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1192.79 328.151 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1180.3 331.93 mo
1179.93 330.734 1179.74 329.465 1179.74 328.15 cv
1179.74 326.967 1179.9 325.82 1180.19 324.73 cv
1185.27 317.483 li
1187.22 316.111 1189.55 315.257 1192.08 315.122 cv
1180.3 331.93 li
level3{
gsave
clp
[13.0488 0 0 13.0488 1192.79 328.151 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1192.79 328.151 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1196.23 339.881 mo
1191.97 339.881 1188.52 336.383 1188.52 332.083 cv
1188.52 327.785 1191.97 324.288 1196.23 324.288 cv
1200.48 324.288 1203.94 327.785 1203.94 332.083 cv
1203.94 336.383 1200.48 339.881 1196.23 339.881 cv
cp
.729412 .133333 0 rgb
f
1201.41 331.888 mo
1201.41 334.963 1198.91 337.459 1195.83 337.459 cv
1194.45 337.459 1190.91 335.915 1190.91 335.915 cv
1190.91 335.915 1189.61 332.749 1189.61 331.231 cv
1189.61 328.156 1192.1 325.661 1195.18 325.661 cv
1197.33 325.661 1200.1 326.908 1200.1 326.908 cv
1200.1 326.908 1201.11 330.093 1201.17 330.284 cv
1201.32 330.795 1201.41 331.332 1201.41 331.888 cv
cp
.878431 .396078 0 rgb
f
1200.38 328.937 mo
1200.38 332.972 1197.12 336.242 1193.08 336.242 cv
1189.05 336.242 1185.78 332.972 1185.78 328.937 cv
1185.78 324.901 1189.05 321.632 1193.08 321.632 cv
1197.12 321.632 1200.38 324.901 1200.38 328.937 cv
cp
1 .768627 0 rgb
f
1193.08 333.883 mo
1190.35 333.883 1188.14 331.665 1188.14 328.937 cv
1188.14 326.209 1190.35 323.99 1193.08 323.99 cv
1195.81 323.99 1198.03 326.209 1198.03 328.937 cv
1198.03 331.665 1195.81 333.883 1193.08 333.883 cv
cp
1 .917647 .501961 rgb
f
1189.06 329.615 mo
1189.06 327.059 1191.14 324.979 1193.7 324.979 cv
1195.47 324.979 1197.01 325.97 1197.79 327.429 cv
1197.15 325.437 1195.28 323.99 1193.08 323.99 cv
1190.35 323.99 1188.14 326.209 1188.14 328.937 cv
1188.14 330.985 1189.39 332.749 1191.17 333.499 cv
1189.9 332.669 1189.06 331.239 1189.06 329.615 cv
cp
1 1 1 rgb
f
1195.5 328.937 mo
1195.5 330.276 1194.42 331.36 1193.08 331.36 cv
1191.74 331.36 1190.66 330.276 1190.66 328.937 cv
1190.66 327.598 1191.74 326.514 1193.08 326.514 cv
1194.42 326.514 1195.5 327.598 1195.5 328.937 cv
cp
f
1212.15 314.272 mo
1206.08 314.272 1200.98 310.123 1199.52 304.507 cv
1210.93 288.23 li
1211.33 288.193 1211.74 288.174 1212.15 288.174 cv
1219.36 288.174 1225.2 294.016 1225.2 301.224 cv
1225.2 308.429 1219.36 314.272 1212.15 314.272 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1212.15 301.223 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1212.15 301.223 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1199.98 296.496 mo
1200.75 294.522 1201.99 292.781 1203.55 291.408 cv
1199.98 296.496 li
level3{
gsave
clp
[13.0488 0 0 13.0488 1212.15 301.223 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1212.15 301.223 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1199.52 304.507 mo
1199.25 303.458 1199.1 302.358 1199.1 301.224 cv
1199.1 299.556 1199.41 297.962 1199.98 296.496 cv
1203.55 291.408 li
1205.56 289.646 1208.12 288.492 1210.93 288.23 cv
1199.52 304.507 li
level3{
gsave
clp
[13.0488 0 0 13.0488 1212.15 301.223 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1212.15 301.223 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1215.59 312.951 mo
1211.34 312.951 1207.88 309.455 1207.88 305.155 cv
1207.88 300.857 1211.34 297.359 1215.59 297.359 cv
1219.84 297.359 1223.3 300.857 1223.3 305.155 cv
1223.3 309.455 1219.84 312.951 1215.59 312.951 cv
cp
.729412 .133333 0 rgb
f
1220.77 304.96 mo
1220.77 308.035 1218.27 310.528 1215.2 310.528 cv
1213.81 310.528 1210.28 308.988 1210.28 308.988 cv
1210.28 308.988 1208.97 305.821 1208.97 304.305 cv
1208.97 301.229 1211.47 298.736 1214.54 298.736 cv
1216.7 298.736 1219.46 299.981 1219.46 299.981 cv
1219.46 299.981 1220.48 303.165 1220.53 303.36 cv
1220.69 303.864 1220.77 304.402 1220.77 304.96 cv
cp
.878431 .396078 0 rgb
f
1219.75 302.007 mo
1219.75 306.043 1216.48 309.314 1212.44 309.314 cv
1208.41 309.314 1205.14 306.043 1205.14 302.007 cv
1205.14 297.975 1208.41 294.702 1212.44 294.702 cv
1216.48 294.702 1219.75 297.975 1219.75 302.007 cv
cp
1 .768627 0 rgb
f
1212.44 306.954 mo
1209.71 306.954 1207.5 304.734 1207.5 302.007 cv
1207.5 299.282 1209.71 297.062 1212.44 297.062 cv
1215.17 297.062 1217.39 299.282 1217.39 302.007 cv
1217.39 304.734 1215.17 306.954 1212.44 306.954 cv
cp
1 .917647 .501961 rgb
f
1208.42 302.688 mo
1208.42 300.13 1210.51 298.049 1213.06 298.049 cv
1214.83 298.049 1216.37 299.041 1217.15 300.498 cv
1216.51 298.508 1214.64 297.062 1212.44 297.062 cv
1209.71 297.062 1207.5 299.282 1207.5 302.007 cv
1207.5 304.06 1208.75 305.821 1210.53 306.569 cv
1209.26 305.74 1208.42 304.313 1208.42 302.688 cv
cp
1 1 1 rgb
f
1214.87 302.007 mo
1214.87 303.348 1213.78 304.432 1212.44 304.432 cv
1211.1 304.432 1210.02 303.348 1210.02 302.007 cv
1210.02 300.671 1211.1 299.583 1212.44 299.583 cv
1213.78 299.583 1214.87 300.671 1214.87 302.007 cv
cp
f
1230.22 290.221 mo
1223.67 290.221 1218.25 285.406 1217.31 279.126 cv
1227.65 264.375 li
1228.48 264.21 1229.34 264.123 1230.22 264.123 cv
1237.42 264.123 1243.26 269.966 1243.26 277.173 cv
1243.26 284.38 1237.42 290.221 1230.22 290.221 cv
level3{
gsave
clp
[13.0488 0 0 13.0488 1230.21 277.172 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1230.21 277.172 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1217.31 279.126 mo
1217.22 278.489 1217.17 277.837 1217.17 277.173 cv
1217.17 270.844 1221.67 265.567 1227.65 264.375 cv
1217.31 279.126 li
level3{
gsave
clp
[13.0488 0 0 13.0488 1230.21 277.172 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0488 0 0 13.0488 1230.21 277.172 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1233.66 288.901 mo
1229.4 288.901 1225.94 285.404 1225.94 281.105 cv
1225.94 276.806 1229.4 273.309 1233.66 273.309 cv
1237.91 273.309 1241.37 276.806 1241.37 281.105 cv
1241.37 285.404 1237.91 288.901 1233.66 288.901 cv
cp
.729412 .133333 0 rgb
f
1238.83 280.909 mo
1238.83 283.984 1236.34 286.48 1233.26 286.48 cv
1231.87 286.48 1228.34 284.937 1228.34 284.937 cv
1228.34 284.937 1227.04 281.771 1227.04 280.254 cv
1227.04 277.179 1229.53 274.683 1232.61 274.683 cv
1234.76 274.683 1237.53 275.93 1237.53 275.93 cv
1237.53 275.93 1238.54 279.115 1238.6 279.307 cv
1238.75 279.816 1238.83 280.353 1238.83 280.909 cv
cp
.878431 .396078 0 rgb
f
1237.81 277.958 mo
1237.81 281.992 1234.54 285.264 1230.51 285.264 cv
1226.47 285.264 1223.2 281.992 1223.2 277.958 cv
1223.2 273.924 1226.47 270.654 1230.51 270.654 cv
1234.54 270.654 1237.81 273.924 1237.81 277.958 cv
cp
1 .768627 0 rgb
f
1230.51 282.905 mo
1227.78 282.905 1225.56 280.687 1225.56 277.958 cv
1225.56 275.231 1227.78 273.012 1230.51 273.012 cv
1233.24 273.012 1235.45 275.231 1235.45 277.958 cv
1235.45 280.687 1233.24 282.905 1230.51 282.905 cv
cp
1 .917647 .501961 rgb
f
1226.49 278.638 mo
1226.49 276.081 1228.57 274.001 1231.13 274.001 cv
1232.9 274.001 1234.43 274.991 1235.22 276.448 cv
1234.58 274.459 1232.71 273.012 1230.51 273.012 cv
1227.78 273.012 1225.56 275.231 1225.56 277.958 cv
1225.56 280.009 1226.82 281.771 1228.59 282.52 cv
1227.33 281.691 1226.49 280.261 1226.49 278.638 cv
cp
1 1 1 rgb
f
1232.93 277.958 mo
1232.93 279.298 1231.84 280.383 1230.51 280.383 cv
1229.17 280.383 1228.08 279.298 1228.08 277.958 cv
1228.08 276.62 1229.17 275.535 1230.51 275.535 cv
1231.84 275.535 1232.93 276.62 1232.93 277.958 cv
cp
f
1246.97 265.659 mo
1240.61 265.659 1235.32 261.111 1234.16 255.091 cv
1239.1 248.042 li
1236.24 245.183 li
1238.6 241.787 1242.53 239.563 1246.97 239.563 cv
1254.18 239.563 1260.02 245.404 1260.02 252.61 cv
1260.02 259.818 1254.18 265.659 1246.97 265.659 cv
level3{
gsave
clp
[13.0486 0 0 13.0486 1246.97 252.611 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0486 0 0 13.0486 1246.97 252.611 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
1234.16 255.091 mo
1234.01 254.288 1233.92 253.458 1233.92 252.61 cv
1233.92 249.85 1234.78 247.291 1236.24 245.183 cv
1239.1 248.042 li
1234.16 255.091 li
level3{
gsave
clp
[13.0486 0 0 13.0486 1246.97 252.611 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.0486 0 0 13.0486 1246.97 252.611 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1250.41 264.34 mo
1246.16 264.34 1242.7 260.843 1242.7 256.544 cv
1242.7 252.245 1246.16 248.748 1250.41 248.748 cv
1254.67 248.748 1258.13 252.245 1258.13 256.544 cv
1258.13 260.843 1254.67 264.34 1250.41 264.34 cv
cp
.729412 .133333 0 rgb
f
1255.59 256.347 mo
1255.59 259.425 1253.1 261.917 1250.02 261.917 cv
1248.63 261.917 1245.1 260.377 1245.1 260.377 cv
1245.1 260.377 1243.8 257.208 1243.8 255.693 cv
1243.8 252.616 1246.29 250.124 1249.37 250.124 cv
1251.52 250.124 1254.29 251.37 1254.29 251.37 cv
1254.29 251.37 1255.3 254.554 1255.36 254.747 cv
1255.51 255.253 1255.59 255.792 1255.59 256.347 cv
cp
.878431 .396078 0 rgb
f
1254.57 253.396 mo
1254.57 257.432 1251.3 260.702 1247.27 260.702 cv
1243.23 260.702 1239.96 257.432 1239.96 253.396 cv
1239.96 249.363 1243.23 246.091 1247.27 246.091 cv
1251.3 246.091 1254.57 249.363 1254.57 253.396 cv
cp
1 .768627 0 rgb
f
1247.27 258.342 mo
1244.54 258.342 1242.32 256.124 1242.32 253.396 cv
1242.32 250.67 1244.54 248.45 1247.27 248.45 cv
1249.99 248.45 1252.21 250.67 1252.21 253.396 cv
1252.21 256.124 1249.99 258.342 1247.27 258.342 cv
cp
1 .917647 .501961 rgb
f
1243.25 254.076 mo
1243.25 251.518 1245.33 249.438 1247.89 249.438 cv
1249.65 249.438 1251.19 250.43 1251.98 251.887 cv
1251.34 249.896 1249.47 248.45 1247.27 248.45 cv
1244.54 248.45 1242.32 250.67 1242.32 253.396 cv
1242.32 255.447 1243.57 257.208 1245.36 257.959 cv
1244.09 257.128 1243.25 255.701 1243.25 254.076 cv
cp
1 1 1 rgb
f
1249.69 253.396 mo
1249.69 254.736 1248.6 255.819 1247.27 255.819 cv
1245.93 255.819 1244.84 254.736 1244.84 253.396 cv
1244.84 252.059 1245.93 250.972 1247.27 250.972 cv
1248.6 250.972 1249.69 252.059 1249.69 253.396 cv
cp
f
184.689 417.652 mo
145.428 417.652 li
119.244 390.417 li
158.497 390.417 li
158.497 338.138 li
190.945 338.138 li
209.041 338.138 222.964 333.282 232.325 323.709 cv
241.706 314.113 246.461 300.666 246.461 283.722 cv
246.461 266.808 241.897 253.445 232.894 243.999 cv
232.894 243.999 li
232.894 243.999 li
232.894 243.999 256.299 268.321 259.08 271.234 cv
259.097 271.252 259.115 271.27 259.132 271.288 cv
259.132 314.289 li
259.132 325.355 260.894 335.112 264.395 343.491 cv
262.694 346.188 260.734 348.674 258.514 350.944 cv
249.149 360.52 235.227 365.374 217.133 365.374 cv
184.689 365.374 li
184.689 417.652 li
174.594 285.845 mo
158.497 285.845 li
158.497 265.705 li
190.308 265.705 li
190.552 265.705 190.793 265.708 191.032 265.714 cv
191.057 266.257 191.069 266.813 191.069 267.384 cv
191.069 273.451 189.65 278.123 186.856 281.259 cv
184.109 284.346 180.099 285.845 174.594 285.845 cv
.901961 .745098 .623529 rgb
f
190.308 302.188 mo
195.812 302.188 199.824 300.685 202.57 297.598 cv
205.361 294.462 206.778 289.791 206.778 283.722 cv
206.778 277.737 205.41 273.314 202.596 270.206 cv
199.845 267.18 195.824 265.705 190.308 265.705 cv
158.497 265.705 li
158.497 302.188 li
190.308 302.188 li
119.244 390.417 mo
103.529 374.073 li
119.244 229.752 li
193.074 229.752 li
207.199 229.752 217.183 227.656 217.183 227.656 cv
217.183 227.656 231.195 242.216 232.894 243.999 cv
241.897 253.445 246.461 266.808 246.461 283.722 cv
246.461 300.666 241.706 314.113 232.325 323.709 cv
222.964 333.282 209.041 338.138 190.945 338.138 cv
158.497 338.138 li
158.497 390.417 li
119.244 390.417 li
.670588 .117647 .105882 rgb
f
174.594 285.845 mo
180.099 285.845 184.109 284.346 186.856 281.259 cv
189.65 278.123 191.069 273.451 191.069 267.384 cv
191.069 261.399 189.697 256.978 186.883 253.871 cv
184.131 250.839 180.111 249.367 174.594 249.367 cv
142.788 249.367 li
142.788 285.845 li
174.594 285.845 li
103.529 374.073 mo
103.529 213.414 li
177.364 213.414 li
194.771 213.414 208.168 218.205 217.183 227.656 cv
226.186 237.104 230.75 250.469 230.75 267.384 cv
230.75 284.323 225.994 297.776 216.614 307.372 cv
207.252 316.942 193.328 321.797 175.233 321.797 cv
142.788 321.797 li
142.788 374.073 li
103.529 374.073 li
1 .678431 .309804 rgb
f
174.594 290.196 mo
181.268 290.196 186.379 288.205 189.93 284.219 cv
193.476 280.234 195.254 274.621 195.254 267.384 cv
195.254 260.298 193.476 254.794 189.93 250.882 cv
186.379 246.971 181.268 245.012 174.594 245.012 cv
138.598 245.012 li
138.598 290.196 li
174.594 290.196 li
107.718 217.766 mo
177.364 217.766 li
193.689 217.766 205.971 222.088 214.207 230.726 cv
222.439 239.36 226.562 251.588 226.562 267.384 cv
226.562 283.188 222.262 295.48 213.676 304.264 cv
205.085 313.054 192.271 317.442 175.233 317.442 cv
138.598 317.442 li
138.598 369.718 li
107.718 369.718 li
107.718 217.766 li
.929412 .321569 .239216 rgb
f
192.841 287.247 mo
196.389 283.259 198.164 277.651 198.164 270.413 cv
198.164 263.324 196.389 257.824 192.841 253.91 cv
192.267 253.277 191.642 252.72 190.986 252.188 cv
193.819 255.988 195.254 261.048 195.254 267.384 cv
195.254 274.621 193.476 280.234 189.93 284.219 cv
186.379 288.205 181.268 290.196 174.594 290.196 cv
138.598 290.196 li
141.511 293.228 li
177.508 293.228 li
184.176 293.228 189.289 291.232 192.841 287.247 cv
.729412 .133333 0 rgb
f
110.629 220.793 mo
180.273 220.793 li
195.562 220.793 207.304 224.582 215.497 232.157 cv
215.081 231.671 214.653 231.19 214.207 230.726 cv
205.971 222.088 193.689 217.766 177.364 217.766 cv
107.718 217.766 li
107.718 369.718 li
110.629 369.718 li
110.629 220.793 li
f
123.63 217.766 mo
118.071 217.766 li
118.965 217.555 119.895 217.444 120.851 217.444 cv
121.806 217.444 122.735 217.555 123.63 217.766 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 120.853 230.49 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 120.853 230.49 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
120.851 243.536 mo
116.633 243.536 112.903 241.375 110.629 238.059 cv
110.629 222.926 li
111.163 222.147 111.777 221.432 112.459 220.793 cv
129.243 220.793 li
131.796 223.181 133.401 226.642 133.401 230.492 cv
133.401 237.701 127.777 243.536 120.851 243.536 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 120.853 230.49 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 120.853 230.49 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
110.629 238.059 mo
109.166 235.926 108.306 233.314 108.306 230.492 cv
108.306 227.672 109.166 225.06 110.629 222.926 cv
110.629 238.059 li
129.243 220.793 mo
112.459 220.793 li
114.024 219.328 115.945 218.266 118.071 217.766 cv
123.63 217.766 li
125.755 218.266 127.678 219.328 129.243 220.793 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 120.853 230.49 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 120.853 230.49 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
124.157 242.223 mo
120.067 242.223 116.742 238.724 116.742 234.427 cv
116.742 230.126 120.067 226.631 124.157 226.631 cv
128.246 226.631 131.572 230.126 131.572 234.427 cv
131.572 238.724 128.246 242.223 124.157 242.223 cv
cp
.729412 .133333 0 rgb
f
129.137 234.229 mo
129.137 237.305 126.736 239.796 123.781 239.796 cv
122.444 239.796 119.047 238.259 119.047 238.259 cv
119.047 238.259 117.791 235.091 117.791 233.574 cv
117.791 230.499 120.19 228.006 123.146 228.006 cv
125.224 228.006 127.883 229.251 127.883 229.251 cv
127.883 229.251 128.854 232.432 128.91 232.627 cv
129.057 233.137 129.137 233.676 129.137 234.229 cv
cp
.878431 .396078 0 rgb
f
128.156 231.276 mo
128.156 235.312 125.012 238.584 121.133 238.584 cv
117.255 238.584 114.107 235.312 114.107 231.276 cv
114.107 227.243 117.255 223.977 121.133 223.977 cv
125.012 223.977 128.156 227.243 128.156 231.276 cv
cp
1 .768627 0 rgb
f
121.133 236.224 mo
118.507 236.224 116.376 234.006 116.376 231.276 cv
116.376 228.549 118.507 226.33 121.133 226.33 cv
123.754 226.33 125.888 228.549 125.888 231.276 cv
125.888 234.006 123.754 236.224 121.133 236.224 cv
cp
1 .917647 .501961 rgb
f
117.269 231.958 mo
117.269 229.396 119.271 227.32 121.729 227.32 cv
123.427 227.32 124.908 228.31 125.658 229.768 cv
125.045 227.776 123.248 226.33 121.133 226.33 cv
118.507 226.33 116.376 228.549 116.376 231.276 cv
116.376 233.326 117.583 235.091 119.295 235.84 cv
118.077 235.011 117.269 233.582 117.269 231.958 cv
cp
1 1 1 rgb
f
123.461 231.276 mo
123.461 232.619 122.419 233.702 121.133 233.702 cv
119.842 233.702 118.803 232.619 118.803 231.276 cv
118.803 229.94 119.842 228.853 121.133 228.853 cv
122.419 228.853 123.461 229.94 123.461 231.276 cv
cp
f
157.637 217.766 mo
146.996 217.766 li
148.611 216.978 150.414 216.538 152.316 216.538 cv
154.219 216.538 156.022 216.978 157.637 217.766 cv
level3{
gsave
clp
[12.5453 0 0 13.047 152.316 229.584 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5453 0 0 13.047 152.316 229.584 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
152.316 242.631 mo
145.388 242.631 139.771 236.792 139.771 229.585 cv
139.771 226.197 141.012 223.112 143.047 220.793 cv
161.587 220.793 li
163.621 223.112 164.862 226.197 164.862 229.585 cv
164.862 236.792 159.246 242.631 152.316 242.631 cv
level3{
gsave
clp
[12.5453 0 0 13.047 152.316 229.584 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5453 0 0 13.047 152.316 229.584 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
161.587 220.793 mo
143.047 220.793 li
144.152 219.533 145.493 218.499 146.996 217.766 cv
157.637 217.766 li
159.14 218.499 160.481 219.533 161.587 220.793 cv
level3{
gsave
clp
[12.5453 0 0 13.047 152.316 229.584 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5453 0 0 13.047 152.316 229.584 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
155.627 241.314 mo
151.533 241.314 148.209 237.816 148.209 233.518 cv
148.209 229.219 151.533 225.723 155.627 225.723 cv
159.714 225.723 163.041 229.219 163.041 233.518 cv
163.041 237.816 159.714 241.314 155.627 241.314 cv
cp
.729412 .133333 0 rgb
f
160.601 233.319 mo
160.601 236.397 158.203 238.888 155.247 238.888 cv
153.912 238.888 150.514 237.347 150.514 237.347 cv
150.514 237.347 149.261 234.184 149.261 232.669 cv
149.261 229.59 151.658 227.097 154.615 227.097 cv
156.689 227.097 159.349 228.341 159.349 228.341 cv
159.349 228.341 160.32 231.529 160.376 231.722 cv
160.525 232.229 160.601 232.761 160.601 233.319 cv
cp
.878431 .396078 0 rgb
f
159.623 230.373 mo
159.623 234.407 156.479 237.675 152.596 237.675 cv
148.718 237.675 145.576 234.407 145.576 230.373 cv
145.576 226.336 148.718 223.065 152.596 223.065 cv
156.479 223.065 159.623 226.336 159.623 230.373 cv
cp
1 .768627 0 rgb
f
152.596 235.314 mo
149.979 235.314 147.843 233.096 147.843 230.373 cv
147.843 227.644 149.979 225.427 152.596 225.427 cv
155.221 225.427 157.354 227.644 157.354 230.373 cv
157.354 233.096 155.221 235.314 152.596 235.314 cv
cp
1 .917647 .501961 rgb
f
148.734 231.052 mo
148.734 228.491 150.736 226.413 153.194 226.413 cv
154.896 226.413 156.371 227.401 157.125 228.861 cv
156.511 226.869 154.715 225.427 152.596 225.427 cv
149.979 225.427 147.843 227.644 147.843 230.373 cv
147.843 232.421 149.05 234.184 150.76 234.932 cv
149.543 234.102 148.734 232.67 148.734 231.052 cv
cp
1 1 1 rgb
f
154.928 230.373 mo
154.928 231.707 153.886 232.793 152.596 232.793 cv
151.313 232.793 150.269 231.707 150.269 230.373 cv
150.269 229.032 151.313 227.945 152.596 227.945 cv
153.886 227.945 154.928 229.032 154.928 230.373 cv
cp
f
192.317 219.201 mo
188.339 218.362 184.019 217.891 179.353 217.788 cv
180.98 216.986 182.799 216.538 184.72 216.538 cv
187.576 216.538 190.208 217.53 192.317 219.201 cv
level3{
gsave
clp
[12.5459 0 0 13.0476 184.718 229.584 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 184.718 229.584 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
184.72 242.631 mo
177.788 242.631 172.172 236.792 172.172 229.585 cv
172.172 226.197 173.413 223.112 175.448 220.793 cv
180.273 220.793 li
185.639 220.793 190.568 221.26 195.059 222.193 cv
196.451 224.294 197.266 226.84 197.266 229.585 cv
197.266 236.792 191.648 242.631 184.72 242.631 cv
level3{
gsave
clp
[12.5459 0 0 13.0476 184.718 229.584 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 184.718 229.584 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
195.059 222.193 mo
190.568 221.26 185.639 220.793 180.273 220.793 cv
175.448 220.793 li
176.543 219.545 177.868 218.519 179.353 217.788 cv
184.019 217.891 188.339 218.362 192.317 219.201 cv
193.376 220.04 194.303 221.051 195.059 222.193 cv
level3{
gsave
clp
[12.5459 0 0 13.0476 184.718 229.584 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 184.718 229.584 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
188.025 241.314 mo
183.937 241.314 180.611 237.816 180.611 233.518 cv
180.611 229.219 183.937 225.723 188.025 225.723 cv
192.114 225.723 195.444 229.219 195.444 233.518 cv
195.444 237.816 192.114 241.314 188.025 241.314 cv
cp
.729412 .133333 0 rgb
f
193.002 233.319 mo
193.002 236.397 190.607 238.888 187.647 238.888 cv
186.313 238.888 182.918 237.347 182.918 237.347 cv
182.918 237.347 181.661 234.184 181.661 232.669 cv
181.661 229.59 184.059 227.097 187.016 227.097 cv
189.09 227.097 191.749 228.341 191.749 228.341 cv
191.749 228.341 192.725 231.529 192.778 231.722 cv
192.923 232.229 193.002 232.761 193.002 233.319 cv
cp
.878431 .396078 0 rgb
f
192.023 230.373 mo
192.023 234.407 188.878 237.675 184.997 237.675 cv
181.121 237.675 177.973 234.407 177.973 230.373 cv
177.973 226.336 181.121 223.065 184.997 223.065 cv
188.878 223.065 192.023 226.336 192.023 230.373 cv
cp
1 .768627 0 rgb
f
184.997 235.314 mo
182.377 235.314 180.242 233.096 180.242 230.373 cv
180.242 227.644 182.377 225.427 184.997 225.427 cv
187.622 225.427 189.755 227.644 189.755 230.373 cv
189.755 233.096 187.622 235.314 184.997 235.314 cv
cp
1 .917647 .501961 rgb
f
181.136 231.052 mo
181.136 228.491 183.135 226.413 185.597 226.413 cv
187.295 226.413 188.774 227.401 189.524 228.861 cv
188.911 226.869 187.115 225.427 184.997 225.427 cv
182.377 225.427 180.242 227.644 180.242 230.373 cv
180.242 232.421 181.45 234.184 183.161 234.932 cv
181.942 234.102 181.136 232.67 181.136 231.052 cv
cp
1 1 1 rgb
f
187.33 230.373 mo
187.33 231.707 186.287 232.793 184.997 232.793 cv
183.712 232.793 182.669 231.707 182.669 230.373 cv
182.669 229.032 183.712 227.945 184.997 227.945 cv
186.287 227.945 187.33 229.032 187.33 230.373 cv
cp
f
206.594 262.068 mo
199.665 262.068 194.051 256.224 194.051 249.019 cv
194.051 241.812 199.665 235.97 206.594 235.97 cv
213.528 235.97 219.142 241.812 219.142 249.019 cv
219.142 256.224 213.528 262.068 206.594 262.068 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 206.596 249.019 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 206.596 249.019 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
209.904 260.748 mo
205.815 260.748 202.488 257.252 202.488 252.952 cv
202.488 248.653 205.815 245.155 209.904 245.155 cv
213.994 245.155 217.318 248.653 217.318 252.952 cv
217.318 257.252 213.994 260.748 209.904 260.748 cv
cp
.729412 .133333 0 rgb
f
214.88 252.754 mo
214.88 255.831 212.483 258.327 209.523 258.327 cv
208.191 258.327 204.793 256.786 204.793 256.786 cv
204.793 256.786 203.538 253.618 203.538 252.101 cv
203.538 249.024 205.938 246.529 208.895 246.529 cv
210.97 246.529 213.627 247.778 213.627 247.778 cv
213.627 247.778 214.599 250.963 214.657 251.156 cv
214.803 251.661 214.88 252.201 214.88 252.754 cv
cp
.878431 .396078 0 rgb
f
213.901 249.806 mo
213.901 253.838 210.758 257.109 206.877 257.109 cv
202.995 257.109 199.854 253.838 199.854 249.806 cv
199.854 245.771 202.995 242.502 206.877 242.502 cv
210.758 242.502 213.901 245.771 213.901 249.806 cv
cp
1 .768627 0 rgb
f
206.877 254.755 mo
204.255 254.755 202.123 252.53 202.123 249.806 cv
202.123 247.078 204.255 244.859 206.877 244.859 cv
209.5 244.859 211.634 247.078 211.634 249.806 cv
211.634 252.53 209.5 254.755 206.877 254.755 cv
cp
1 .917647 .501961 rgb
f
203.017 250.485 mo
203.017 247.93 205.017 245.848 207.475 245.848 cv
209.174 245.848 210.652 246.841 211.405 248.295 cv
210.791 246.307 208.992 244.859 206.877 244.859 cv
204.255 244.859 202.123 247.078 202.123 249.806 cv
202.123 251.856 203.325 253.618 205.042 254.365 cv
203.825 253.536 203.017 252.107 203.017 250.485 cv
cp
1 1 1 rgb
f
209.208 249.806 mo
209.208 251.145 208.162 252.229 206.877 252.229 cv
205.59 252.229 204.548 251.145 204.548 249.806 cv
204.548 248.466 205.59 247.38 206.877 247.38 cv
208.162 247.38 209.208 248.466 209.208 249.806 cv
cp
f
206.594 295.218 mo
200.678 295.218 195.72 290.954 194.397 285.224 cv
196.606 281.891 197.844 277.67 198.11 272.556 cv
200.343 270.422 203.321 269.12 206.594 269.12 cv
213.528 269.12 219.142 274.96 219.142 282.165 cv
219.142 289.369 213.528 295.218 206.594 295.218 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 206.596 282.168 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 206.596 282.168 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
194.397 285.224 mo
194.171 284.242 194.051 283.218 194.051 282.165 cv
194.051 278.363 195.615 274.94 198.11 272.556 cv
197.844 277.67 196.606 281.891 194.397 285.224 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 206.596 282.168 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 206.596 282.168 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
209.904 293.893 mo
205.815 293.893 202.488 290.397 202.488 286.102 cv
202.488 281.8 205.815 278.304 209.904 278.304 cv
213.994 278.304 217.318 281.8 217.318 286.102 cv
217.318 290.397 213.994 293.893 209.904 293.893 cv
cp
.729412 .133333 0 rgb
f
214.88 285.899 mo
214.88 288.977 212.483 291.473 209.523 291.473 cv
208.191 291.473 204.793 289.929 204.793 289.929 cv
204.793 289.929 203.538 286.761 203.538 285.25 cv
203.538 282.171 205.938 279.675 208.895 279.675 cv
210.97 279.675 213.627 280.924 213.627 280.924 cv
213.627 280.924 214.599 284.109 214.655 284.299 cv
214.803 284.807 214.88 285.345 214.88 285.899 cv
cp
.878431 .396078 0 rgb
f
213.901 282.951 mo
213.901 286.984 210.758 290.259 206.877 290.259 cv
202.995 290.259 199.854 286.984 199.854 282.951 cv
199.854 278.915 202.995 275.646 206.877 275.646 cv
210.758 275.646 213.901 278.915 213.901 282.951 cv
cp
1 .768627 0 rgb
f
206.877 287.897 mo
204.255 287.897 202.123 285.674 202.123 282.951 cv
202.123 280.225 204.255 278.003 206.877 278.003 cv
209.5 278.003 211.634 280.225 211.634 282.951 cv
211.634 285.674 209.5 287.897 206.877 287.897 cv
cp
1 .917647 .501961 rgb
f
203.013 283.628 mo
203.013 281.075 205.017 278.99 207.475 278.99 cv
209.174 278.99 210.652 279.985 211.405 281.439 cv
210.791 279.45 208.992 278.003 206.877 278.003 cv
204.255 278.003 202.123 280.225 202.123 282.951 cv
202.123 285.003 203.325 286.761 205.042 287.511 cv
203.825 286.682 203.013 285.253 203.013 283.628 cv
cp
1 1 1 rgb
f
209.208 282.951 mo
209.208 284.289 208.162 285.375 206.877 285.375 cv
205.59 285.375 204.543 284.289 204.543 282.951 cv
204.543 281.614 205.59 280.528 206.877 280.528 cv
208.162 280.528 209.208 281.614 209.208 282.951 cv
cp
f
184.72 315.358 mo
177.788 315.358 172.172 309.515 172.172 302.305 cv
172.172 298.777 173.518 295.576 175.706 293.228 cv
177.508 293.228 li
182.258 293.228 186.219 292.215 189.389 290.192 cv
194.006 292.118 197.266 296.816 197.266 302.305 cv
197.266 309.515 191.648 315.358 184.72 315.358 cv
level3{
gsave
clp
[12.5476 0 0 13.0494 184.718 302.308 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5476 0 0 13.0494 184.718 302.308 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
177.508 293.228 mo
175.706 293.228 li
177.987 290.78 181.182 289.258 184.72 289.258 cv
186.37 289.258 187.946 289.589 189.389 290.192 cv
186.219 292.215 182.258 293.228 177.508 293.228 cv
level3{
gsave
clp
[12.5476 0 0 13.0494 184.718 302.308 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5476 0 0 13.0494 184.718 302.308 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
188.025 314.034 mo
183.937 314.034 180.611 310.54 180.611 306.24 cv
180.611 301.942 183.937 298.441 188.025 298.441 cv
192.114 298.441 195.444 301.942 195.444 306.24 cv
195.444 310.54 192.114 314.034 188.025 314.034 cv
cp
.729412 .133333 0 rgb
f
193.002 306.045 mo
193.002 309.12 190.604 311.613 187.647 311.613 cv
186.313 311.613 182.914 310.072 182.914 310.072 cv
182.914 310.072 181.657 306.905 181.657 305.391 cv
181.657 302.313 184.059 299.817 187.016 299.817 cv
189.09 299.817 191.749 301.063 191.749 301.063 cv
191.749 301.063 192.725 304.247 192.778 304.443 cv
192.923 304.948 193.002 305.487 193.002 306.045 cv
cp
.878431 .396078 0 rgb
f
192.023 303.093 mo
192.023 307.126 188.878 310.395 184.997 310.395 cv
181.121 310.395 177.973 307.126 177.973 303.093 cv
177.973 299.061 181.121 295.786 184.997 295.786 cv
188.878 295.786 192.023 299.061 192.023 303.093 cv
cp
1 .768627 0 rgb
f
184.997 308.04 mo
182.377 308.04 180.242 305.821 180.242 303.093 cv
180.242 300.363 182.377 298.146 184.997 298.146 cv
187.622 298.146 189.755 300.363 189.755 303.093 cv
189.755 305.821 187.622 308.04 184.997 308.04 cv
cp
1 .917647 .501961 rgb
f
181.136 303.772 mo
181.136 301.212 183.135 299.131 185.597 299.131 cv
187.293 299.131 188.774 300.124 189.524 301.583 cv
188.911 299.594 187.115 298.146 184.997 298.146 cv
182.377 298.146 180.242 300.363 180.242 303.093 cv
180.242 305.142 181.45 306.905 183.161 307.653 cv
181.942 306.824 181.136 305.396 181.136 303.772 cv
cp
1 1 1 rgb
f
187.33 303.093 mo
187.33 304.432 186.287 305.517 184.997 305.517 cv
183.712 305.517 182.669 304.432 182.669 303.093 cv
182.669 301.753 183.712 300.669 184.997 300.669 cv
186.287 300.669 187.33 301.753 187.33 303.093 cv
cp
f
156.998 290.196 mo
147.636 290.196 li
149.082 289.591 150.661 289.258 152.316 289.258 cv
153.971 289.258 155.551 289.591 156.998 290.196 cv
level3{
gsave
clp
[12.547 0 0 13.0488 152.316 302.308 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.547 0 0 13.0488 152.316 302.308 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
152.316 315.358 mo
145.388 315.358 139.771 309.515 139.771 302.305 cv
139.771 298.777 141.117 295.576 143.305 293.228 cv
161.328 293.228 li
163.516 295.576 164.862 298.777 164.862 302.305 cv
164.862 309.515 159.246 315.358 152.316 315.358 cv
level3{
gsave
clp
[12.547 0 0 13.0488 152.316 302.308 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.547 0 0 13.0488 152.316 302.308 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
161.328 293.228 mo
143.305 293.228 li
144.519 291.925 145.991 290.885 147.636 290.196 cv
156.998 290.196 li
158.642 290.885 160.115 291.925 161.328 293.228 cv
level3{
gsave
clp
[12.547 0 0 13.0488 152.316 302.308 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.547 0 0 13.0488 152.316 302.308 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
155.627 314.034 mo
151.533 314.034 148.209 310.54 148.209 306.24 cv
148.209 301.942 151.533 298.441 155.627 298.441 cv
159.714 298.441 163.041 301.942 163.041 306.24 cv
163.041 310.54 159.714 314.034 155.627 314.034 cv
cp
.729412 .133333 0 rgb
f
160.601 306.045 mo
160.601 309.12 158.203 311.613 155.247 311.613 cv
153.912 311.613 150.514 310.072 150.514 310.072 cv
150.514 310.072 149.261 306.905 149.261 305.391 cv
149.261 302.313 151.658 299.817 154.615 299.817 cv
156.689 299.817 159.349 301.063 159.349 301.063 cv
159.349 301.063 160.32 304.247 160.376 304.443 cv
160.525 304.948 160.601 305.487 160.601 306.045 cv
cp
.878431 .396078 0 rgb
f
159.623 303.093 mo
159.623 307.126 156.479 310.395 152.596 310.395 cv
148.718 310.395 145.576 307.126 145.576 303.093 cv
145.576 299.061 148.718 295.786 152.596 295.786 cv
156.479 295.786 159.623 299.061 159.623 303.093 cv
cp
1 .768627 0 rgb
f
152.596 308.04 mo
149.979 308.04 147.843 305.821 147.843 303.093 cv
147.843 300.363 149.979 298.146 152.596 298.146 cv
155.221 298.146 157.354 300.363 157.354 303.093 cv
157.354 305.821 155.221 308.04 152.596 308.04 cv
cp
1 .917647 .501961 rgb
f
148.734 303.772 mo
148.734 301.212 150.736 299.131 153.194 299.131 cv
154.896 299.131 156.371 300.124 157.125 301.583 cv
156.511 299.594 154.715 298.146 152.596 298.146 cv
149.979 298.146 147.843 300.363 147.843 303.093 cv
147.843 305.142 149.05 306.905 150.76 307.653 cv
149.543 306.824 148.734 305.396 148.734 303.772 cv
cp
1 1 1 rgb
f
154.928 303.093 mo
154.928 304.432 153.886 305.517 152.596 305.517 cv
151.313 305.517 150.269 304.432 150.269 303.093 cv
150.269 301.753 151.313 300.669 152.596 300.669 cv
153.886 300.669 154.928 301.753 154.928 303.093 cv
cp
f
120.851 302.642 mo
116.634 302.642 112.904 300.48 110.629 297.164 cv
110.629 282.027 li
112.904 278.71 116.634 276.549 120.851 276.549 cv
127.777 276.549 133.401 282.388 133.401 289.597 cv
133.401 296.801 127.777 302.642 120.851 302.642 cv
level3{
gsave
clp
[12.5473 0 0 13.0491 120.853 289.594 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5473 0 0 13.0491 120.853 289.594 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
110.629 297.164 mo
109.165 295.03 108.304 292.417 108.304 289.597 cv
108.304 286.774 109.165 284.161 110.629 282.027 cv
110.629 297.164 li
level3{
gsave
clp
[12.5473 0 0 13.0491 120.853 289.594 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5473 0 0 13.0491 120.853 289.594 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
124.157 301.324 mo
120.067 301.324 116.742 297.826 116.742 293.526 cv
116.742 289.228 120.067 285.733 124.157 285.733 cv
128.246 285.733 131.572 289.228 131.572 293.526 cv
131.572 297.826 128.246 301.324 124.157 301.324 cv
cp
.729412 .133333 0 rgb
f
129.133 293.332 mo
129.133 296.41 126.736 298.902 123.778 298.902 cv
122.444 298.902 119.047 297.361 119.047 297.361 cv
119.047 297.361 117.791 294.194 117.791 292.68 cv
117.791 289.602 120.19 287.106 123.146 287.106 cv
125.224 287.106 127.883 288.353 127.883 288.353 cv
127.883 288.353 128.854 291.536 128.91 291.731 cv
129.057 292.238 129.133 292.776 129.133 293.332 cv
cp
.878431 .396078 0 rgb
f
128.156 290.38 mo
128.156 294.415 125.012 297.684 121.133 297.684 cv
117.251 297.684 114.107 294.415 114.107 290.38 cv
114.107 286.35 117.251 283.075 121.133 283.075 cv
125.012 283.075 128.156 286.35 128.156 290.38 cv
cp
1 .768627 0 rgb
f
121.133 295.33 mo
118.507 295.33 116.376 293.111 116.376 290.38 cv
116.376 287.653 118.507 285.437 121.133 285.437 cv
123.754 285.437 125.888 287.653 125.888 290.38 cv
125.888 293.111 123.754 295.33 121.133 295.33 cv
cp
1 .917647 .501961 rgb
f
117.267 291.061 mo
117.267 288.501 119.271 286.423 121.729 286.423 cv
123.427 286.423 124.908 287.414 125.658 288.873 cv
125.045 286.883 123.248 285.437 121.133 285.437 cv
118.507 285.437 116.376 287.653 116.376 290.38 cv
116.376 292.434 117.583 294.194 119.294 294.943 cv
118.077 294.112 117.267 292.683 117.267 291.061 cv
cp
1 1 1 rgb
f
123.461 290.38 mo
123.461 291.72 122.419 292.804 121.133 292.804 cv
119.842 292.804 118.803 291.72 118.803 290.38 cv
118.803 289.04 119.842 287.958 121.133 287.958 cv
122.419 287.958 123.461 289.04 123.461 290.38 cv
cp
f
120.851 366.288 mo
116.634 366.288 112.904 364.125 110.629 360.808 cv
110.629 345.671 li
112.904 342.354 116.634 340.192 120.851 340.192 cv
127.777 340.192 133.401 346.033 133.401 353.24 cv
133.401 360.445 127.777 366.288 120.851 366.288 cv
level3{
gsave
clp
[12.5479 0 0 13.0496 120.853 353.239 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5479 0 0 13.0496 120.853 353.239 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
110.629 360.808 mo
109.165 358.674 108.304 356.061 108.304 353.24 cv
108.304 350.418 109.165 347.806 110.629 345.671 cv
110.629 360.808 li
level3{
gsave
clp
[12.5479 0 0 13.0496 120.853 353.239 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5479 0 0 13.0496 120.853 353.239 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
124.157 364.967 mo
120.067 364.967 116.742 361.47 116.742 357.171 cv
116.742 352.872 120.067 349.376 124.157 349.376 cv
128.246 349.376 131.572 352.872 131.572 357.171 cv
131.572 361.47 128.246 364.967 124.157 364.967 cv
cp
.729412 .133333 0 rgb
f
129.133 356.976 mo
129.133 360.055 126.736 362.546 123.778 362.546 cv
122.444 362.546 119.047 361.002 119.047 361.002 cv
119.047 361.002 117.791 357.835 117.791 356.32 cv
117.791 353.247 120.19 350.754 123.146 350.754 cv
125.224 350.754 127.883 351.995 127.883 351.995 cv
127.883 351.995 128.854 355.181 128.91 355.374 cv
129.057 355.883 129.133 356.42 129.133 356.976 cv
cp
.878431 .396078 0 rgb
f
128.156 354.024 mo
128.156 358.059 125.012 361.333 121.133 361.333 cv
117.251 361.333 114.107 358.059 114.107 354.024 cv
114.107 349.988 117.251 346.722 121.133 346.722 cv
125.012 346.722 128.156 349.988 128.156 354.024 cv
cp
1 .768627 0 rgb
f
121.133 358.967 mo
118.507 358.967 116.376 356.751 116.376 354.024 cv
116.376 351.296 118.507 349.081 121.133 349.081 cv
123.754 349.081 125.888 351.296 125.888 354.024 cv
125.888 356.751 123.754 358.967 121.133 358.967 cv
cp
1 .917647 .501961 rgb
f
117.267 354.704 mo
117.267 352.146 119.271 350.065 121.729 350.065 cv
123.427 350.065 124.908 351.058 125.658 352.517 cv
125.045 350.521 123.248 349.081 121.133 349.081 cv
118.507 349.081 116.376 351.296 116.376 354.024 cv
116.376 356.074 117.583 357.835 119.294 358.587 cv
118.077 357.757 117.267 356.329 117.267 354.704 cv
cp
1 1 1 rgb
f
123.461 354.024 mo
123.461 355.364 122.419 356.447 121.133 356.447 cv
119.842 356.447 118.803 355.364 118.803 354.024 cv
118.803 352.688 119.842 351.598 121.133 351.598 cv
122.419 351.598 123.461 352.688 123.461 354.024 cv
cp
f
120.851 273.093 mo
116.634 273.093 112.904 270.93 110.629 267.612 cv
110.629 252.475 li
112.904 249.158 116.634 246.995 120.851 246.995 cv
127.777 246.995 133.401 252.839 133.401 260.043 cv
133.401 267.249 127.777 273.093 120.851 273.093 cv
level3{
gsave
clp
[12.5479 0 0 13.0496 120.853 260.043 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5479 0 0 13.0496 120.853 260.043 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
110.629 267.612 mo
109.165 265.477 108.304 262.864 108.304 260.043 cv
108.304 257.222 109.165 254.61 110.629 252.475 cv
110.629 267.612 li
level3{
gsave
clp
[12.5479 0 0 13.0496 120.853 260.043 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5479 0 0 13.0496 120.853 260.043 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
124.157 271.773 mo
120.067 271.773 116.742 268.276 116.742 263.977 cv
116.742 259.679 120.067 256.181 124.157 256.181 cv
128.246 256.181 131.572 259.679 131.572 263.977 cv
131.572 268.276 128.246 271.773 124.157 271.773 cv
cp
.729412 .133333 0 rgb
f
129.133 263.778 mo
129.133 266.858 126.736 269.352 123.778 269.352 cv
122.444 269.352 119.047 267.809 119.047 267.809 cv
119.047 267.809 117.791 264.644 117.791 263.126 cv
117.791 260.049 120.19 257.556 123.146 257.556 cv
125.224 257.556 127.883 258.8 127.883 258.8 cv
127.883 258.8 128.854 261.986 128.91 262.18 cv
129.057 262.687 129.133 263.226 129.133 263.778 cv
cp
.878431 .396078 0 rgb
f
128.156 260.831 mo
128.156 264.863 125.012 268.134 121.133 268.134 cv
117.251 268.134 114.107 264.863 114.107 260.831 cv
114.107 256.798 117.251 253.525 121.133 253.525 cv
125.012 253.525 128.156 256.798 128.156 260.831 cv
cp
1 .768627 0 rgb
f
121.133 265.775 mo
118.507 265.775 116.376 263.562 116.376 260.831 cv
116.376 258.099 118.507 255.886 121.133 255.886 cv
123.754 255.886 125.888 258.099 125.888 260.831 cv
125.888 263.562 123.754 265.775 121.133 265.775 cv
cp
1 .917647 .501961 rgb
f
117.267 261.506 mo
117.267 258.952 119.271 256.872 121.729 256.872 cv
123.427 256.872 124.908 257.861 125.658 259.321 cv
125.045 257.33 123.248 255.886 121.133 255.886 cv
118.507 255.886 116.376 258.099 116.376 260.831 cv
116.376 262.877 117.583 264.644 119.294 265.394 cv
118.077 264.562 117.267 263.135 117.267 261.506 cv
cp
1 1 1 rgb
f
123.461 260.831 mo
123.461 262.169 122.419 263.252 121.133 263.252 cv
119.842 263.252 118.803 262.169 118.803 260.831 cv
118.803 259.49 119.842 258.404 121.133 258.404 cv
122.419 258.404 123.461 259.49 123.461 260.831 cv
cp
f
120.851 334.014 mo
116.634 334.014 112.904 331.85 110.629 328.533 cv
110.629 313.396 li
112.904 310.079 116.634 307.917 120.851 307.917 cv
127.777 307.917 133.401 313.758 133.401 320.966 cv
133.401 328.169 127.777 334.014 120.851 334.014 cv
level3{
gsave
clp
[12.5479 0 0 13.0496 120.853 320.965 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5479 0 0 13.0496 120.853 320.965 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
110.629 328.533 mo
109.165 326.399 108.304 323.786 108.304 320.966 cv
108.304 318.143 109.165 315.53 110.629 313.396 cv
110.629 328.533 li
level3{
gsave
clp
[12.5479 0 0 13.0496 120.853 320.965 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5479 0 0 13.0496 120.853 320.965 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
124.157 332.692 mo
120.067 332.692 116.742 329.193 116.742 324.897 cv
116.742 320.596 120.067 317.101 124.157 317.101 cv
128.246 317.101 131.572 320.596 131.572 324.897 cv
131.572 329.193 128.246 332.692 124.157 332.692 cv
cp
.729412 .133333 0 rgb
f
129.133 324.7 mo
129.133 327.778 126.736 330.271 123.778 330.271 cv
122.444 330.271 119.047 328.729 119.047 328.729 cv
119.047 328.729 117.791 325.561 117.791 324.045 cv
117.791 320.969 120.19 318.476 123.146 318.476 cv
125.224 318.476 127.883 319.722 127.883 319.722 cv
127.883 319.722 128.854 322.906 128.91 323.099 cv
129.057 323.605 129.133 324.146 129.133 324.7 cv
cp
.878431 .396078 0 rgb
f
128.156 321.749 mo
128.156 325.783 125.012 329.053 121.133 329.053 cv
117.251 329.053 114.107 325.783 114.107 321.749 cv
114.107 317.713 117.251 314.441 121.133 314.441 cv
125.012 314.441 128.156 317.713 128.156 321.749 cv
cp
1 .768627 0 rgb
f
121.133 326.694 mo
118.507 326.694 116.376 324.479 116.376 321.749 cv
116.376 319.024 118.507 316.805 121.133 316.805 cv
123.754 316.805 125.888 319.024 125.888 321.749 cv
125.888 324.479 123.754 326.694 121.133 326.694 cv
cp
1 .917647 .501961 rgb
f
117.267 322.429 mo
117.267 319.871 119.271 317.789 121.729 317.789 cv
123.427 317.789 124.908 318.784 125.658 320.24 cv
125.045 318.25 123.248 316.805 121.133 316.805 cv
118.507 316.805 116.376 319.024 116.376 321.749 cv
116.376 323.798 117.583 325.561 119.294 326.311 cv
118.077 325.482 117.267 324.054 117.267 322.429 cv
cp
1 1 1 rgb
f
123.461 321.749 mo
123.461 323.089 122.419 324.174 121.133 324.174 cv
119.842 324.174 118.803 323.089 118.803 321.749 cv
118.803 320.413 119.842 319.327 121.133 319.327 cv
122.419 319.327 123.461 320.413 123.461 321.749 cv
cp
f
374.65 423.915 mo
352.611 423.915 335.138 418.352 322.715 407.377 cv
310.129 396.266 288.061 373.289 288.061 373.289 cv
288.061 373.289 li
290.126 375.253 292.391 377.34 294.83 379.493 cv
307.253 390.466 324.727 396.03 346.768 396.03 cv
368.95 396.03 386.538 390.47 399.034 379.503 cv
411.705 368.385 418.131 352.07 418.131 331.02 cv
418.131 228.814 li
446.011 256.7 li
446.011 358.903 li
446.011 379.958 439.588 396.268 426.918 407.386 cv
414.42 418.353 396.836 423.915 374.65 423.915 cv
330.036 342.486 mo
325.956 342.486 322.329 342.047 319.123 341.158 cv
318.153 337.729 317.665 333.813 317.665 329.432 cv
317.665 228.814 li
345.545 256.7 li
345.545 339.482 li
341.292 341.498 336.158 342.486 330.036 342.486 cv
.901961 .745098 .623529 rgb
f
346.768 396.03 mo
324.727 396.03 307.253 390.466 294.83 379.493 cv
282.243 368.38 274.31 359.06 274.31 359.06 cv
275.862 228.814 li
300.931 212.084 li
317.665 228.814 li
317.665 329.432 li
317.665 339.344 320.163 346.869 325.087 351.79 cv
330.083 356.789 337.174 359.217 346.768 359.217 cv
356.382 359.217 363.561 356.774 368.715 351.751 cv
373.766 346.83 376.33 339.321 376.33 329.432 cv
376.33 228.814 li
401.398 212.084 li
418.131 228.814 li
418.131 331.02 li
418.131 352.07 411.705 368.385 399.034 379.503 cv
386.538 390.47 368.95 396.03 346.768 396.03 cv
0 .368627 .341176 rgb
f
330.036 379.299 mo
307.997 379.299 290.524 373.735 278.099 362.763 cv
265.51 351.65 259.132 335.342 259.132 314.289 cv
259.132 212.084 li
300.931 212.084 li
300.931 312.7 li
300.931 322.614 303.429 330.138 308.356 335.061 cv
313.348 340.059 320.442 342.486 330.036 342.486 cv
339.651 342.486 346.832 340.047 351.983 335.021 cv
357.036 330.1 359.596 322.591 359.596 312.7 cv
359.596 212.084 li
401.398 212.084 li
401.398 314.289 li
401.398 335.342 394.973 351.653 382.305 362.771 cv
369.806 373.74 352.221 379.299 330.036 379.299 cv
.466667 .929412 .890196 rgb
f
281.052 359.422 mo
269.407 349.141 263.588 334.099 263.588 314.289 cv
263.588 216.544 li
296.473 216.544 li
296.473 312.7 li
296.473 323.889 299.381 332.396 305.205 338.217 cv
311.022 344.037 319.302 346.946 330.036 346.946 cv
340.77 346.946 349.122 344.037 355.097 338.217 cv
361.068 332.396 364.056 323.889 364.056 312.7 cv
364.056 216.544 li
396.936 216.544 li
396.936 314.289 li
396.936 334.099 391.075 349.141 379.362 359.422 cv
367.647 369.703 351.202 374.84 330.036 374.84 cv
309.019 374.84 292.692 369.703 281.052 359.422 cv
.117647 .772549 .717647 rgb
f
364.056 312.7 mo
364.056 323.889 361.068 332.396 355.097 338.217 cv
349.122 344.037 340.77 346.946 330.036 346.946 cv
320.268 346.946 312.538 344.528 306.842 339.708 cv
307.309 340.263 307.793 340.804 308.305 341.316 cv
314.123 347.139 322.401 350.046 333.138 350.046 cv
343.871 350.046 352.221 347.139 358.197 341.316 cv
364.169 335.497 367.157 326.99 367.157 315.8 cv
367.157 219.644 li
396.936 219.644 li
396.936 216.544 li
364.056 216.544 li
364.056 312.7 li
0 .368627 .341176 rgb
f
280.445 358.853 mo
271.28 348.78 266.691 334.966 266.691 317.39 cv
266.691 219.644 li
296.473 219.644 li
296.473 216.544 li
263.588 216.544 li
263.588 314.289 li
263.588 333.743 269.215 348.591 280.445 358.853 cv
f
379.135 271.569 mo
373.884 271.569 369.342 268.542 367.157 264.138 cv
367.157 252.28 li
369.342 247.875 373.884 244.848 379.135 244.848 cv
386.513 244.848 392.495 250.83 392.495 258.209 cv
392.495 265.589 386.513 271.569 379.135 271.569 cv
level3{
gsave
clp
[13.3608 0 0 13.3608 379.134 258.208 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3608 0 0 13.3608 379.134 258.208 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
367.157 264.138 mo
366.271 262.352 365.773 260.339 365.773 258.209 cv
365.773 256.079 366.271 254.066 367.157 252.28 cv
367.157 264.138 li
level3{
gsave
clp
[13.3608 0 0 13.3608 379.134 258.208 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3608 0 0 13.3608 379.134 258.208 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
382.654 270.218 mo
378.302 270.218 374.76 266.637 374.76 262.235 cv
374.76 257.835 378.302 254.255 382.654 254.255 cv
387.01 254.255 390.552 257.835 390.552 262.235 cv
390.552 266.637 387.01 270.218 382.654 270.218 cv
cp
0 .368627 .341176 rgb
f
387.954 262.035 mo
387.954 265.185 385.402 267.737 382.251 267.737 cv
380.831 267.737 377.213 266.159 377.213 266.159 cv
377.213 266.159 375.877 262.916 375.877 261.364 cv
375.877 258.215 378.43 255.661 381.581 255.661 cv
383.789 255.661 386.619 256.938 386.619 256.938 cv
386.619 256.938 387.658 260.199 387.717 260.397 cv
387.872 260.914 387.954 261.465 387.954 262.035 cv
cp
.878431 .396078 0 rgb
f
386.912 259.016 mo
386.912 263.146 383.562 266.492 379.435 266.492 cv
375.302 266.492 371.955 263.146 371.955 259.016 cv
371.955 254.884 375.302 251.534 379.435 251.534 cv
383.562 251.534 386.912 254.884 386.912 259.016 cv
cp
1 .768627 0 rgb
f
379.435 264.076 mo
376.642 264.076 374.369 261.805 374.369 259.016 cv
374.369 256.221 376.642 253.949 379.435 253.949 cv
382.227 253.949 384.496 256.221 384.496 259.016 cv
384.496 261.805 382.227 264.076 379.435 264.076 cv
cp
1 .917647 .501961 rgb
f
375.318 259.71 mo
375.318 257.09 377.45 254.959 380.067 254.959 cv
381.877 254.959 383.452 255.978 384.254 257.467 cv
383.6 255.431 381.688 253.949 379.435 253.949 cv
376.642 253.949 374.369 256.221 374.369 259.016 cv
374.369 261.114 375.652 262.916 377.478 263.683 cv
376.18 262.833 375.318 261.372 375.318 259.71 cv
cp
1 1 1 rgb
f
381.915 259.016 mo
381.915 260.384 380.803 261.497 379.435 261.497 cv
378.064 261.497 376.951 260.384 376.951 259.016 cv
376.951 257.644 378.064 256.53 379.435 256.53 cv
380.803 256.53 381.915 257.644 381.915 259.016 cv
cp
f
379.135 337.837 mo
372.573 337.837 367.118 333.109 365.988 326.875 cv
366.578 324.347 366.944 321.618 367.088 318.689 cv
369.244 314.208 373.827 311.114 379.135 311.114 cv
386.51 311.114 392.495 317.099 392.495 324.476 cv
392.495 331.855 386.51 337.837 379.135 337.837 cv
level3{
gsave
clp
[13.3611 0 0 13.3611 379.134 324.476 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3611 0 0 13.3611 379.134 324.476 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
365.988 326.875 mo
365.847 326.096 365.773 325.295 365.773 324.476 cv
365.773 322.403 366.245 320.44 367.088 318.689 cv
366.944 321.618 366.578 324.347 365.988 326.875 cv
level3{
gsave
clp
[13.3611 0 0 13.3611 379.134 324.476 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3611 0 0 13.3611 379.134 324.476 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
382.654 336.483 mo
378.302 336.483 374.76 332.903 374.76 328.501 cv
374.76 324.1 378.302 320.521 382.654 320.521 cv
387.008 320.521 390.552 324.1 390.552 328.501 cv
390.552 332.903 387.008 336.483 382.654 336.483 cv
cp
0 .368627 .341176 rgb
f
387.954 328.302 mo
387.954 331.451 385.398 334.003 382.251 334.003 cv
380.831 334.003 377.213 332.426 377.213 332.426 cv
377.213 332.426 375.877 329.184 375.877 327.631 cv
375.877 324.48 378.43 321.928 381.581 321.928 cv
383.789 321.928 386.619 323.204 386.619 323.204 cv
386.619 323.204 387.658 326.466 387.714 326.661 cv
387.87 327.181 387.954 327.731 387.954 328.302 cv
cp
.878431 .396078 0 rgb
f
386.912 325.282 mo
386.912 329.41 383.562 332.759 379.435 332.759 cv
375.302 332.759 371.952 329.41 371.952 325.282 cv
371.952 321.148 375.302 317.8 379.435 317.8 cv
383.562 317.8 386.912 321.148 386.912 325.282 cv
cp
1 .768627 0 rgb
f
379.435 330.343 mo
376.642 330.343 374.369 328.071 374.369 325.282 cv
374.369 322.488 376.642 320.217 379.435 320.217 cv
382.227 320.217 384.496 322.488 384.496 325.282 cv
384.496 328.071 382.227 330.343 379.435 330.343 cv
cp
1 .917647 .501961 rgb
f
375.318 325.977 mo
375.318 323.358 377.45 321.228 380.067 321.228 cv
381.877 321.228 383.452 322.244 384.254 323.732 cv
383.6 321.696 381.688 320.217 379.435 320.217 cv
376.642 320.217 374.369 322.488 374.369 325.282 cv
374.369 327.377 375.652 329.184 377.476 329.949 cv
376.18 329.1 375.318 327.639 375.318 325.977 cv
cp
1 1 1 rgb
f
381.915 325.282 mo
381.915 326.652 380.803 327.763 379.435 327.763 cv
378.062 327.763 376.951 326.652 376.951 325.282 cv
376.951 323.91 378.062 322.799 379.435 322.799 cv
380.803 322.799 381.915 323.91 381.915 325.282 cv
cp
f
363.917 363.162 mo
356.537 363.162 350.557 357.179 350.557 349.798 cv
350.557 348.618 350.71 347.474 350.997 346.385 cv
353.692 345.057 356.092 343.368 358.197 341.316 cv
359.656 339.895 360.936 338.314 362.038 336.572 cv
362.652 336.486 363.279 336.441 363.917 336.441 cv
371.294 336.441 377.272 342.422 377.272 349.798 cv
377.272 357.179 371.294 363.162 363.917 363.162 cv
level3{
gsave
clp
[13.3591 0 0 13.3591 363.915 349.802 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3591 0 0 13.3591 363.915 349.802 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
350.997 346.385 mo
352.35 341.251 356.684 337.326 362.038 336.572 cv
360.936 338.314 359.656 339.895 358.197 341.316 cv
356.092 343.368 353.692 345.057 350.997 346.385 cv
level3{
gsave
clp
[13.3591 0 0 13.3591 363.915 349.802 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3591 0 0 13.3591 363.915 349.802 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
367.437 361.81 mo
363.081 361.81 359.54 358.228 359.54 353.827 cv
359.54 349.427 363.081 345.846 367.437 345.846 cv
371.792 345.846 375.333 349.427 375.333 353.827 cv
375.333 358.228 371.792 361.81 367.437 361.81 cv
cp
0 .368627 .341176 rgb
f
372.734 353.626 mo
372.734 356.776 370.182 359.329 367.033 359.329 cv
365.61 359.329 361.995 357.749 361.995 357.749 cv
361.995 357.749 360.66 354.509 360.66 352.955 cv
360.66 349.804 363.212 347.251 366.36 347.251 cv
368.568 347.251 371.4 348.527 371.4 348.527 cv
371.4 348.527 372.438 351.788 372.496 351.986 cv
372.649 352.506 372.734 353.058 372.734 353.626 cv
cp
.878431 .396078 0 rgb
f
371.693 350.604 mo
371.693 354.735 368.346 358.085 364.214 358.085 cv
360.083 358.085 356.732 354.735 356.732 350.604 cv
356.732 346.475 360.083 343.126 364.214 343.126 cv
368.346 343.126 371.693 346.475 371.693 350.604 cv
cp
1 .768627 0 rgb
f
364.214 355.669 mo
361.419 355.669 359.148 353.396 359.148 350.604 cv
359.148 347.811 361.419 345.54 364.214 345.54 cv
367.006 345.54 369.277 347.811 369.277 350.604 cv
369.277 353.396 367.006 355.669 364.214 355.669 cv
cp
1 .917647 .501961 rgb
f
360.101 351.3 mo
360.101 348.683 362.229 346.552 364.85 346.552 cv
366.658 346.552 368.232 347.567 369.034 349.06 cv
368.379 347.021 366.464 345.54 364.214 345.54 cv
361.419 345.54 359.148 347.811 359.148 350.604 cv
359.148 352.702 360.436 354.509 362.255 355.276 cv
360.962 354.426 360.101 352.962 360.101 351.3 cv
cp
1 1 1 rgb
f
366.694 350.604 mo
366.694 351.976 365.584 353.085 364.214 353.085 cv
362.844 353.085 361.733 351.976 361.733 350.604 cv
361.733 349.233 362.844 348.123 364.214 348.123 cv
365.584 348.123 366.694 349.233 366.694 350.604 cv
cp
f
278.105 304.654 mo
273.272 304.654 269.037 302.087 266.691 298.241 cv
266.691 284.348 li
269.037 280.503 273.272 277.935 278.105 277.935 cv
285.486 277.935 291.467 283.917 291.467 291.294 cv
291.467 298.673 285.486 304.654 278.105 304.654 cv
level3{
gsave
clp
[13.3604 0 0 13.3604 278.106 291.294 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3604 0 0 13.3604 278.106 291.294 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
266.691 298.241 mo
265.457 296.217 264.745 293.839 264.745 291.294 cv
264.745 288.75 265.457 286.372 266.691 284.348 cv
266.691 298.241 li
level3{
gsave
clp
[13.3604 0 0 13.3604 278.106 291.294 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3604 0 0 13.3604 278.106 291.294 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
281.631 303.304 mo
277.275 303.304 273.732 299.724 273.732 295.319 cv
273.732 290.917 277.275 287.337 281.631 287.337 cv
285.982 287.337 289.527 290.917 289.527 295.319 cv
289.527 299.724 285.982 303.304 281.631 303.304 cv
cp
0 .368627 .341176 rgb
f
286.928 295.119 mo
286.928 298.27 284.375 300.823 281.228 300.823 cv
279.806 300.823 276.188 299.243 276.188 299.243 cv
276.188 299.243 274.854 296 274.854 294.451 cv
274.854 291.299 277.406 288.747 280.554 288.747 cv
282.763 288.747 285.596 290.021 285.596 290.021 cv
285.596 290.021 286.631 293.284 286.69 293.479 cv
286.847 294 286.928 294.549 286.928 295.119 cv
cp
.878431 .396078 0 rgb
f
285.885 292.097 mo
285.885 296.23 282.535 299.577 278.404 299.577 cv
274.277 299.577 270.927 296.23 270.927 292.097 cv
270.927 287.968 274.277 284.619 278.404 284.619 cv
282.535 284.619 285.885 287.968 285.885 292.097 cv
cp
1 .768627 0 rgb
f
278.404 297.162 mo
275.612 297.162 273.343 294.891 273.343 292.097 cv
273.343 289.306 275.612 287.034 278.404 287.034 cv
281.2 287.034 283.47 289.306 283.47 292.097 cv
283.47 294.891 281.2 297.162 278.404 297.162 cv
cp
1 .917647 .501961 rgb
f
274.293 292.794 mo
274.293 290.174 276.422 288.046 279.041 288.046 cv
280.851 288.046 282.427 289.06 283.225 290.554 cv
282.572 288.515 280.661 287.034 278.404 287.034 cv
275.612 287.034 273.343 289.306 273.343 292.097 cv
273.343 294.197 274.626 296 276.451 296.768 cv
275.15 295.921 274.293 294.457 274.293 292.794 cv
cp
1 1 1 rgb
f
280.889 292.097 mo
280.889 293.469 279.775 294.58 278.404 294.58 cv
277.035 294.58 275.925 293.469 275.925 292.097 cv
275.925 290.727 277.035 289.615 278.404 289.615 cv
279.775 289.615 280.889 290.727 280.889 292.097 cv
cp
f
379.135 304.654 mo
373.884 304.654 369.342 301.627 367.157 297.223 cv
367.157 285.366 li
369.342 280.962 373.884 277.935 379.135 277.935 cv
386.51 277.935 392.495 283.917 392.495 291.294 cv
392.495 298.673 386.51 304.654 379.135 304.654 cv
level3{
gsave
clp
[13.3604 0 0 13.3604 379.134 291.294 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3604 0 0 13.3604 379.134 291.294 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
367.157 297.223 mo
366.271 295.436 365.773 293.423 365.773 291.294 cv
365.773 289.165 366.271 287.153 367.157 285.366 cv
367.157 297.223 li
level3{
gsave
clp
[13.3604 0 0 13.3604 379.134 291.294 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3604 0 0 13.3604 379.134 291.294 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
382.654 303.304 mo
378.302 303.304 374.76 299.724 374.76 295.319 cv
374.76 290.917 378.302 287.337 382.654 287.337 cv
387.008 287.337 390.552 290.917 390.552 295.319 cv
390.552 299.724 387.008 303.304 382.654 303.304 cv
cp
0 .368627 .341176 rgb
f
387.954 295.119 mo
387.954 298.27 385.398 300.823 382.251 300.823 cv
380.831 300.823 377.213 299.243 377.213 299.243 cv
377.213 299.243 375.877 296 375.877 294.451 cv
375.877 291.299 378.43 288.747 381.581 288.747 cv
383.789 288.747 386.619 290.021 386.619 290.021 cv
386.619 290.021 387.658 293.284 387.714 293.479 cv
387.87 294 387.954 294.549 387.954 295.119 cv
cp
.878431 .396078 0 rgb
f
386.912 292.097 mo
386.912 296.23 383.562 299.577 379.435 299.577 cv
375.302 299.577 371.952 296.23 371.952 292.097 cv
371.952 287.968 375.302 284.619 379.435 284.619 cv
383.562 284.619 386.912 287.968 386.912 292.097 cv
cp
1 .768627 0 rgb
f
379.435 297.162 mo
376.642 297.162 374.369 294.891 374.369 292.097 cv
374.369 289.306 376.642 287.034 379.435 287.034 cv
382.227 287.034 384.496 289.306 384.496 292.097 cv
384.496 294.891 382.227 297.162 379.435 297.162 cv
cp
1 .917647 .501961 rgb
f
375.318 292.794 mo
375.318 290.174 377.45 288.046 380.067 288.046 cv
381.877 288.046 383.452 289.06 384.254 290.554 cv
383.6 288.515 381.688 287.034 379.435 287.034 cv
376.642 287.034 374.369 289.306 374.369 292.097 cv
374.369 294.197 375.652 296 377.476 296.768 cv
376.18 295.921 375.318 294.457 375.318 292.794 cv
cp
1 1 1 rgb
f
381.915 292.097 mo
381.915 293.469 380.803 294.58 379.435 294.58 cv
378.062 294.58 376.951 293.469 376.951 292.097 cv
376.951 290.727 378.062 289.615 379.435 289.615 cv
380.803 289.615 381.915 290.727 381.915 292.097 cv
cp
f
278.105 271.569 mo
273.272 271.569 269.037 269.002 266.691 265.156 cv
266.691 251.262 li
269.037 247.416 273.272 244.848 278.105 244.848 cv
285.486 244.848 291.467 250.83 291.467 258.209 cv
291.467 265.589 285.486 271.569 278.105 271.569 cv
level3{
gsave
clp
[13.3608 0 0 13.3608 278.106 258.208 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3608 0 0 13.3608 278.106 258.208 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
266.691 265.156 mo
265.457 263.132 264.745 260.754 264.745 258.209 cv
264.745 255.664 265.457 253.286 266.691 251.262 cv
266.691 265.156 li
level3{
gsave
clp
[13.3608 0 0 13.3608 278.106 258.208 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3608 0 0 13.3608 278.106 258.208 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
281.631 270.218 mo
277.275 270.218 273.732 266.637 273.732 262.235 cv
273.732 257.835 277.275 254.255 281.631 254.255 cv
285.982 254.255 289.527 257.835 289.527 262.235 cv
289.527 266.637 285.982 270.218 281.631 270.218 cv
cp
0 .368627 .341176 rgb
f
286.928 262.035 mo
286.928 265.185 284.375 267.737 281.228 267.737 cv
279.806 267.737 276.188 266.159 276.188 266.159 cv
276.188 266.159 274.854 262.916 274.854 261.364 cv
274.854 258.215 277.406 255.661 280.554 255.661 cv
282.763 255.661 285.596 256.938 285.596 256.938 cv
285.596 256.938 286.631 260.199 286.69 260.397 cv
286.847 260.914 286.928 261.465 286.928 262.035 cv
cp
.878431 .396078 0 rgb
f
285.885 259.016 mo
285.885 263.146 282.535 266.492 278.404 266.492 cv
274.277 266.492 270.927 263.146 270.927 259.016 cv
270.927 254.884 274.277 251.534 278.404 251.534 cv
282.535 251.534 285.885 254.884 285.885 259.016 cv
cp
1 .768627 0 rgb
f
278.404 264.076 mo
275.612 264.076 273.343 261.805 273.343 259.016 cv
273.343 256.221 275.612 253.949 278.404 253.949 cv
281.2 253.949 283.47 256.221 283.47 259.016 cv
283.47 261.805 281.2 264.076 278.404 264.076 cv
cp
1 .917647 .501961 rgb
f
274.293 259.71 mo
274.293 257.09 276.422 254.959 279.041 254.959 cv
280.851 254.959 282.427 255.978 283.225 257.467 cv
282.572 255.431 280.661 253.949 278.404 253.949 cv
275.612 253.949 273.343 256.221 273.343 259.016 cv
273.343 261.114 274.626 262.916 276.451 263.683 cv
275.15 262.833 274.293 261.372 274.293 259.71 cv
cp
1 1 1 rgb
f
280.889 259.016 mo
280.889 260.384 279.775 261.497 278.404 261.497 cv
277.035 261.497 275.925 260.384 275.925 259.016 cv
275.925 257.644 277.035 256.53 278.404 256.53 cv
279.775 256.53 280.889 257.644 280.889 259.016 cv
cp
f
384.428 216.544 mo
373.84 216.544 li
375.464 215.843 377.253 215.454 379.135 215.454 cv
381.015 215.454 382.805 215.843 384.428 216.544 cv
level3{
gsave
clp
[13.3601 0 0 13.3601 379.134 228.813 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3601 0 0 13.3601 379.134 228.813 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
379.135 242.173 mo
373.884 242.173 369.342 239.146 367.157 234.743 cv
367.157 222.886 li
367.749 221.694 368.513 220.602 369.418 219.644 cv
388.85 219.644 li
391.11 222.037 392.495 225.264 392.495 228.814 cv
392.495 236.193 386.513 242.173 379.135 242.173 cv
level3{
gsave
clp
[13.3601 0 0 13.3601 379.134 228.813 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3601 0 0 13.3601 379.134 228.813 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
367.157 234.743 mo
366.271 232.957 365.773 230.944 365.773 228.814 cv
365.773 226.686 366.271 224.673 367.157 222.886 cv
367.157 234.743 li
388.85 219.644 mo
369.418 219.644 li
370.657 218.332 372.159 217.27 373.84 216.544 cv
384.428 216.544 li
386.108 217.27 387.611 218.332 388.85 219.644 cv
level3{
gsave
clp
[13.3601 0 0 13.3601 379.134 228.813 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3601 0 0 13.3601 379.134 228.813 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
382.654 240.821 mo
378.302 240.821 374.76 237.242 374.76 232.84 cv
374.76 228.438 378.302 224.858 382.654 224.858 cv
387.01 224.858 390.552 228.438 390.552 232.84 cv
390.552 237.242 387.01 240.821 382.654 240.821 cv
cp
0 .368627 .341176 rgb
f
387.954 232.639 mo
387.954 235.789 385.402 238.341 382.251 238.341 cv
380.831 238.341 377.213 236.763 377.213 236.763 cv
377.213 236.763 375.877 233.521 375.877 231.968 cv
375.877 228.82 378.43 226.267 381.581 226.267 cv
383.789 226.267 386.619 227.54 386.619 227.54 cv
386.619 227.54 387.658 230.803 387.717 230.998 cv
387.872 231.52 387.954 232.069 387.954 232.639 cv
cp
.878431 .396078 0 rgb
f
386.912 229.618 mo
386.912 233.748 383.562 237.098 379.435 237.098 cv
375.302 237.098 371.955 233.748 371.955 229.618 cv
371.955 225.487 375.302 222.138 379.435 222.138 cv
383.562 222.138 386.912 225.487 386.912 229.618 cv
cp
1 .768627 0 rgb
f
379.435 234.684 mo
376.642 234.684 374.369 232.412 374.369 229.618 cv
374.369 226.826 376.642 224.555 379.435 224.555 cv
382.227 224.555 384.496 226.826 384.496 229.618 cv
384.496 232.412 382.227 234.684 379.435 234.684 cv
cp
1 .917647 .501961 rgb
f
375.318 230.313 mo
375.318 227.695 377.45 225.565 380.067 225.565 cv
381.877 225.565 383.452 226.582 384.254 228.072 cv
383.6 226.035 381.688 224.555 379.435 224.555 cv
376.642 224.555 374.369 226.826 374.369 229.618 cv
374.369 231.717 375.652 233.521 377.478 234.288 cv
376.18 233.439 375.318 231.975 375.318 230.313 cv
cp
1 1 1 rgb
f
381.915 229.618 mo
381.915 230.99 380.803 232.099 379.435 232.099 cv
378.064 232.099 376.951 230.99 376.951 229.618 cv
376.951 228.247 378.064 227.137 379.435 227.137 cv
380.803 227.137 381.915 228.247 381.915 229.618 cv
cp
f
283.4 216.544 mo
272.813 216.544 li
274.436 215.843 276.225 215.454 278.105 215.454 cv
279.987 215.454 281.777 215.843 283.4 216.544 cv
level3{
gsave
clp
[13.3601 0 0 13.3601 278.106 228.813 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3601 0 0 13.3601 278.106 228.813 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
278.105 242.173 mo
273.272 242.173 269.037 239.606 266.691 235.761 cv
266.691 221.868 li
267.18 221.068 267.75 220.322 268.391 219.644 cv
287.822 219.644 li
290.082 222.037 291.467 225.264 291.467 228.814 cv
291.467 236.193 285.486 242.173 278.105 242.173 cv
level3{
gsave
clp
[13.3601 0 0 13.3601 278.106 228.813 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3601 0 0 13.3601 278.106 228.813 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
266.691 235.761 mo
265.457 233.737 264.745 231.359 264.745 228.814 cv
264.745 226.27 265.457 223.893 266.691 221.868 cv
266.691 235.761 li
287.822 219.644 mo
268.391 219.644 li
269.63 218.332 271.132 217.27 272.813 216.544 cv
283.4 216.544 li
285.081 217.27 286.583 218.332 287.822 219.644 cv
level3{
gsave
clp
[13.3601 0 0 13.3601 278.106 228.813 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3601 0 0 13.3601 278.106 228.813 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
281.631 240.821 mo
277.275 240.821 273.732 237.242 273.732 232.84 cv
273.732 228.438 277.275 224.858 281.631 224.858 cv
285.982 224.858 289.527 228.438 289.527 232.84 cv
289.527 237.242 285.982 240.821 281.631 240.821 cv
cp
0 .368627 .341176 rgb
f
286.928 232.639 mo
286.928 235.789 284.375 238.341 281.228 238.341 cv
279.806 238.341 276.188 236.763 276.188 236.763 cv
276.188 236.763 274.854 233.521 274.854 231.968 cv
274.854 228.82 277.406 226.267 280.554 226.267 cv
282.763 226.267 285.596 227.54 285.596 227.54 cv
285.596 227.54 286.631 230.803 286.69 230.998 cv
286.847 231.52 286.928 232.069 286.928 232.639 cv
cp
.878431 .396078 0 rgb
f
285.885 229.618 mo
285.885 233.748 282.535 237.098 278.404 237.098 cv
274.277 237.098 270.927 233.748 270.927 229.618 cv
270.927 225.487 274.277 222.138 278.404 222.138 cv
282.535 222.138 285.885 225.487 285.885 229.618 cv
cp
1 .768627 0 rgb
f
278.404 234.684 mo
275.612 234.684 273.343 232.412 273.343 229.618 cv
273.343 226.826 275.612 224.555 278.404 224.555 cv
281.2 224.555 283.47 226.826 283.47 229.618 cv
283.47 232.412 281.2 234.684 278.404 234.684 cv
cp
1 .917647 .501961 rgb
f
274.293 230.313 mo
274.293 227.695 276.422 225.565 279.041 225.565 cv
280.851 225.565 282.427 226.582 283.225 228.072 cv
282.572 226.035 280.661 224.555 278.404 224.555 cv
275.612 224.555 273.343 226.826 273.343 229.618 cv
273.343 231.717 274.626 233.521 276.451 234.288 cv
275.15 233.439 274.293 231.975 274.293 230.313 cv
cp
1 1 1 rgb
f
280.889 229.618 mo
280.889 230.99 279.775 232.099 278.404 232.099 cv
277.035 232.099 275.925 230.99 275.925 229.618 cv
275.925 228.247 277.035 227.137 278.404 227.137 cv
279.775 227.137 280.889 228.247 280.889 229.618 cv
cp
f
278.105 337.837 mo
274.155 337.837 270.603 336.12 268.156 333.392 cv
267.188 328.499 266.699 323.21 266.692 317.53 cv
269.038 313.683 273.273 311.114 278.105 311.114 cv
285.486 311.114 291.467 317.099 291.467 324.476 cv
291.467 331.855 285.486 337.837 278.105 337.837 cv
level3{
gsave
clp
[13.3611 0 0 13.3611 278.106 324.476 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3611 0 0 13.3611 278.106 324.476 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
268.156 333.392 mo
266.035 331.027 264.745 327.902 264.745 324.476 cv
264.745 321.932 265.457 319.554 266.692 317.53 cv
266.699 323.21 267.188 328.499 268.156 333.392 cv
level3{
gsave
clp
[13.3611 0 0 13.3611 278.106 324.476 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3611 0 0 13.3611 278.106 324.476 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
281.631 336.483 mo
277.275 336.483 273.732 332.903 273.732 328.501 cv
273.732 324.1 277.275 320.521 281.631 320.521 cv
285.982 320.521 289.527 324.1 289.527 328.501 cv
289.527 332.903 285.982 336.483 281.631 336.483 cv
cp
0 .368627 .341176 rgb
f
286.928 328.302 mo
286.928 331.451 284.375 334.003 281.228 334.003 cv
279.806 334.003 276.189 332.426 276.189 332.426 cv
276.189 332.426 274.854 329.184 274.854 327.631 cv
274.854 324.48 277.406 321.928 280.554 321.928 cv
282.766 321.928 285.596 323.204 285.596 323.204 cv
285.596 323.204 286.631 326.466 286.69 326.661 cv
286.847 327.181 286.928 327.731 286.928 328.302 cv
cp
.878431 .396078 0 rgb
f
285.887 325.282 mo
285.887 329.41 282.538 332.759 278.404 332.759 cv
274.277 332.759 270.929 329.41 270.929 325.282 cv
270.929 321.148 274.277 317.8 278.404 317.8 cv
282.538 317.8 285.887 321.148 285.887 325.282 cv
cp
1 .768627 0 rgb
f
278.404 330.343 mo
275.612 330.343 273.343 328.071 273.343 325.282 cv
273.343 322.488 275.612 320.217 278.404 320.217 cv
281.2 320.217 283.47 322.488 283.47 325.282 cv
283.47 328.071 281.2 330.343 278.404 330.343 cv
cp
1 .917647 .501961 rgb
f
274.295 325.977 mo
274.295 323.358 276.425 321.228 279.044 321.228 cv
280.851 321.228 282.427 322.244 283.225 323.732 cv
282.572 321.696 280.661 320.217 278.404 320.217 cv
275.612 320.217 273.343 322.488 273.343 325.282 cv
273.343 327.377 274.626 329.184 276.451 329.949 cv
275.152 329.1 274.295 327.639 274.295 325.977 cv
cp
1 1 1 rgb
f
280.889 325.282 mo
280.889 326.652 279.775 327.763 278.404 327.763 cv
277.035 327.763 275.927 326.652 275.927 325.282 cv
275.927 323.91 277.035 322.799 278.404 322.799 cv
279.775 322.799 280.889 323.91 280.889 325.282 cv
cp
f
294.07 363.162 mo
286.692 363.162 280.71 357.179 280.71 349.798 cv
280.71 342.422 286.692 336.441 294.07 336.441 cv
301.451 336.441 307.432 342.422 307.432 349.798 cv
307.432 357.179 301.451 363.162 294.07 363.162 cv
level3{
gsave
clp
[13.3606 0 0 13.3606 294.071 349.802 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3606 0 0 13.3606 294.071 349.802 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
297.592 361.81 mo
293.24 361.81 289.695 358.228 289.695 353.827 cv
289.695 349.427 293.24 345.846 297.592 345.846 cv
301.947 345.846 305.486 349.427 305.486 353.827 cv
305.486 358.228 301.947 361.81 297.592 361.81 cv
cp
0 .368627 .341176 rgb
f
302.893 353.626 mo
302.893 356.776 300.337 359.329 297.189 359.329 cv
295.768 359.329 292.151 357.749 292.151 357.749 cv
292.151 357.749 290.813 354.509 290.813 352.955 cv
290.813 349.804 293.366 347.251 296.517 347.251 cv
298.726 347.251 301.555 348.527 301.555 348.527 cv
301.555 348.527 302.594 351.788 302.652 351.986 cv
302.809 352.506 302.893 353.058 302.893 353.626 cv
cp
.878431 .396078 0 rgb
f
301.849 350.604 mo
301.849 354.735 298.5 358.085 294.369 358.085 cv
290.237 358.085 286.891 354.735 286.891 350.604 cv
286.891 346.475 290.237 343.126 294.369 343.126 cv
298.5 343.126 301.849 346.475 301.849 350.604 cv
cp
1 .768627 0 rgb
f
294.369 355.669 mo
291.574 355.669 289.308 353.396 289.308 350.604 cv
289.308 347.811 291.574 345.54 294.369 345.54 cv
297.162 345.54 299.433 347.811 299.433 350.604 cv
299.433 353.396 297.162 355.669 294.369 355.669 cv
cp
1 .917647 .501961 rgb
f
290.255 351.3 mo
290.255 348.683 292.387 346.552 295.004 346.552 cv
296.813 346.552 298.389 347.567 299.19 349.06 cv
298.534 347.021 296.623 345.54 294.369 345.54 cv
291.574 345.54 289.308 347.811 289.308 350.604 cv
289.308 352.702 290.588 354.509 292.414 355.276 cv
291.114 354.426 290.255 352.962 290.255 351.3 cv
cp
1 1 1 rgb
f
296.85 350.604 mo
296.85 351.976 295.74 353.085 294.369 353.085 cv
293 353.085 291.887 351.976 291.887 350.604 cv
291.887 349.233 293 348.123 294.369 348.123 cv
295.74 348.123 296.85 349.233 296.85 350.604 cv
cp
f
330.036 346.946 mo
329.996 346.946 329.955 346.946 329.916 346.946 cv
329.902 346.946 329.889 346.946 329.875 346.946 cv
329.849 346.946 329.823 346.946 329.796 346.946 cv
329.779 346.946 329.761 346.946 329.743 346.946 cv
329.721 346.946 329.7 346.945 329.678 346.945 cv
329.658 346.945 329.637 346.945 329.617 346.945 cv
329.599 346.945 329.58 346.945 329.562 346.944 cv
329.538 346.944 329.515 346.944 329.491 346.944 cv
329.476 346.944 329.461 346.944 329.446 346.943 cv
329.422 346.943 329.396 346.943 329.371 346.943 cv
329.358 346.942 329.344 346.942 329.332 346.942 cv
329.304 346.942 329.277 346.941 329.25 346.941 cv
329.24 346.941 329.232 346.941 329.222 346.941 cv
329.191 346.94 329.16 346.94 329.129 346.939 cv
329.126 346.939 329.123 346.939 329.12 346.939 cv
326.532 346.898 324.091 346.683 321.796 346.294 cv
323.91 344.891 326.448 344.073 329.176 344.073 cv
332.041 344.073 334.695 344.976 336.87 346.511 cv
334.711 346.801 332.432 346.946 330.036 346.946 cv
level3{
gsave
clp
[13.3594 0 0 13.3594 329.174 357.434 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3594 0 0 13.3594 329.174 357.434 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
329.176 370.793 mo
321.795 370.793 315.814 364.813 315.814 357.433 cv
315.814 353.807 317.259 350.518 319.605 348.111 cv
323.571 349.401 328.081 350.046 333.138 350.046 cv
335.546 350.046 337.834 349.9 340.002 349.607 cv
341.594 351.806 342.533 354.51 342.533 357.433 cv
342.533 364.813 336.554 370.793 329.176 370.793 cv
330.036 346.946 mo
329.996 346.946 329.955 346.946 329.916 346.946 cv
329.955 346.946 329.996 346.946 330.036 346.946 cv
332.432 346.946 334.711 346.801 336.87 346.511 cv
336.87 346.511 li
334.711 346.801 332.432 346.946 330.036 346.946 cv
329.875 346.946 mo
329.849 346.946 329.823 346.946 329.796 346.946 cv
329.823 346.946 329.849 346.946 329.875 346.946 cv
329.743 346.946 mo
329.721 346.946 329.7 346.945 329.678 346.945 cv
329.7 346.945 329.721 346.946 329.743 346.946 cv
329.617 346.945 mo
329.598 346.945 329.58 346.945 329.562 346.944 cv
329.58 346.945 329.599 346.945 329.617 346.945 cv
329.491 346.944 mo
329.477 346.944 329.461 346.944 329.446 346.943 cv
329.461 346.944 329.476 346.944 329.491 346.944 cv
329.371 346.943 mo
329.358 346.942 329.345 346.942 329.332 346.942 cv
329.344 346.942 329.358 346.942 329.371 346.943 cv
329.25 346.941 mo
329.24 346.941 329.232 346.941 329.222 346.941 cv
329.232 346.941 329.24 346.941 329.25 346.941 cv
329.129 346.939 mo
329.126 346.939 329.123 346.939 329.12 346.939 cv
329.123 346.939 329.126 346.939 329.129 346.939 cv
level3{
gsave
clp
[13.3594 0 0 13.3594 329.174 357.434 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3594 0 0 13.3594 329.174 357.434 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
333.138 350.046 mo
328.081 350.046 323.571 349.401 319.605 348.111 cv
320.268 347.431 321.002 346.821 321.796 346.294 cv
324.091 346.683 326.532 346.898 329.12 346.939 cv
329.123 346.939 329.126 346.939 329.129 346.939 cv
329.16 346.94 329.191 346.94 329.222 346.941 cv
329.232 346.941 329.24 346.941 329.25 346.941 cv
329.277 346.941 329.304 346.942 329.332 346.942 cv
329.345 346.942 329.358 346.942 329.371 346.943 cv
329.396 346.943 329.422 346.943 329.446 346.943 cv
329.461 346.944 329.477 346.944 329.491 346.944 cv
329.515 346.944 329.538 346.944 329.562 346.944 cv
329.58 346.945 329.598 346.945 329.617 346.945 cv
329.637 346.945 329.658 346.945 329.678 346.945 cv
329.7 346.945 329.721 346.946 329.743 346.946 cv
329.761 346.946 329.779 346.946 329.796 346.946 cv
329.823 346.946 329.849 346.946 329.875 346.946 cv
329.889 346.946 329.902 346.946 329.916 346.946 cv
329.955 346.946 329.996 346.946 330.036 346.946 cv
332.432 346.946 334.711 346.801 336.87 346.511 cv
338.077 347.363 339.136 348.41 340.002 349.607 cv
337.834 349.9 335.546 350.046 333.138 350.046 cv
level3{
gsave
clp
[13.3594 0 0 13.3594 329.174 357.434 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[13.3594 0 0 13.3594 329.174 357.434 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
332.698 369.44 mo
328.345 369.44 324.801 365.861 324.801 361.459 cv
324.801 357.058 328.345 353.479 332.698 353.479 cv
337.05 353.479 340.593 357.058 340.593 361.459 cv
340.593 365.861 337.05 369.44 332.698 369.44 cv
cp
0 .368627 .341176 rgb
f
337.997 361.258 mo
337.997 364.408 335.445 366.961 332.294 366.961 cv
330.872 366.961 327.254 365.382 327.254 365.382 cv
327.254 365.382 325.918 362.14 325.918 360.59 cv
325.918 357.438 328.473 354.885 331.622 354.885 cv
333.83 354.885 336.662 356.159 336.662 356.159 cv
336.662 356.159 337.695 359.422 337.755 359.621 cv
337.911 360.139 337.997 360.688 337.997 361.258 cv
cp
.878431 .396078 0 rgb
f
336.953 358.238 mo
336.953 362.369 333.605 365.716 329.476 365.716 cv
325.342 365.716 321.996 362.369 321.996 358.238 cv
321.996 354.108 325.342 350.757 329.476 350.757 cv
333.605 350.757 336.953 354.108 336.953 358.238 cv
cp
1 .768627 0 rgb
f
329.476 363.302 mo
326.683 363.302 324.41 361.031 324.41 358.238 cv
324.41 355.445 326.683 353.173 329.476 353.173 cv
332.268 353.173 334.537 355.445 334.537 358.238 cv
334.537 361.031 332.268 363.302 329.476 363.302 cv
cp
1 .917647 .501961 rgb
f
325.359 358.934 mo
325.359 356.315 327.489 354.185 330.11 354.185 cv
331.915 354.185 333.493 355.199 334.295 356.691 cv
333.643 354.656 331.728 353.173 329.476 353.173 cv
326.683 353.173 324.41 355.445 324.41 358.238 cv
324.41 360.337 325.693 362.14 327.519 362.907 cv
326.221 362.06 325.359 360.596 325.359 358.934 cv
cp
1 1 1 rgb
f
331.955 358.238 mo
331.955 359.609 330.846 360.719 329.476 360.719 cv
328.104 360.719 326.991 359.609 326.991 358.238 cv
326.991 356.868 328.104 355.757 329.476 355.757 cv
330.846 355.757 331.955 356.868 331.955 358.238 cv
cp
f
575.818 417.646 mo
487.93 417.646 li
461.742 390.414 li
549.633 390.414 li
563.635 390.414 575.393 386.386 584.577 378.44 cv
593.986 370.3 598.758 358.552 598.758 343.528 cv
598.758 333.407 595.834 324.48 590.065 316.993 cv
586.722 312.665 582.782 309.259 578.283 306.8 cv
578.073 306.397 577.856 305.997 577.633 305.6 cv
581.231 303.1 584.414 299.965 587.15 296.218 cv
592.17 289.342 594.711 281.116 594.711 271.766 cv
594.711 263.563 592.695 256.174 588.71 249.787 cv
587.955 248.579 586.909 247.125 585.667 245.528 cv
585.785 245.626 585.908 245.735 586.035 245.855 cv
592.505 251.934 610.944 270.694 614.896 277.022 cv
618.879 283.409 620.898 290.801 620.898 299 cv
620.898 308.352 618.355 316.577 613.338 323.448 cv
610.418 327.448 606.995 330.748 603.1 333.324 cv
608.173 335.817 612.574 339.466 616.252 344.23 cv
622.022 351.718 624.945 360.643 624.945 370.764 cv
624.945 385.788 620.174 397.531 610.761 405.674 cv
601.579 413.622 589.821 417.646 575.818 417.646 cv
528.809 338.116 mo
501.212 338.116 li
501.212 325.953 li
542.814 325.953 li
542.821 325.953 542.827 325.953 542.833 325.953 cv
542.491 329.611 541.288 332.386 539.184 334.392 cv
536.551 336.899 533.156 338.116 528.809 338.116 cv
525.183 274.105 mo
501.212 274.105 li
501.212 265.706 li
538.483 265.706 li
537.978 267.654 537.002 269.315 535.535 270.735 cv
533.196 273.004 529.81 274.105 525.183 274.105 cv
.901961 .745098 .623529 rgb
f
540.899 290.443 mo
545.525 290.443 548.909 289.342 551.25 287.074 cv
553.506 284.886 554.603 282.127 554.603 278.633 cv
554.603 274.205 553.59 271.022 551.499 268.898 cv
549.382 266.754 546.399 265.706 542.394 265.706 cv
501.212 265.706 li
501.212 290.443 li
540.899 290.443 li
544.52 354.458 mo
548.869 354.458 552.266 353.237 554.894 350.73 cv
557.422 348.324 558.646 344.811 558.646 339.985 cv
558.646 335.723 557.403 332.406 554.829 329.838 cv
552.238 327.262 548.199 325.953 542.814 325.953 cv
501.212 325.953 li
501.212 354.458 li
544.52 354.458 li
461.742 390.414 mo
446.028 374.073 li
461.742 229.755 li
549.633 229.755 li
557.899 229.755 560.248 220.661 566.326 225.355 cv
572.842 230.385 584.754 243.461 588.71 249.787 cv
592.695 256.174 594.711 263.563 594.711 271.766 cv
594.711 281.116 592.17 289.342 587.15 296.218 cv
584.233 300.213 580.808 303.513 576.912 306.089 cv
581.985 308.585 586.387 312.23 590.065 316.993 cv
595.834 324.48 598.758 333.407 598.758 343.528 cv
598.758 358.552 593.986 370.3 584.577 378.44 cv
575.393 386.386 563.635 390.414 549.633 390.414 cv
461.742 390.414 li
.670588 .254902 0 rgb
f
525.183 274.105 mo
529.81 274.105 533.196 273.004 535.535 270.735 cv
537.795 268.547 538.891 265.787 538.891 262.288 cv
538.891 257.863 537.874 254.683 535.784 252.561 cv
533.668 250.413 530.687 249.367 526.677 249.367 cv
485.501 249.367 li
485.501 274.105 li
525.183 274.105 li
528.809 338.116 mo
533.156 338.116 536.551 336.899 539.184 334.392 cv
541.71 331.984 542.936 328.468 542.936 323.646 cv
542.936 319.384 541.687 316.064 539.117 313.497 cv
536.526 310.923 532.486 309.612 527.099 309.612 cv
485.501 309.612 li
485.501 338.116 li
528.809 338.116 li
446.028 374.073 mo
446.028 213.414 li
533.918 213.414 li
542.186 213.414 549.829 215.165 556.625 218.619 cv
563.537 222.131 569.043 227.12 572.998 233.45 cv
576.981 239.832 578.998 247.226 578.998 255.425 cv
578.998 264.779 576.455 273.004 571.436 279.877 cv
568.519 283.876 565.094 287.175 561.196 289.753 cv
566.274 292.246 570.676 295.89 574.35 300.652 cv
580.121 308.14 583.046 317.066 583.046 327.19 cv
583.046 342.212 578.273 353.959 568.862 362.103 cv
559.681 370.042 547.922 374.073 533.918 374.073 cv
446.028 374.073 li
1 .87451 .529412 rgb
f
528.809 342.472 mo
534.201 342.472 538.602 340.848 542.014 337.6 cv
545.42 334.356 547.123 329.704 547.123 323.646 cv
547.123 318.185 545.42 313.756 542.014 310.356 cv
538.602 306.963 533.63 305.257 527.099 305.257 cv
481.312 305.257 li
481.312 342.472 li
528.809 342.472 li
525.183 278.459 mo
530.863 278.459 535.268 276.947 538.391 273.922 cv
541.51 270.895 543.078 267.019 543.078 262.288 cv
543.078 256.681 541.618 252.397 538.711 249.444 cv
535.8 246.489 531.789 245.012 526.677 245.012 cv
481.312 245.012 li
481.312 278.459 li
525.183 278.459 li
450.215 217.766 mo
533.918 217.766 li
541.586 217.766 548.539 219.354 554.793 222.532 cv
561.038 225.707 565.937 230.141 569.486 235.822 cv
573.036 241.507 574.813 248.043 574.813 255.425 cv
574.813 263.841 572.578 271.116 568.104 277.239 cv
563.629 283.371 557.912 287.619 550.959 289.977 cv
550.959 290.864 li
559.189 292.495 565.901 296.661 571.086 303.379 cv
576.263 310.1 578.856 318.039 578.856 327.19 cv
578.856 340.922 574.633 351.446 566.187 358.753 cv
557.737 366.063 546.981 369.719 533.918 369.719 cv
450.215 369.719 li
450.215 217.766 li
1 .752941 .180392 rgb
f
453.129 220.794 mo
536.829 220.794 li
544.501 220.794 551.452 222.386 557.702 225.56 cv
560.942 227.207 563.811 229.199 566.326 231.521 cv
563.201 227.857 559.36 224.854 554.793 222.532 cv
548.539 219.354 541.586 217.766 533.918 217.766 cv
450.215 217.766 li
450.215 369.719 li
453.129 369.719 li
453.129 220.794 li
.74902 .286275 0 rgb
f
555.91 292.235 mo
554.816 291.846 552.691 291.148 550.959 290.864 cv
553.895 293.893 li
560.033 295.108 565.319 297.737 569.767 301.776 cv
565.913 297.317 561.293 294.139 555.91 292.235 cv
cp
f
544.927 340.63 mo
548.332 337.382 550.037 332.733 550.037 326.676 cv
550.037 321.211 548.332 316.781 544.927 313.385 cv
544.51 312.971 544.066 312.582 543.607 312.219 cv
545.939 315.329 547.123 319.125 547.123 323.646 cv
547.123 329.704 545.42 334.356 542.014 337.6 cv
538.602 340.848 534.201 342.472 528.809 342.472 cv
481.312 342.472 li
484.224 345.5 li
531.721 345.5 li
537.112 345.5 541.513 343.875 544.927 340.63 cv
f
540.113 251.171 mo
542.077 253.988 543.078 257.684 543.078 262.288 cv
543.078 267.019 541.51 270.895 538.391 273.922 cv
535.268 276.947 530.863 278.459 525.183 278.459 cv
481.312 278.459 li
484.224 281.485 li
528.098 281.485 li
533.773 281.485 538.182 279.974 541.302 276.947 cv
544.423 273.923 545.987 270.044 545.987 265.318 cv
545.987 259.708 544.529 255.427 541.62 252.473 cv
541.15 251.995 540.642 251.57 540.113 251.171 cv
f
465.416 244.412 mo
459.361 244.412 454.305 239.948 453.129 234.008 cv
453.129 228.718 li
453.771 225.475 455.571 222.671 458.059 220.794 cv
472.778 220.794 li
475.921 223.165 477.963 227.016 477.963 231.362 cv
477.963 238.571 472.351 244.412 465.416 244.412 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 465.417 231.363 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 465.417 231.363 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
453.129 234.008 mo
452.96 233.154 452.871 232.269 452.871 231.362 cv
452.871 230.456 452.96 229.572 453.129 228.718 cv
453.129 234.008 li
472.778 220.794 mo
458.059 220.794 li
460.126 219.234 462.668 218.315 465.416 218.315 cv
468.168 218.315 470.711 219.234 472.778 220.794 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 465.417 231.363 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 465.417 231.363 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
468.727 243.094 mo
464.635 243.094 461.311 239.597 461.311 235.296 cv
461.311 230.998 464.635 227.501 468.727 227.501 cv
472.814 227.501 476.142 230.998 476.142 235.296 cv
476.142 239.597 472.814 243.094 468.727 243.094 cv
cp
.74902 .286275 0 rgb
f
473.703 235.099 mo
473.703 238.176 471.306 240.667 468.346 240.667 cv
467.011 240.667 463.614 239.13 463.614 239.13 cv
463.614 239.13 462.361 235.963 462.361 234.445 cv
462.361 231.369 464.758 228.876 467.716 228.876 cv
469.792 228.876 472.452 230.123 472.452 230.123 cv
472.452 230.123 473.419 233.308 473.477 233.501 cv
473.624 234.009 473.703 234.543 473.703 235.099 cv
cp
.878431 .396078 0 rgb
f
472.726 232.149 mo
472.726 236.183 469.579 239.453 465.698 239.453 cv
461.817 239.453 458.675 236.183 458.675 232.149 cv
458.675 228.115 461.817 224.846 465.698 224.846 cv
469.579 224.846 472.726 228.115 472.726 232.149 cv
cp
1 .768627 0 rgb
f
465.698 237.097 mo
463.077 237.097 460.945 234.878 460.945 232.149 cv
460.945 229.423 463.077 227.202 465.698 227.202 cv
468.321 227.202 470.453 229.423 470.453 232.149 cv
470.453 234.878 468.321 237.097 465.698 237.097 cv
cp
1 .917647 .501961 rgb
f
461.833 232.831 mo
461.833 230.273 463.838 228.192 466.294 228.192 cv
467.996 228.192 469.472 229.184 470.226 230.637 cv
469.615 228.649 467.815 227.202 465.698 227.202 cv
463.077 227.202 460.945 229.423 460.945 232.149 cv
460.945 234.201 462.148 235.963 463.862 236.714 cv
462.642 235.88 461.833 234.45 461.833 232.831 cv
cp
1 1 1 rgb
f
468.029 232.149 mo
468.029 233.487 466.984 234.573 465.698 234.573 cv
464.412 234.573 463.371 233.487 463.371 232.149 cv
463.371 230.81 464.412 229.725 465.698 229.725 cv
466.984 229.725 468.029 230.81 468.029 232.149 cv
cp
f
500.686 217.766 mo
494.831 217.766 li
495.77 217.533 496.75 217.409 497.758 217.409 cv
498.766 217.409 499.746 217.533 500.686 217.766 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 497.757 230.457 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 497.757 230.457 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
497.758 243.504 mo
490.83 243.504 485.211 237.662 485.211 230.455 cv
485.211 226.625 486.799 223.181 489.327 220.794 cv
506.189 220.794 li
508.717 223.181 510.305 226.625 510.305 230.455 cv
510.305 237.662 504.687 243.504 497.758 243.504 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 497.757 230.457 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 497.757 230.457 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
506.189 220.794 mo
489.327 220.794 li
490.863 219.344 492.746 218.285 494.831 217.766 cv
500.686 217.766 li
502.77 218.285 504.653 219.344 506.189 220.794 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 497.757 230.457 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 497.757 230.457 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
501.065 242.187 mo
496.977 242.187 493.652 238.688 493.652 234.389 cv
493.652 230.09 496.977 226.592 501.065 226.592 cv
505.153 226.592 508.482 230.09 508.482 234.389 cv
508.482 238.688 505.153 242.187 501.065 242.187 cv
cp
.74902 .286275 0 rgb
f
506.041 234.19 mo
506.041 237.267 503.645 239.76 500.687 239.76 cv
499.352 239.76 495.956 238.222 495.956 238.222 cv
495.956 238.222 494.703 235.055 494.703 233.537 cv
494.703 230.459 497.098 227.969 500.058 227.969 cv
502.128 227.969 504.789 229.215 504.789 229.215 cv
504.789 229.215 505.762 232.399 505.816 232.592 cv
505.963 233.099 506.041 233.638 506.041 234.19 cv
cp
.878431 .396078 0 rgb
f
505.063 231.242 mo
505.063 235.276 501.921 238.546 498.04 238.546 cv
494.16 238.546 491.016 235.276 491.016 231.242 cv
491.016 227.207 494.16 223.938 498.04 223.938 cv
501.921 223.938 505.063 227.207 505.063 231.242 cv
cp
1 .768627 0 rgb
f
498.04 236.187 mo
495.416 236.187 493.281 233.967 493.281 231.242 cv
493.281 228.514 495.416 226.293 498.04 226.293 cv
500.66 226.293 502.795 228.514 502.795 231.242 cv
502.795 233.967 500.66 236.187 498.04 236.187 cv
cp
1 .917647 .501961 rgb
f
494.178 231.922 mo
494.178 229.365 496.174 227.282 498.636 227.282 cv
500.334 227.282 501.813 228.274 502.566 229.729 cv
501.952 227.738 500.157 226.293 498.04 226.293 cv
495.416 226.293 493.281 228.514 493.281 231.242 cv
493.281 233.289 494.488 235.055 496.2 235.801 cv
494.984 234.973 494.178 233.547 494.178 231.922 cv
cp
1 1 1 rgb
f
500.371 231.242 mo
500.371 232.583 499.327 233.668 498.04 233.668 cv
496.75 233.668 495.709 232.583 495.709 231.242 cv
495.709 229.905 496.75 228.815 498.04 228.815 cv
499.327 228.815 500.371 229.905 500.371 231.242 cv
cp
f
531.342 217.766 mo
525.486 217.766 li
526.426 217.533 527.406 217.409 528.415 217.409 cv
529.423 217.409 530.403 217.533 531.342 217.766 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 528.416 230.457 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 528.416 230.457 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
528.415 243.504 mo
521.481 243.504 515.869 237.662 515.869 230.455 cv
515.869 226.625 517.455 223.181 519.983 220.794 cv
536.829 220.794 li
536.835 220.794 536.84 220.794 536.846 220.794 cv
539.375 223.181 540.963 226.625 540.963 230.455 cv
540.963 237.662 535.343 243.504 528.415 243.504 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 528.416 230.457 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 528.416 230.457 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
536.846 220.794 mo
536.84 220.794 536.835 220.794 536.829 220.794 cv
519.983 220.794 li
521.518 219.344 523.401 218.285 525.486 217.766 cv
531.342 217.766 li
533.427 218.285 535.31 219.344 536.846 220.794 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 528.416 230.457 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 528.416 230.457 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
531.721 242.187 mo
527.633 242.187 524.303 238.688 524.303 234.389 cv
524.303 230.09 527.633 226.592 531.721 226.592 cv
535.81 226.592 539.135 230.09 539.135 234.389 cv
539.135 238.688 535.81 242.187 531.721 242.187 cv
cp
.74902 .286275 0 rgb
f
536.699 234.19 mo
536.699 237.267 534.297 239.76 531.344 239.76 cv
530.008 239.76 526.611 238.222 526.611 238.222 cv
526.611 238.222 525.354 235.055 525.354 233.537 cv
525.354 230.459 527.753 227.969 530.711 227.969 cv
532.784 227.969 535.445 229.215 535.445 229.215 cv
535.445 229.215 536.414 232.399 536.473 232.592 cv
536.617 233.099 536.699 233.638 536.699 234.19 cv
cp
.878431 .396078 0 rgb
f
535.719 231.242 mo
535.719 235.276 532.571 238.546 528.694 238.546 cv
524.816 238.546 521.67 235.276 521.67 231.242 cv
521.67 227.207 524.816 223.938 528.694 223.938 cv
532.571 223.938 535.719 227.207 535.719 231.242 cv
cp
1 .768627 0 rgb
f
528.694 236.187 mo
526.068 236.187 523.939 233.967 523.939 231.242 cv
523.939 228.514 526.068 226.293 528.694 226.293 cv
531.319 226.293 533.451 228.514 533.451 231.242 cv
533.451 233.967 531.319 236.187 528.694 236.187 cv
cp
1 .917647 .501961 rgb
f
524.832 231.922 mo
524.832 229.365 526.831 227.282 529.291 227.282 cv
530.99 227.282 532.472 228.274 533.22 229.729 cv
532.607 227.738 530.811 226.293 528.694 226.293 cv
526.068 226.293 523.939 228.514 523.939 231.242 cv
523.939 233.289 525.145 235.055 526.856 235.801 cv
525.638 234.973 524.832 233.547 524.832 231.922 cv
cp
1 1 1 rgb
f
531.024 231.242 mo
531.024 232.583 529.981 233.668 528.694 233.668 cv
527.405 233.668 526.361 232.583 526.361 231.242 cv
526.361 229.905 527.405 228.815 528.694 228.815 cv
529.981 228.815 531.024 229.905 531.024 231.242 cv
cp
f
553.656 254.064 mo
546.728 254.064 541.109 248.223 541.109 241.018 cv
541.109 233.809 546.728 227.969 553.656 227.969 cv
560.583 227.969 566.202 233.809 566.202 241.018 cv
566.202 248.223 560.583 254.064 553.656 254.064 cv
level3{
gsave
clp
[12.5462 0 0 13.0479 553.656 241.016 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5462 0 0 13.0479 553.656 241.016 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
556.964 252.743 mo
552.875 252.743 549.549 249.247 549.549 244.951 cv
549.549 240.651 552.875 237.151 556.964 237.151 cv
561.052 237.151 564.379 240.651 564.379 244.951 cv
564.379 249.247 561.052 252.743 556.964 252.743 cv
cp
.74902 .286275 0 rgb
f
561.939 244.753 mo
561.939 247.828 559.541 250.322 556.585 250.322 cv
555.248 250.322 551.854 248.78 551.854 248.78 cv
551.854 248.78 550.6 245.614 550.6 244.098 cv
550.6 241.02 552.997 238.526 555.954 238.526 cv
558.025 238.526 560.687 239.773 560.687 239.773 cv
560.687 239.773 561.658 242.954 561.717 243.149 cv
561.862 243.661 561.939 244.195 561.939 244.753 cv
cp
.878431 .396078 0 rgb
f
560.96 241.801 mo
560.96 245.836 557.817 249.108 553.935 249.108 cv
550.055 249.108 546.912 245.836 546.912 241.801 cv
546.912 237.767 550.055 234.494 553.935 234.494 cv
557.817 234.494 560.96 237.767 560.96 241.801 cv
cp
1 .768627 0 rgb
f
553.935 246.748 mo
551.313 246.748 549.179 244.529 549.179 241.801 cv
549.179 239.074 551.313 236.854 553.935 236.854 cv
556.559 236.854 558.694 239.074 558.694 241.801 cv
558.694 244.529 556.559 246.748 553.935 246.748 cv
cp
1 .917647 .501961 rgb
f
550.072 242.479 mo
550.072 239.921 552.072 237.841 554.531 237.841 cv
556.233 237.841 557.71 238.835 558.463 240.293 cv
557.848 238.302 556.052 236.854 553.935 236.854 cv
551.313 236.854 549.179 239.074 549.179 241.801 cv
549.179 243.849 550.387 245.614 552.098 246.364 cv
550.883 245.535 550.072 244.103 550.072 242.479 cv
cp
1 1 1 rgb
f
556.268 241.801 mo
556.268 243.138 555.226 244.227 553.935 244.227 cv
552.648 244.227 551.605 243.138 551.605 241.801 cv
551.605 240.465 552.648 239.378 553.935 239.378 cv
555.226 239.378 556.268 240.465 556.268 241.801 cv
cp
f
540.404 271.544 mo
540.348 271.044 540.319 270.534 540.319 270.018 cv
540.319 266.93 541.351 264.092 543.075 261.858 cv
543.076 261.927 543.077 261.997 543.077 262.067 cv
543.077 262.07 543.077 262.073 543.077 262.076 cv
543.077 262.089 543.077 262.101 543.078 262.114 cv
543.078 262.122 543.078 262.131 543.078 262.139 cv
543.078 262.149 543.078 262.159 543.078 262.17 cv
543.078 262.182 543.078 262.193 543.078 262.205 cv
543.078 262.213 543.078 262.221 543.078 262.229 cv
543.078 262.248 543.078 262.268 543.078 262.288 cv
543.078 262.288 li
543.078 265.86 542.184 268.945 540.404 271.544 cv
level3{
gsave
clp
[12.5453 0 0 13.047 552.865 270.016 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5453 0 0 13.047 552.865 270.016 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
552.868 283.064 mo
548.145 283.064 544.032 280.353 541.891 276.346 cv
544.62 273.415 545.987 269.737 545.987 265.318 cv
545.987 263.209 545.781 261.288 545.369 259.554 cv
547.461 257.931 550.056 256.97 552.868 256.97 cv
559.791 256.97 565.411 262.812 565.411 270.018 cv
565.411 277.226 559.791 283.064 552.868 283.064 cv
543.078 262.288 mo
543.078 262.268 543.078 262.248 543.078 262.229 cv
543.078 262.249 543.078 262.268 543.078 262.288 cv
543.078 262.205 mo
543.078 262.193 543.078 262.182 543.078 262.17 cv
543.078 262.181 543.078 262.193 543.078 262.205 cv
543.078 262.139 mo
543.078 262.131 543.078 262.122 543.078 262.114 cv
543.078 262.122 543.078 262.13 543.078 262.139 cv
543.077 262.076 mo
543.077 262.073 543.077 262.07 543.077 262.067 cv
543.077 262.07 543.077 262.073 543.077 262.076 cv
level3{
gsave
clp
[12.5453 0 0 13.047 552.865 270.016 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5453 0 0 13.047 552.865 270.016 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
541.891 276.346 mo
541.115 274.893 540.597 273.27 540.404 271.544 cv
542.184 268.945 543.078 265.86 543.078 262.288 cv
543.078 262.288 li
543.078 262.288 li
543.078 262.268 543.078 262.249 543.078 262.229 cv
543.078 262.221 543.078 262.213 543.078 262.205 cv
543.078 262.193 543.078 262.181 543.078 262.17 cv
543.078 262.159 543.078 262.149 543.078 262.139 cv
543.078 262.13 543.078 262.122 543.078 262.114 cv
543.077 262.101 543.077 262.089 543.077 262.076 cv
543.077 262.073 543.077 262.07 543.077 262.067 cv
543.077 261.997 543.076 261.927 543.075 261.858 cv
543.743 260.992 544.514 260.218 545.369 259.554 cv
545.781 261.288 545.987 263.209 545.987 265.318 cv
545.987 269.737 544.62 273.415 541.891 276.346 cv
level3{
gsave
clp
[12.5453 0 0 13.047 552.865 270.016 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5453 0 0 13.047 552.865 270.016 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
556.173 281.746 mo
552.083 281.746 548.757 278.251 548.757 273.948 cv
548.757 269.65 552.083 266.154 556.173 266.154 cv
560.262 266.154 563.586 269.65 563.586 273.948 cv
563.586 278.251 560.262 281.746 556.173 281.746 cv
cp
.74902 .286275 0 rgb
f
561.148 273.754 mo
561.148 276.831 558.75 279.323 555.794 279.323 cv
554.457 279.323 551.064 277.781 551.064 277.781 cv
551.064 277.781 549.809 274.619 549.809 273.101 cv
549.809 270.024 552.207 267.529 555.164 267.529 cv
557.236 267.529 559.893 268.775 559.893 268.775 cv
559.893 268.775 560.871 271.958 560.925 272.15 cv
561.071 272.659 561.148 273.196 561.148 273.754 cv
cp
.878431 .396078 0 rgb
f
560.171 270.802 mo
560.171 274.838 557.026 278.107 553.146 278.107 cv
549.264 278.107 546.121 274.838 546.121 270.802 cv
546.121 266.771 549.264 263.498 553.146 263.498 cv
557.026 263.498 560.171 266.771 560.171 270.802 cv
cp
1 .768627 0 rgb
f
553.146 275.751 mo
550.523 275.751 548.388 273.53 548.388 270.802 cv
548.388 268.075 550.523 265.857 553.146 265.857 cv
555.768 265.857 557.905 268.075 557.905 270.802 cv
557.905 273.53 555.768 275.751 553.146 275.751 cv
cp
1 .917647 .501961 rgb
f
549.283 271.48 mo
549.283 268.923 551.282 266.846 553.742 266.846 cv
555.442 266.846 556.922 267.837 557.676 269.294 cv
557.06 267.305 555.262 265.857 553.146 265.857 cv
550.523 265.857 548.388 268.075 548.388 270.802 cv
548.388 272.851 549.596 274.619 551.309 275.363 cv
550.091 274.534 549.283 273.107 549.283 271.48 cv
cp
1 1 1 rgb
f
555.476 270.802 mo
555.476 272.141 554.434 273.228 553.146 273.228 cv
551.855 273.228 550.816 272.141 550.816 270.802 cv
550.816 269.466 551.855 268.38 553.146 268.38 cv
554.434 268.38 555.476 269.466 555.476 270.802 cv
cp
f
557.59 323.128 mo
554.175 323.128 551.08 321.71 548.818 319.41 cv
548.093 317.47 547.045 315.725 545.674 314.177 cv
545.265 312.89 545.044 311.514 545.044 310.085 cv
545.044 302.878 550.66 297.034 557.59 297.034 cv
564.518 297.034 570.136 302.878 570.136 310.085 cv
570.136 317.289 564.518 323.128 557.59 323.128 cv
level3{
gsave
clp
[12.5453 0 0 13.047 557.59 310.081 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5453 0 0 13.047 557.59 310.081 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
548.818 319.41 mo
547.4 317.969 546.31 316.18 545.674 314.177 cv
547.045 315.725 548.093 317.47 548.818 319.41 cv
level3{
gsave
clp
[12.5453 0 0 13.047 557.59 310.081 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5453 0 0 13.047 557.59 310.081 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
560.896 321.811 mo
556.807 321.811 553.483 318.312 553.483 314.014 cv
553.483 309.718 556.807 306.218 560.896 306.218 cv
564.986 306.218 568.313 309.718 568.313 314.014 cv
568.313 318.312 564.986 321.811 560.896 321.811 cv
cp
.74902 .286275 0 rgb
f
565.877 313.817 mo
565.877 316.894 563.477 319.388 560.521 319.388 cv
559.185 319.388 555.787 317.846 555.787 317.846 cv
555.787 317.846 554.531 314.679 554.531 313.163 cv
554.531 310.085 556.931 307.593 559.888 307.593 cv
561.963 307.593 564.622 308.842 564.622 308.842 cv
564.622 308.842 565.594 312.025 565.649 312.219 cv
565.797 312.724 565.877 313.263 565.877 313.817 cv
cp
.878431 .396078 0 rgb
f
564.899 310.866 mo
564.899 314.901 561.752 318.173 557.871 318.173 cv
553.991 318.173 550.849 314.901 550.849 310.866 cv
550.849 306.831 553.991 303.563 557.871 303.563 cv
561.752 303.563 564.899 306.831 564.899 310.866 cv
cp
1 .768627 0 rgb
f
557.871 315.815 mo
555.248 315.815 553.112 313.594 553.112 310.866 cv
553.112 308.14 555.248 305.923 557.871 305.923 cv
560.492 305.923 562.627 308.14 562.627 310.866 cv
562.627 313.594 560.492 315.815 557.871 315.815 cv
cp
1 .917647 .501961 rgb
f
554.008 311.547 mo
554.008 308.99 556.008 306.908 558.471 306.908 cv
560.169 306.908 561.645 307.902 562.398 309.358 cv
561.781 307.37 559.986 305.923 557.871 305.923 cv
555.248 305.923 553.112 308.14 553.112 310.866 cv
553.112 312.916 554.321 314.679 556.036 315.43 cv
554.816 314.602 554.008 313.172 554.008 311.547 cv
cp
1 1 1 rgb
f
560.203 310.866 mo
560.203 312.206 559.161 313.292 557.871 313.292 cv
556.585 313.292 555.542 312.206 555.542 310.866 cv
555.542 309.529 556.585 308.444 557.871 308.444 cv
559.161 308.444 560.203 309.529 560.203 310.866 cv
cp
f
556.944 355.426 mo
550.017 355.426 544.4 349.584 544.4 342.379 cv
544.4 341.932 544.422 341.49 544.464 341.054 cv
544.62 340.916 544.774 340.775 544.927 340.63 cv
547.293 338.373 548.838 335.44 549.561 331.827 cv
551.633 330.256 554.184 329.329 556.944 329.329 cv
563.873 329.329 569.492 335.168 569.492 342.379 cv
569.492 349.584 563.873 355.426 556.944 355.426 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 556.946 342.377 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 556.946 342.377 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
544.464 341.054 mo
544.831 337.265 546.756 333.955 549.561 331.827 cv
548.838 335.44 547.293 338.373 544.927 340.63 cv
544.774 340.775 544.62 340.916 544.464 341.054 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 556.946 342.377 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 556.946 342.377 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
560.254 354.105 mo
556.164 354.105 552.836 350.606 552.836 346.309 cv
552.836 342.009 556.164 338.514 560.254 338.514 cv
564.34 338.514 567.669 342.009 567.669 346.309 cv
567.669 350.606 564.34 354.105 560.254 354.105 cv
cp
.74902 .286275 0 rgb
f
565.231 346.111 mo
565.231 349.187 562.831 351.683 559.873 351.683 cv
558.539 351.683 555.144 350.141 555.144 350.141 cv
555.144 350.141 553.888 346.974 553.888 345.456 cv
553.888 342.382 556.286 339.889 559.242 339.889 cv
561.315 339.889 563.98 341.135 563.98 341.135 cv
563.98 341.135 564.948 344.319 565.006 344.513 cv
565.15 345.021 565.231 345.553 565.231 346.111 cv
cp
.878431 .396078 0 rgb
f
564.255 343.162 mo
564.255 347.196 561.107 350.467 557.225 350.467 cv
553.347 350.467 550.202 347.196 550.202 343.162 cv
550.202 339.127 553.347 335.856 557.225 335.856 cv
561.107 335.856 564.255 339.127 564.255 343.162 cv
cp
1 .768627 0 rgb
f
557.225 348.106 mo
554.605 348.106 552.471 345.889 552.471 343.162 cv
552.471 340.437 554.605 338.218 557.225 338.218 cv
559.849 338.218 561.983 340.437 561.983 343.162 cv
561.983 345.889 559.849 348.106 557.225 348.106 cv
cp
1 .917647 .501961 rgb
f
553.361 343.842 mo
553.361 341.284 555.363 339.203 557.824 339.203 cv
559.522 339.203 561.001 340.192 561.759 341.65 cv
561.141 339.659 559.34 338.218 557.225 338.218 cv
554.605 338.218 552.471 340.437 552.471 343.162 cv
552.471 345.213 553.677 346.974 555.391 347.725 cv
554.17 346.894 553.361 345.467 553.361 343.842 cv
cp
1 1 1 rgb
f
559.557 343.162 mo
559.557 344.5 558.515 345.587 557.225 345.587 cv
555.939 345.587 554.894 344.5 554.894 343.162 cv
554.894 341.822 555.939 340.735 557.225 340.735 cv
558.515 340.735 559.557 341.822 559.557 343.162 cv
cp
f
525.243 278.459 mo
526.754 277.789 528.416 277.419 530.162 277.419 cv
530.79 277.419 531.408 277.467 532.011 277.56 cv
530.005 278.155 527.748 278.454 525.243 278.459 cv
level3{
gsave
clp
[12.5459 0 0 13.0476 530.159 290.466 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 530.159 290.466 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
530.162 303.515 mo
523.231 303.515 517.614 297.677 517.614 290.466 cv
517.614 286.986 518.924 283.824 521.059 281.485 cv
528.098 281.485 li
531.65 281.485 534.706 280.894 537.26 279.708 cv
540.548 282.061 542.705 286.001 542.705 290.466 cv
542.705 297.677 537.086 303.515 530.162 303.515 cv
level3{
gsave
clp
[12.5459 0 0 13.0476 530.159 290.466 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 530.159 290.466 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
528.098 281.485 mo
521.059 281.485 li
522.232 280.201 523.653 279.164 525.243 278.459 cv
527.748 278.454 530.005 278.155 532.011 277.56 cv
533.938 277.856 535.723 278.609 537.26 279.708 cv
534.706 280.894 531.65 281.485 528.098 281.485 cv
level3{
gsave
clp
[12.5459 0 0 13.0476 530.159 290.466 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 530.159 290.466 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
533.468 302.194 mo
529.38 302.194 526.051 298.698 526.051 294.398 cv
526.051 290.099 529.38 286.602 533.468 286.602 cv
537.557 286.602 540.883 290.099 540.883 294.398 cv
540.883 298.698 537.557 302.194 533.468 302.194 cv
cp
.74902 .286275 0 rgb
f
538.443 294.204 mo
538.443 297.28 536.045 299.771 533.09 299.771 cv
531.756 299.771 528.356 298.229 528.356 298.229 cv
528.356 298.229 527.1 295.065 527.1 293.549 cv
527.1 290.472 529.501 287.977 532.456 287.977 cv
534.53 287.977 537.19 289.226 537.19 289.226 cv
537.19 289.226 538.164 292.409 538.219 292.602 cv
538.363 293.108 538.443 293.646 538.443 294.204 cv
cp
.878431 .396078 0 rgb
f
537.465 291.251 mo
537.465 295.286 534.32 298.56 530.44 298.56 cv
526.561 298.56 523.415 295.286 523.415 291.251 cv
523.415 287.219 526.561 283.948 530.44 283.948 cv
534.32 283.948 537.465 287.219 537.465 291.251 cv
cp
1 .768627 0 rgb
f
530.44 296.199 mo
527.815 296.199 525.684 293.98 525.684 291.251 cv
525.684 288.524 527.815 286.307 530.44 286.307 cv
533.062 286.307 535.195 288.524 535.195 291.251 cv
535.195 293.98 533.062 296.199 530.44 296.199 cv
cp
1 .917647 .501961 rgb
f
526.578 291.931 mo
526.578 289.372 528.577 287.292 531.036 287.292 cv
532.734 287.292 534.217 288.287 534.967 289.744 cv
534.354 287.754 532.557 286.307 530.44 286.307 cv
527.815 286.307 525.684 288.524 525.684 291.251 cv
525.684 293.301 526.893 295.065 528.604 295.813 cv
527.385 294.985 526.578 293.555 526.578 291.931 cv
cp
1 1 1 rgb
f
532.77 291.251 mo
532.77 292.592 531.729 293.676 530.44 293.676 cv
529.153 293.676 528.11 292.592 528.11 291.251 cv
528.11 289.916 529.153 288.83 530.44 288.83 cv
531.729 288.83 532.77 289.916 532.77 291.251 cv
cp
f
528.809 342.472 mo
526.687 342.472 li
527.79 342.142 528.956 341.965 530.162 341.965 cv
530.964 341.965 531.748 342.043 532.509 342.193 cv
531.332 342.379 530.099 342.472 528.809 342.472 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 530.159 355.016 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 530.159 355.016 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
530.162 368.064 mo
523.231 368.064 517.614 362.222 517.614 355.014 cv
517.614 351.262 519.136 347.88 521.573 345.5 cv
531.721 345.5 li
533.922 345.5 535.959 345.229 537.83 344.687 cv
540.795 347.074 542.705 350.812 542.705 355.014 cv
542.705 362.222 537.086 368.064 530.162 368.064 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 530.159 355.016 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 530.159 355.016 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
531.721 345.5 mo
521.573 345.5 li
523.003 344.103 524.749 343.051 526.687 342.472 cv
528.809 342.472 li
530.099 342.472 531.332 342.379 532.509 342.193 cv
534.485 342.582 536.299 343.455 537.83 344.687 cv
535.959 345.229 533.922 345.5 531.721 345.5 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 530.159 355.016 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 530.159 355.016 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
533.468 366.743 mo
529.38 366.743 526.051 363.247 526.051 358.947 cv
526.051 354.649 529.38 351.15 533.468 351.15 cv
537.557 351.15 540.883 354.649 540.883 358.947 cv
540.883 363.247 537.557 366.743 533.468 366.743 cv
cp
.74902 .286275 0 rgb
f
538.443 358.749 mo
538.443 361.827 536.045 364.322 533.09 364.322 cv
531.756 364.322 528.356 362.78 528.356 362.78 cv
528.356 362.78 527.1 359.613 527.1 358.096 cv
527.1 355.02 529.501 352.526 532.456 352.526 cv
534.53 352.526 537.19 353.776 537.19 353.776 cv
537.19 353.776 538.164 356.958 538.219 357.151 cv
538.363 357.657 538.443 358.196 538.443 358.749 cv
cp
.878431 .396078 0 rgb
f
537.465 355.801 mo
537.465 359.836 534.32 363.104 530.44 363.104 cv
526.561 363.104 523.415 359.836 523.415 355.801 cv
523.415 351.767 526.561 348.496 530.44 348.496 cv
534.32 348.496 537.465 351.767 537.465 355.801 cv
cp
1 .768627 0 rgb
f
530.44 360.75 mo
527.815 360.75 525.684 358.525 525.684 355.801 cv
525.684 353.073 527.815 350.856 530.44 350.856 cv
533.062 350.856 535.195 353.073 535.195 355.801 cv
535.195 358.525 533.062 360.75 530.44 360.75 cv
cp
1 .917647 .501961 rgb
f
526.578 356.481 mo
526.578 353.923 528.577 351.842 531.036 351.842 cv
532.734 351.842 534.217 352.836 534.967 354.29 cv
534.354 352.301 532.557 350.856 530.44 350.856 cv
527.815 350.856 525.684 353.073 525.684 355.801 cv
525.684 357.852 526.893 359.613 528.604 360.364 cv
527.385 359.537 526.578 358.104 526.578 356.481 cv
cp
1 1 1 rgb
f
532.77 355.801 mo
532.77 357.14 531.729 358.228 530.44 358.228 cv
529.153 358.228 528.11 357.14 528.11 355.801 cv
528.11 354.463 529.153 353.377 530.44 353.377 cv
531.729 353.377 532.77 354.463 532.77 355.801 cv
cp
f
502.675 278.459 mo
492.841 278.459 li
494.351 277.789 496.013 277.419 497.758 277.419 cv
499.503 277.419 501.165 277.789 502.675 278.459 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 497.757 290.466 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 497.757 290.466 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
497.758 303.515 mo
490.83 303.515 485.211 297.677 485.211 290.466 cv
485.211 286.986 486.521 283.824 488.657 281.485 cv
506.86 281.485 li
508.995 283.824 510.305 286.986 510.305 290.466 cv
510.305 297.677 504.687 303.515 497.758 303.515 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 497.757 290.466 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 497.757 290.466 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
506.86 281.485 mo
488.657 281.485 li
489.829 280.201 491.251 279.164 492.841 278.459 cv
502.675 278.459 li
504.265 279.164 505.687 280.201 506.86 281.485 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 497.757 290.466 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 497.757 290.466 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
501.065 302.194 mo
496.977 302.194 493.652 298.698 493.652 294.398 cv
493.652 290.099 496.977 286.602 501.065 286.602 cv
505.153 286.602 508.482 290.099 508.482 294.398 cv
508.482 298.698 505.153 302.194 501.065 302.194 cv
cp
.74902 .286275 0 rgb
f
506.041 294.204 mo
506.041 297.28 503.645 299.771 500.687 299.771 cv
499.352 299.771 495.956 298.229 495.956 298.229 cv
495.956 298.229 494.703 295.065 494.703 293.549 cv
494.703 290.472 497.098 287.977 500.058 287.977 cv
502.128 287.977 504.789 289.226 504.789 289.226 cv
504.789 289.226 505.762 292.409 505.816 292.602 cv
505.963 293.108 506.041 293.646 506.041 294.204 cv
cp
.878431 .396078 0 rgb
f
505.063 291.251 mo
505.063 295.286 501.921 298.56 498.04 298.56 cv
494.16 298.56 491.016 295.286 491.016 291.251 cv
491.016 287.219 494.16 283.948 498.04 283.948 cv
501.921 283.948 505.063 287.219 505.063 291.251 cv
cp
1 .768627 0 rgb
f
498.04 296.199 mo
495.416 296.199 493.281 293.98 493.281 291.251 cv
493.281 288.524 495.416 286.307 498.04 286.307 cv
500.66 286.307 502.795 288.524 502.795 291.251 cv
502.795 293.98 500.66 296.199 498.04 296.199 cv
cp
1 .917647 .501961 rgb
f
494.178 291.931 mo
494.178 289.372 496.174 287.292 498.636 287.292 cv
500.334 287.292 501.813 288.287 502.566 289.744 cv
501.952 287.754 500.157 286.307 498.04 286.307 cv
495.416 286.307 493.281 288.524 493.281 291.251 cv
493.281 293.301 494.488 295.065 496.2 295.813 cv
494.984 294.985 494.178 293.555 494.178 291.931 cv
cp
1 1 1 rgb
f
500.371 291.251 mo
500.371 292.592 499.327 293.676 498.04 293.676 cv
496.75 293.676 495.709 292.592 495.709 291.251 cv
495.709 289.916 496.75 288.83 498.04 288.83 cv
499.327 288.83 500.371 289.916 500.371 291.251 cv
cp
f
501.232 342.472 mo
494.284 342.472 li
495.387 342.142 496.553 341.965 497.758 341.965 cv
498.963 341.965 500.129 342.142 501.232 342.472 cv
level3{
gsave
clp
[12.547 0 0 13.0488 497.757 355.016 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.547 0 0 13.0488 497.757 355.016 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
497.758 368.064 mo
490.83 368.064 485.211 362.222 485.211 355.014 cv
485.211 351.262 486.734 347.88 489.171 345.5 cv
506.346 345.5 li
508.783 347.88 510.305 351.262 510.305 355.014 cv
510.305 362.222 504.687 368.064 497.758 368.064 cv
level3{
gsave
clp
[12.547 0 0 13.0488 497.757 355.016 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.547 0 0 13.0488 497.757 355.016 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
506.346 345.5 mo
489.171 345.5 li
490.601 344.103 492.347 343.051 494.284 342.472 cv
501.232 342.472 li
503.17 343.051 504.915 344.103 506.346 345.5 cv
level3{
gsave
clp
[12.547 0 0 13.0488 497.757 355.016 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.547 0 0 13.0488 497.757 355.016 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
501.065 366.743 mo
496.977 366.743 493.652 363.247 493.652 358.947 cv
493.652 354.649 496.977 351.15 501.065 351.15 cv
505.153 351.15 508.482 354.649 508.482 358.947 cv
508.482 363.247 505.153 366.743 501.065 366.743 cv
cp
.74902 .286275 0 rgb
f
506.041 358.749 mo
506.041 361.827 503.645 364.322 500.687 364.322 cv
499.352 364.322 495.956 362.78 495.956 362.78 cv
495.956 362.78 494.703 359.613 494.703 358.096 cv
494.703 355.02 497.098 352.526 500.058 352.526 cv
502.128 352.526 504.789 353.776 504.789 353.776 cv
504.789 353.776 505.762 356.958 505.816 357.151 cv
505.963 357.657 506.041 358.196 506.041 358.749 cv
cp
.878431 .396078 0 rgb
f
505.063 355.801 mo
505.063 359.836 501.921 363.104 498.04 363.104 cv
494.16 363.104 491.016 359.836 491.016 355.801 cv
491.016 351.767 494.16 348.496 498.04 348.496 cv
501.921 348.496 505.063 351.767 505.063 355.801 cv
cp
1 .768627 0 rgb
f
498.04 360.75 mo
495.416 360.75 493.281 358.525 493.281 355.801 cv
493.281 353.073 495.416 350.856 498.04 350.856 cv
500.66 350.856 502.795 353.073 502.795 355.801 cv
502.795 358.525 500.66 360.75 498.04 360.75 cv
cp
1 .917647 .501961 rgb
f
494.178 356.481 mo
494.178 353.923 496.174 351.842 498.636 351.842 cv
500.334 351.842 501.813 352.836 502.566 354.29 cv
501.952 352.301 500.157 350.856 498.04 350.856 cv
495.416 350.856 493.281 353.073 493.281 355.801 cv
493.281 357.852 494.488 359.613 496.2 360.364 cv
494.984 359.537 494.178 358.104 494.178 356.481 cv
cp
1 1 1 rgb
f
500.371 355.801 mo
500.371 357.14 499.327 358.228 498.04 358.228 cv
496.75 358.228 495.709 357.14 495.709 355.801 cv
495.709 354.463 496.75 353.377 498.04 353.377 cv
499.327 353.377 500.371 354.463 500.371 355.801 cv
cp
f
465.416 303.515 mo
459.361 303.515 454.305 299.052 453.129 293.112 cv
453.129 287.821 li
454.305 281.883 459.361 277.419 465.416 277.419 cv
472.346 277.419 477.963 283.26 477.963 290.466 cv
477.963 297.677 472.346 303.515 465.416 303.515 cv
level3{
gsave
clp
[12.5459 0 0 13.0476 465.417 290.466 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 465.417 290.466 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
453.129 293.112 mo
452.96 292.258 452.871 291.373 452.871 290.466 cv
452.871 289.56 452.96 288.675 453.129 287.821 cv
453.129 293.112 li
level3{
gsave
clp
[12.5459 0 0 13.0476 465.417 290.466 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 465.417 290.466 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
468.727 302.194 mo
464.635 302.194 461.311 298.698 461.311 294.399 cv
461.311 290.099 464.635 286.607 468.727 286.607 cv
472.814 286.607 476.142 290.099 476.142 294.399 cv
476.142 298.698 472.814 302.194 468.727 302.194 cv
cp
.74902 .286275 0 rgb
f
473.703 294.204 mo
473.703 297.28 471.306 299.771 468.346 299.771 cv
467.011 299.771 463.614 298.229 463.614 298.229 cv
463.614 298.229 462.361 295.065 462.361 293.549 cv
462.361 290.475 464.758 287.981 467.716 287.981 cv
469.789 287.981 472.452 289.226 472.452 289.226 cv
472.452 289.226 473.419 292.409 473.477 292.603 cv
473.624 293.108 473.703 293.646 473.703 294.204 cv
cp
.878431 .396078 0 rgb
f
472.721 291.251 mo
472.721 295.286 469.579 298.56 465.698 298.56 cv
461.817 298.56 458.674 295.286 458.674 291.251 cv
458.674 287.219 461.817 283.948 465.698 283.948 cv
469.579 283.948 472.721 287.219 472.721 291.251 cv
cp
1 .768627 0 rgb
f
465.698 296.199 mo
463.074 296.199 460.945 293.98 460.945 291.251 cv
460.945 288.524 463.074 286.307 465.698 286.307 cv
468.321 286.307 470.453 288.524 470.453 291.251 cv
470.453 293.98 468.321 296.199 465.698 296.199 cv
cp
1 .917647 .501961 rgb
f
461.833 291.936 mo
461.833 289.372 463.838 287.292 466.294 287.292 cv
467.996 287.292 469.472 288.287 470.226 289.744 cv
469.615 287.754 467.815 286.307 465.698 286.307 cv
463.074 286.307 460.945 288.524 460.945 291.251 cv
460.945 293.301 462.148 295.065 463.862 295.813 cv
462.642 294.985 461.833 293.555 461.833 291.936 cv
cp
1 1 1 rgb
f
468.029 291.251 mo
468.029 292.592 466.984 293.676 465.698 293.676 cv
464.412 293.676 463.365 292.592 463.365 291.251 cv
463.365 289.916 464.412 288.83 465.698 288.83 cv
466.984 288.83 468.029 289.916 468.029 291.251 cv
cp
f
465.416 367.157 mo
459.361 367.157 454.305 362.691 453.129 356.753 cv
453.129 351.463 li
454.305 345.525 459.361 341.061 465.416 341.061 cv
472.346 341.061 477.963 346.901 477.963 354.108 cv
477.963 361.313 472.346 367.157 465.416 367.157 cv
level3{
gsave
clp
[12.5459 0 0 13.0476 465.417 354.109 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 465.417 354.109 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
453.129 356.753 mo
452.96 355.899 452.871 355.014 452.871 354.108 cv
452.871 353.202 452.96 352.318 453.129 351.463 cv
453.129 356.753 li
level3{
gsave
clp
[12.5459 0 0 13.0476 465.417 354.109 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5459 0 0 13.0476 465.417 354.109 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
468.727 365.834 mo
464.635 365.834 461.311 362.339 461.311 358.039 cv
461.311 353.74 464.635 350.242 468.727 350.242 cv
472.814 350.242 476.142 353.74 476.142 358.039 cv
476.142 362.339 472.814 365.834 468.727 365.834 cv
cp
.74902 .286275 0 rgb
f
473.703 357.843 mo
473.703 360.923 471.306 363.414 468.346 363.414 cv
467.011 363.414 463.614 361.872 463.614 361.872 cv
463.614 361.872 462.361 358.703 462.361 357.188 cv
462.361 354.112 464.758 351.619 467.716 351.619 cv
469.789 351.619 472.452 352.867 472.452 352.867 cv
472.452 352.867 473.419 356.05 473.477 356.242 cv
473.624 356.752 473.703 357.289 473.703 357.843 cv
cp
.878431 .396078 0 rgb
f
472.721 354.893 mo
472.721 358.927 469.579 362.198 465.698 362.198 cv
461.817 362.198 458.674 358.927 458.674 354.893 cv
458.674 350.856 461.817 347.588 465.698 347.588 cv
469.579 347.588 472.721 350.856 472.721 354.893 cv
cp
1 .768627 0 rgb
f
465.698 359.839 mo
463.074 359.839 460.945 357.62 460.945 354.893 cv
460.945 352.165 463.074 349.947 465.698 349.947 cv
468.321 349.947 470.453 352.165 470.453 354.893 cv
470.453 357.62 468.321 359.839 465.698 359.839 cv
cp
1 .917647 .501961 rgb
f
461.833 355.572 mo
461.833 353.014 463.838 350.933 466.294 350.933 cv
467.996 350.933 469.472 351.928 470.226 353.385 cv
469.615 351.396 467.815 349.947 465.698 349.947 cv
463.074 349.947 460.945 352.165 460.945 354.893 cv
460.945 356.942 462.148 358.703 463.862 359.455 cv
462.642 358.628 461.833 357.196 461.833 355.572 cv
cp
1 1 1 rgb
f
468.029 354.893 mo
468.029 356.232 466.984 357.319 465.698 357.319 cv
464.412 357.319 463.365 356.232 463.365 354.893 cv
463.365 353.555 464.412 352.472 465.698 352.472 cv
466.984 352.472 468.029 353.555 468.029 354.893 cv
cp
f
465.416 273.963 mo
459.361 273.963 454.305 269.498 453.129 263.561 cv
453.129 258.272 li
454.305 252.332 459.361 247.863 465.416 247.863 cv
472.346 247.863 477.963 253.71 477.963 260.917 cv
477.963 268.121 472.346 273.963 465.416 273.963 cv
level3{
gsave
clp
[12.547 0 0 13.0488 465.417 260.913 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.547 0 0 13.0488 465.417 260.913 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
453.129 263.561 mo
452.96 262.707 452.871 261.823 452.871 260.917 cv
452.871 260.011 452.96 259.126 453.129 258.272 cv
453.129 263.561 li
level3{
gsave
clp
[12.547 0 0 13.0488 465.417 260.913 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.547 0 0 13.0488 465.417 260.913 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
468.727 272.643 mo
464.635 272.643 461.311 269.146 461.311 264.846 cv
461.311 260.549 464.635 257.051 468.727 257.051 cv
472.814 257.051 476.142 260.549 476.142 264.846 cv
476.142 269.146 472.814 272.643 468.727 272.643 cv
cp
.74902 .286275 0 rgb
f
473.703 264.652 mo
473.703 267.728 471.306 270.222 468.346 270.222 cv
467.011 270.222 463.614 268.68 463.614 268.68 cv
463.614 268.68 462.361 265.512 462.361 263.994 cv
462.361 260.919 464.758 258.427 467.716 258.427 cv
469.789 258.427 472.452 259.672 472.452 259.672 cv
472.452 259.672 473.419 262.857 473.477 263.051 cv
473.624 263.558 473.703 264.097 473.703 264.652 cv
cp
.878431 .396078 0 rgb
f
472.721 261.701 mo
472.721 265.735 469.579 269.007 465.698 269.007 cv
461.817 269.007 458.674 265.735 458.674 261.701 cv
458.674 257.665 461.817 254.396 465.698 254.396 cv
469.579 254.396 472.721 257.665 472.721 261.701 cv
cp
1 .768627 0 rgb
f
465.698 266.647 mo
463.074 266.647 460.945 264.426 460.945 261.701 cv
460.945 258.975 463.074 256.758 465.698 256.758 cv
468.321 256.758 470.453 258.975 470.453 261.701 cv
470.453 264.426 468.321 266.647 465.698 266.647 cv
cp
1 .917647 .501961 rgb
f
461.833 262.381 mo
461.833 259.822 463.838 257.741 466.294 257.741 cv
467.996 257.741 469.472 258.734 470.226 260.193 cv
469.615 258.2 467.815 256.758 465.698 256.758 cv
463.074 256.758 460.945 258.975 460.945 261.701 cv
460.945 263.752 462.148 265.512 463.862 266.263 cv
462.642 265.437 461.833 264.001 461.833 262.381 cv
cp
1 1 1 rgb
f
468.029 261.701 mo
468.029 263.037 466.984 264.124 465.698 264.124 cv
464.412 264.124 463.365 263.037 463.365 261.701 cv
463.365 260.36 464.412 259.275 465.698 259.275 cv
466.984 259.275 468.029 260.36 468.029 261.701 cv
cp
f
465.416 334.882 mo
459.361 334.882 454.305 330.417 453.129 324.478 cv
453.129 319.188 li
454.305 313.25 459.361 308.785 465.416 308.785 cv
472.346 308.785 477.963 314.627 477.963 321.832 cv
477.963 329.041 472.346 334.882 465.416 334.882 cv
level3{
gsave
clp
[12.5464 0 0 13.0482 465.417 321.834 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 465.417 321.834 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
453.129 324.478 mo
452.96 323.623 452.871 322.738 452.871 321.832 cv
452.871 320.926 452.96 320.042 453.129 319.188 cv
453.129 324.478 li
level3{
gsave
clp
[12.5464 0 0 13.0482 465.417 321.834 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[12.5464 0 0 13.0482 465.417 321.834 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
468.727 333.562 mo
464.635 333.562 461.311 330.066 461.311 325.764 cv
461.311 321.467 464.635 317.969 468.727 317.969 cv
472.814 317.969 476.142 321.467 476.142 325.764 cv
476.142 330.066 472.814 333.562 468.727 333.562 cv
cp
.74902 .286275 0 rgb
f
473.703 325.57 mo
473.703 328.646 471.306 331.138 468.346 331.138 cv
467.011 331.138 463.614 329.598 463.614 329.598 cv
463.614 329.598 462.361 326.43 462.361 324.915 cv
462.361 321.841 464.758 319.346 467.716 319.346 cv
469.789 319.346 472.452 320.588 472.452 320.588 cv
472.452 320.588 473.419 323.774 473.477 323.968 cv
473.624 324.474 473.703 325.016 473.703 325.57 cv
cp
.878431 .396078 0 rgb
f
472.721 322.619 mo
472.721 326.651 469.579 329.922 465.698 329.922 cv
461.817 329.922 458.674 326.651 458.674 322.619 cv
458.674 318.587 461.817 315.314 465.698 315.314 cv
469.579 315.314 472.721 318.587 472.721 322.619 cv
cp
1 .768627 0 rgb
f
465.698 327.565 mo
463.074 327.565 460.945 325.349 460.945 322.619 cv
460.945 319.891 463.074 317.673 465.698 317.673 cv
468.321 317.673 470.453 319.891 470.453 322.619 cv
470.453 325.349 468.321 327.565 465.698 327.565 cv
cp
1 .917647 .501961 rgb
f
461.833 323.299 mo
461.833 320.738 463.838 318.66 466.294 318.66 cv
467.996 318.66 469.472 319.652 470.226 321.108 cv
469.615 319.119 467.815 317.673 465.698 317.673 cv
463.074 317.673 460.945 319.891 460.945 322.619 cv
460.945 324.666 462.148 326.43 463.862 327.179 cv
462.642 326.352 461.833 324.921 461.833 323.299 cv
cp
1 1 1 rgb
f
468.029 322.619 mo
468.029 323.959 466.984 325.042 465.698 325.042 cv
464.412 325.042 463.365 323.959 463.365 322.619 cv
463.365 321.277 464.412 320.195 465.698 320.195 cv
466.984 320.195 468.029 321.277 468.029 322.619 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (kot) ()
%%Title: (quiz-08.eps)
%%CreationDate: 1/22/2020 9:27 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3QQOfC8Z_YA=.?L^=[[*5Fh'9W0A,@foG%P(_M8p;?LVhfGeYTr@AHbY>U8*Yk\N=.L>2X/hSQ'(%uc>]3UUmJfS&X=20(
%0["EuO&H5$(D]"#cTd_]p?H9[mi>qliE24mM\/tJ"h_ii'[/JJ3n5hlRRX?MlaBGUYEs&ag>-)bQi*hlHq/JtcKMuXUX<cTj\%H&
%dL0<Tm>I$nHGdh2]1p!-P9LELj<)L_k<6<^3l'(;?%1RI6;ub)pAmSD)o7ldFqa9eTp6Uu[s'UJhT;L6-OUpl(#Z9?-d+(>/)h(l
%TC7EbNOCLf@IlrYn*9jt]*/9;$fG-@PJ38Yd0GXp`Q..,_8h#OLL#R\-QR$fOfK`mJgCY3*qUDPfF?CDB(<V<pAP_Sk'Xg;T]>*R
%.3*u8!#"<*6o`GZ(U3?4^m7uP,]^A%1cl/[D\*M%*(X!RdZca@+qP'qDmM&"Bi3,Ohuk9mR__K>JHp%T,T66*'i6]N#g`%2H(C]M
%`fI_$=4F]lk[gN)l@@IQkNdVMXBC*?EYu.]CsXlIkH0%P3%C%KQ-/<h>rET$mTcAukX6Y#$m<;ZLk=Kc)LYHNG%6%HMY\$6PiG%c
%X8b"Q=]og-PE+$?ZnD]^MQ0&i=lk$>"[4U_eqaHN+pU*"ap9Cl*(kcHd,G>bl5r+*Y,jp"P[P%9q4q5ueltueBF\81aH*shHJ)/8
%4NX&,$#pQroqP\T-JlOlIc"gAKWs6Ao#PAp9]RU_K;Vr8A@m]hki(-H!GHum2;2(%XRh.9K.[?KP8_m=Ghe#]l7MAtcTdHS3TW!I
%(r48LDL9a`DcPM@rirJggI9#(@?gWU/kEM=4"3A2Q_89iNp!o6?=N>I!Ic;[reLu""0:P"C3brZo0.IeONeH?F.n-A7;*JdN%@?R
%p371_h?eX^*:U%FpukkjQ@+D$(&[CZHLM=#^75]$G_W!g+C6h`i$Pa#LgUhrIjH."_iHADBOC#T&#7P?i:tknTAD'p0(j,&$SJuE
%hU9#"EoLH#Z2b[CT4QjnN_<K[m%_G506e'@N\.@:(cbh#!SHV/+eI$b]BFdha@-6O-K.Stf-sK_l2;O=+/;j(rHeaR1;/c'#60Pr
%]ZgO>PS_R75F]W8UY]c!]N>g`2t%%[JtqcIB,V:jj%R(:O2P"F/j!JjC?-9F:U!%'j@HHoKg6gcZV=s1)&k;kr9YHZek(cT\i]-+
%I"caUnaDmjnW!hsgb9JiiW@M"e3K.9fHq8'5^]41rGPM?"929c=juubS>h&Z7?DUNa54`uWAbagC00lRlD7i\!9`p^QI"Yu&QCH(
%[sSg(q;Y8-qZ'u!%]_uKjXlb!V;X&Q7D?s0@Z2_"@a!^9QG51X@`ElME_[V9!kP+M6d?C?VX*cKbB:m54pZk7_W:aFqk]`7>;(0m
%DVb(3n=WZ\l7GQFIJH1BDpYkM*G14;"a?.V1jTE[%5bIhk&'[oj,C$K#7^28dS"f\(_6TA#O>$ih!*p<="i/K4,s);cW`!7$$g%2
%D"<DiF>U:kPXpZ%T7>Yqq8_WiIkWXQ^nEM%P9<AY8MOp+__Q28/B@=_^l#2rLWh6Lb%baE9p-a?VV)@_,q^/W'JTYZ.V)<6A5;)_
%:?)slP"WWRjt]':Zf'R-T*U2TI#rUW%[GZ@"<9us`M_\9#Ri^qkRPgAJ=9(A"UPYV%Rj4Qd)]"7*(_;BNjOna6Y,*TKLO0KE&d&H
%V#M];(88$ahhnA$LF+@&Nhi$d8(p'\:sRF?2%RtpJ.+h>!ij@Lp`s#B'M4$$78iM?1QS>WUu4e]OchKlO;[qGb!bC56-)N-!TF1V
%Oj$1t%h4O%*(`.:Vt!$7.Ng?t!u;7O&?>f]!/geU,lpM68L\@51.k#I<"Q.RW?;UL(k)>Xa#;<];hcD5,"3tORE3d<AFb^:W@Uo8
%,5Iq\<)ASt?-S[F)Pq+>d#snF22+R0V.3)Q8;9Zj[H.E0K.KE2843M7OTFQk!k=gES55?di]%<n`ZLdk)S%D]+7gSq6BP:=UB7>n
%PM;>ZoLR.Cnrk5EVqgIV%nZhO:_*+Vqup4G6)Yq$)hgh4/*:c7P"^>*k&67We_j!NJ*Cm9V$9*2cP/9oD</;4Xk>k:jsY=Nai&cP
%'Lt8N",R5uJQ*e05U"REKEJ4*aJ#%-m1B;kDMjaoBF-8iV;Om[)*APi4q_+P.#M_X+;3lJ;:Wa=s,r4<,+V7P_&Xi<M1@o!8J$4]
%A-'Ru8a&!fs&-rI*[u%t.@rL#@TFpSmM$NsPt\#PR8c548[E+8IY0EX2+-I>M%V4drW-W(iF(nl3g0SG"UCu+7Ni!\X_&2bUbaG:
%b/:tYs6p*_SU]Pb0hF'cJ.<'F@aZ]u%RcCZJQ<)V#HCqb$8<#Z.Y<jrJ<*:[.WSSlIY37X#p_eX-u:'C!&HK,"d'02\99a)VGn!-
%07i)gkXe$H&k$M4_a4$R-ULO)M-``k[NLCI%/;mKpWsi+/tiqO?^P3un&ld*2[<t;]QqkS7,/CZ!>72"&iWf'2`24*0lCI]Up6,k
%@jd8-1j3'M'-emE:5kYR3?`!l`.?#UC=9V[*f?E9f:nV.rfqe1oW.1O7FR`@`/?qrKF!>sPW-:R!\mFp?5"'C-%;#s-l%^P,7sBs
%4Gb[IU6&JDr"tJYMF7u?pmO$r(DnSHE$h4jTEuKq"iLQUVF$5$%B0I8=sJXeBZ->qTM[fXHt^3dG$rE0@^YFDjcg+\RXf!bW@X-L
%=f>$\e$`)W;.,rk0;.WFdkVT6XX`8/;"I+`":t4MK)QukRTMkmZiUF-Q!aae"W[1EkU6B-"8kS#0[TkF"n4is,(a1\_+%O9-#(.Y
%R0977%Mbq)JL2!,'+]PL9eto^^iE<QO9"!#Zb`ui^h+2R_#mb@9X=`L1g!]iG_K1pJ6b_h,XLIAO0$?OI0#ePfqb&:%]dBZZo&H*
%%f-73RT15E:MFci8J2=\^Fkp\*2=$SqWoKtes7>6`"G)b'#>&$Al;i48]6i9H4$;k*9[_t=GX=5&pH3h^^A"h$+*;)mG^CO(so`K
%BO)6[39FcZkb9>Qrs-f%N#6Z$6&,dcRf^8t5`VLh*m:5$,,>?(BK$;F+1Nc@'9f*bi*%7:b$YZ&jHD^Y#Kni<L'>\Lh1/E*)cAC=
%JQ7P7>u:*CXYC4i)=0#5X9GX-d_Srb3Nul#*;olf(EtSu)3l,*)jQptG#WcUIW/-Z;$g,<&h0Qd6%hmp5XQhhASF`"b0uTR.FXM1
%;bO-V>_uuWY+XGr>?e\)Ho4!';[HY`[\R`]foi]gCQLI800I?&WPhN!gCgu+mRZ/s]-V_qp6P?e)qZ':l%#T6NZORV5]T'<"A9QZ
%[OsPn!--iE#[8ZmXg%H7d0rN(/F<H90X\gH%uBP[N`]KEk_Z&`QEE4$18HQMIh]aEg#S?-AsbF<-a).`)BQ8lN6/iA=\U.j++\J>
%_G/:V5%rq%;n`mf&d`I[P5e]*`e+C:PLF6_D*5UW$-s9<n!]ZI;sqgs!g5,=JOkC8!i<`]cpmBNOp`6PMkhdDP`S@TH^1C\1u"@Q
%X@-9!4HULRNO:(!+k!.VK,ub(j+uZ]P#R8p'jB[c1)5XN;6mhd>s&s&`YfCJ8[8TL9q(WBM/+BJW\e!-EgMUKWUp@G)"!8q!?Rm?
%)%s,II=Si!1i$LDe-qVl`\cCJ%3Zo<HGZ.S!pRkW(W!TQR-9^]RY`^<"AI[m6s*HP34obJ5o(Tl>Ab$DmQ"U,%g'qs'&JrhfndM$
%n;336JB"b]2Upd%mjZXOHpiZsA.IQDL/A7>,=pnpR%Q3n@,;WOb8HqP7$*Zd*<+(13,Tr%9P@NA(15oC@i9SJJ$GKB2u7b(FMn+E
%Mo)s(U[3!4ClluBH3nLjlJ8(>S;R,Cs3keki+,sYpUg+XTPsIS^3'G*\m>7d9W;'2Pe0DC5]FGsrDqf9M8/mOnK&C7>\04Q^5Y6s
%fr>O7r6QAb'BVM$JD_+NJ\[s.2NpbM:Ce`K*$5JpL`VBIX'Y5G4:ku=9f=^`UL((q4]#VhNf+los7)+^(i.-_cA`1T,Ps?Xos+i!
%&85=U[E76Nf92f1BrV_G7M]ic+DqI2h&@f,js'\TDK4#W=s`3Ema/#KA;f:>=:!p#VP?"^Ss9*J&&X<eh8!M.!YIp"R]N7?1GW7r
%FTBk^&ea':O,LMK45[799-<tY(P+^NLT@qt#]9oo>f<=]I8*hqkRAG:_M&0WdFio#1]&'8?TUiSn<MIAiVY_!a!)4&l1>^Qm>fTE
%qsCNkTfA^/X_%1V8%rsk@O'C4#g'O\h3,$9n*#+la:gjL\!LX;fkL3%4_bMinscj+ai`3@Co!#I0/g$#-A$nrAN+>A9RUJ"bU^=*
%NQSEPeY-kp*4P7I=fLdNkjB/9FrodLk,$nH[%!D*o?qM_g<E:&=YK/1`eR@XGU*(/;nR(cN].u.o?<D+4X\33RZ$bToAL21I*fcW
%<l0187P\E7GA-tgo(]B8D#a!d_#peKD_,U]1F$^]+@RrK#0d04jm@UA2t4>ul5H4Jmc>4Q?7sk"BhpC(fq@B"$D2mKe6=""\"Ppn
%A*Em@^e7_iJfPYA]hY?j72&=?UP-tZH_AL^*>_R[Kg`Bk=sG+&$GKQ\@JFh>a>+fM.sk12ni5/qDu?I3oKW`tKmgZ#Z$`@/@hXi_
%NH'o<(#_+3K:a!.L;,Iu:#]q\a[\!-h#\SNI#SB9'of5kqSe+,CC-cFl:k'*Fon^mfuq<33G&,ePKdu-bq-EAa'1'0ND<4J[?^;b
%W$sVgFNFK&U25G'q+g<7cM<B(IF.<1oiC'^W[?I*bhS07[jT<FId57S`D!ib.p5f!-\IKXe.b^VIr?NPd_(*cfru:LK.mjMCmh+)
%)Et_73^eTS`[\b+%:8t_b8B'#(HHk2k7A*h(^nQ*]jGOnI4l1C$DXBZe9Kt_j7e/J<5hB=^>OK!85A3)Li:FZ>41;i);V<DbT,dd
%>`-Mu*qK4Mnpg6PZA3(hk4au#pQ.nMA:>&7ILl7(r#RWM6.S1mCsDDlYKuY\s+V/9p?j)fZjlIJF%jef$9,_<4Jou0Ic#C!hfocO
%)pRgjO2:U(i4cIO%5iHaD?Vfd4Ci#0nsa(WZ)'Bc9u\\d6dQK?<OlG8%!kCKh1@2Tji&IW]4,$pr?Q:sqjPG-5#Mdhi=`jpaod?9
%0:6_92sCpr<1"O18tIL.eT#<O_SLVSCd(3ET-9]MOEi"l6P,i?BejZl9fA]oA2ISN<P+"5MEtug`5%/XX6nQ#HFmVX@pPiLCNoI&
%LGtI\o4R[jZ[X2-ahu&ud=?-VB?she@rljO#Fb;"lck!Y]rZ%k0i-8olD1f3HJ>fArHBGP$B;,)4Ju*Efiak%Jq,SJI$jQJ#CKB&
%'O]bSp@Q1gm`'RW.?j=@9^TO.A:/[0G667nks4A0/HVJ9jqBE>M3n%VbC&;\54LD#GaV@?r%=%]dk#V#`LMW*o.T]lQheSCI,\_c
%-=4\.V.OA2cbrL"jirBiWb7E*FL-kXGoZQ_P:Z;SUN(UWl/&Y]b9d>_%4`cXL.U:,_TSeqo*m4i7%!]`G*=!gJ)_U<A'3@!3PGFN
%I/?#c:9[*T#KOrJ_k[OXq//q@*#u^rDG>M/oH$i+-8s.nELO"8SA$/uq$p0k*Lt-GVI=WP?Ld<?Le3*<X#Na*H1aSLPeH.C]Al?%
%guqD*Rt'CW@%mcO"bCP+L-'qm*;tdWK8Ja!@Icp2e9he2);>8;_okuVGghT(R?X.YHgufJ)/#s0p"Netn,d/S=]Ka+BpBJQ]HgM=
%0kOEAnk_Zb;X#'I["b_\p:(N=C0VQ$DK_Q%a_16>[bIf=g?gY$p_teCo[6CV8"83Q]i=J#N%tu@q9;]R:M!D5ETs%7p!$EF7ipo_
%(,O++i_?6ac.qlrIhI4-i&60gK:-?WA+XNLRU0n3Q(0G`2Vm['B(budq4<&;WS>njYF;?o$g1=9caWP9Ds@"#(a7/^_c".&&3"G:
%9E!kZd#9c/R[C"LAmr<B=j?*kRDDj5"uEjJNX)>JlKrc/Z(KDCic[ETUhDfPU3TN+b7U.,5sC-(q"#lSs/2'Rq.04a(!ZX_o#Z,I
%DZ0e7r#rTWRF%N&kW!@9FluP^:M+R95=%IN_/]GWq)gW3:4Y/(!HJC:+J6]oR<jD]T<5ZrY,gRsm.[(sT/=[f*oA\8o(]=h9Vk3X
%\pC?Z2icX80D-R'mRt6t]:XiRiX([.?>`iQ#0dgCiX\hsKtDoV79"s1E'pe,pP_etGT@X'P*^sshS>21[T5KIYP1[3h+/N3fEgFC
%onFj)%7-&5\AFnC*&N2^*h:3Vj_S;P2VF\7WC(kNp,/3E+3s^"o,./BDY]aTWHj?;G:[OhK@VY[h>:a)h%Y2Bni4tCB=9_ODIU%5
%q3[GKn+T$Y2bk<\qE6UNZ`m"jfL$-4n[i?0^0.><OE9u"H6.7"ej%-C9[);G\ppGm;fIfY)u8[8]*,d3J-*Rh@J65-PV45:G^0F+
%)Ums>C#)`+Ob]h@Vp1*r5,"Q*LOE/W\s[kgN:S-T-K2[FoHN+jR%<;c*cB+3JhOc357Tu?fpcLVXjYm%\rg,nZA@jWI']tf]5ohK
%\!jS.n&uDS>oZ1'*.0$Ad+)@6MO-7U9VB\WgsjBR+#KA[=c`"tSl:bA;^%,ZPFbQuN04ZRntn8_o*XZQlK`hSjmQ>]q3s(*WL"up
%f>=btq)TA/I-V0S'#m9o3.K]+/A1@]#$:eiIdnrSjpQWffb8C4DNr?]r(c+#hpQGS>;EJ%bkdp/?)-*PiPFJ?M#/U0IhN,-j)cfW
%LX=TF'"HX/mMmb5G12@3#h\oW@EX:<l(uh$3G@V_.c2E-EKSd/3Xsog_JHnjY4q6(Rb&*V2X%ZLWjg,?V;CdMeL5CPd/,7FGF.-i
%j!(U&D]--A/OiBZUNG#Z;VAWHa$l5ZoZ4.mf'(/-MQ[b8(k,^hMBAZamT$6XoWUGQ%Fc>Hks%=m!\$uRms7[!.&=o%j7c6"kcK0[
%PN2Xj'/@u8T[o(Y8XZ."URoV].@IjIhG&b#eEPT=6)IC;Hsnr4aE78Xk3mPOUG'k-7"")S:B;`4^.fPr"Qn+LF!J"tJGp?+5T?W;
%I=!F*gua'lc$>[#R!"ni^k0,Ac#)lYRmU,;)/<q"6Z3cuU2>6!D3Xf[A7?T^d+->4JX;dS$ZK>WE4PtijP4iY.DKG(fs.^*BQlPG
%G,&@9E5ue_q0om;PNJI_!t47_DsmG`So=0_?^P>h^/bdu)dA8B?OKXtGZeE0`^M2Ti.[!%l=Eb0X>8`]S!]Z'm0-<Ei4-k%q#TO[
%,"EGGb3lo-Uj7SD5LSd&l\$fOH<Hgtj2o/cql+:3KBV\+S^[;J`RI*u57>(uH(eZp2k?D"pX_J'[*P>G:[oc1_f'7LH@-TPYQ*)+
%)m1XF\9)Uh?eIRe/cf=F14Pk&#Gmp)c?`(iNj-SY*`t8`EuHUiM2Vb5eHg6QaS=Kl)1R]1a2k[So=%cH(Ie=d$%[q?'^7V6ptsA:
%`p&P]HUEYc$TVKLb[8HegZ:,=+m5Zuh^OA=o=%a"cNV@'/:tVmdlTG15NZnDS76dA<\3D!JUZiULYo\!@D5%WU]q8=:I39mC5b;c
%RkN<ZaS7r+W\Ik\nQQY$q0Tqi\NKaPYHjXhZ=)*+1TQR3b\OVSX4>(g\24<R*4uh;iN!r1le)_r#+s]gT$d>P]7S=@1aY*+o'iI?
%Hq%W4[Ea.h@j4i[AHla'][/@)d?rRTGM6k^5,0j)d?lc4b\&cp1E'1IUG2jt;9ZmP'[/,QAp>M3qIVP)QC#)h"\V(<]JIGK8T_Ek
%=oQtKoZ_#0-8khgJ$h_Vqu%r(W\<%7G<W!kgD%@9Mj_<pCF\5!L#t7>jm)cW$Bt.U`2l*gkfmk>V;e#[=^bY*c0N&g]f4(+SqlrY
%?LQ-*]f1QsF7uj7GR>rb%ogd]^3ROR0DOZ5hn7m:(OWPpn:bL``NlD\^6;mpZ*RF$c/NX4,2HrSlTG(q#j1D`r'#TSqgYEa@j<%\
%WmBS11IWbJKJ1dO9kuL3Q'PeUnr;OlM15'@7rpUIG@SD(==2jLrMBmj8Yp"d]`(RshCLcV1(373U$S0gq]<YU_1%`%:[tJeB(.^I
%-dA*%>PE(YHOB3FHH:^$pAu`2?=;/RoeJCUk8/&c0Ya1SO%&$diJaA[G@HR-AQW9'C@Z:Mc:$kIH;L[,nQ*!c!0cR(G%%\R[ou6G
%D`!E9[lL5XQ]-j:1Cs5%^JEba9?%rg;Y=@oTpL_8dHVh<SZ*#X9c^h:E3!h*.NQNA*PQ_>fqFI6'21T9a[e#!M=u`=+/:sBWD-0I
%nj(F+ACO1u"7=KK:1CO-S!TIk:?.(9Soef.XkpsscLb6;07MD[)OI@$\q]aaLO%?@^!Z>X@](qEJU3Dj^[3<pC6+D[&+6XLD)]/L
%Jq/i=N`NdR6*9cWC![iIE\lQHO;iFLA9A>Z5^8s'>d!he5<R>)K8tki7_NBs*d4J4l&F+ggWP=G0$nSMjWR99bKCh%Qk8eqd"^N"
%k41\cGhfd:^$K&sTuKNUhY9bDl%'O>)>\[2@rajYa&^o?+K&mP4f*NQgfQ'7]iAuso$cp>$\K>LO>T-6]:$r0+]Fi+PpfspR?m)q
%q+?lCR\08K=d*ahXG=pX.9q`chhZ)0f:nLABe>2Y@\tID9_hj+&#nZTX@;ZT<0P'4AL<"ABpR>EGTg\5(1k2qjhDCEk%dg@XOd2V
%!Qo5]7IfFN-U(#EdTR><`(Wfn4^X-<0!h.*[4%VgCuVRGQI_dT+_FoZr`@sQRDq*ASn.X+lPcZPVu+G9SlU*\,r'h;;bW5pIOc2o
%`*fHc2'a-LnKQe^Rr$Y&s/m.l9k-T_1']cjHiFr=O%jh%\,MfG(IW^jgR5UIqfe(G_lM@$h9gLU_;*G_*SoMuJYQGtp0$N4h(%.h
%O0jbroQ]//je.r(F;,4Sm0R%:l9=h&+30q%I#UbEC#+6Ps0H/+5Yd*:p0TEB%>D39HRH/jSLdCI4'CS%K7I=e#<ke"6=A`X#X@f[
%QL9<E>g#heT!((7%E%UknX\SklNR>1=$!d[_68Zn0T=6OR"uk>N/E*f7Z\>ZTF*0d#j-82)IC6`hgXRo"8MKsD1D@``cpLU]k;`S
%5N1Z@$53Um""lSS-qB$(3NjXI>dT"*`15[<qL+"EOXkk_EF^?8;Vh^"jeDg'P?Ib6ih7Ir&!=`0^FAoj?M*D&\^Do*Y279Z"V*;O
%;22.Um@!@K,>P*V8Z'ji3a4c%@XPfWPLs?gVHguHWm/-DWFWHoli.&EHnSj\d6FuOYYfErs0GjE2mB@_kI02*XWNO1P*TjL#'e$@
%V>#PC991#m"'Q"[*JsqlO,S#;bg7:ma?*AYOjU6*cL`0&MYc4@#2FE7o\,:U4W+_m\>%-%r]YMR!,T:3s&M(nBU"S5q9n<$_/SXY
%Fh-%Lr1S=]YqJHf!98nho+i:7hXK-rB9fCXd/^>s0"i*/B"8$X$hRLMmQW)'==;k-IsoKI?pSGr7c2CQ:';e#podYSJ'X?T1S1F5
%Dlfo'71[R3&IgCV*kNVDh^LsCG]sN$3uJBdFI!-EI_.T@mdIWbBXF[I3f63>m*NAAr\s0js7O8Js)!-qbER@=^Eu4\VneMj)YMPF
%\8bO`j9WZ.U6S#o/9l)"T+JIPAf4@&W!Y2*8_BAn+U!ds'1*Nd0[,k/H$UJE6,Imje+cLu4Ab2-h+RqXf@u_5:E0)"7(`C8A]8g7
%Ef@(sl(<(`*hLt1aLo9$@aYSB-g=#KH$@_Jj:`*e-3B7*dFZR'B`/!Ce:3HOTPRB,Gg\Sg1hj7T2UO4;1@!kQX7LP4`_.(p7k^4"
%5,```p"mmH[U,lfJ(phZlBXd.kV`\Ob+3jsC_Y*j;S1>!:tPDhg7[?3B8;GTh.lg<la,gH]sOI)D@cTXC:?@iHk'BL[;jA,+680P
%5^j6GqDrrCkk]UJZFc&O).dLqK';$>Z)r5n^(RS_IH+NCT\n:(]oLsg-RSquH5ZRckn#k+;a0Qm`rU>cc`ks&@I)R4^g2;A64u^n
%r"tZ@j7"@r)i$(t*?81<=*P\6RQO:/XWMjBn$%]j&nS4]oSi2K_cJPke+]]^otFb62sU@6DtP(T58j)TTGV$01U7M:?iYNd'8hQ2
%a-Y=\eU_$aI(=F@eh4uC7pV8Y^$-If:a1L-hrgFZ))fAgN.#S**'RYAGMFS5lu0A\0'\EPUGHTU*&?;!chJtJ&uA(2"5LqknNXhf
%.U:AB0!P\+?dU1t$ND6p`qWpiSNI,P:)`P93gO%)5E'IbkDQH.7)c#QB68J@kdCE-fEJ$p,kS#7ds'Ts-c"rPL1!4i(jlAP@H?a,
%L5Z+t>bHDD?h],<dOf!2=Xh3Ug^eP?B`"2`ULD:>!jD_9_HDq%o_RD;M]LCQQYDh5JtnhGFOX`+f(`Z17d<<lj:H6O`=a6dQj<(Q
%(YH4?+$0'R8O_KLm-/p@/DDfA%91as!>qAZf[)=NdG7S-_7Ir/Yk#f-m;kN_WSK-FjUlb52NHPjiUa,c/$kn(Rd!'1;jN)SO,S+-
%cudt2I;m7M3?LYN09"8S%2`tZ%5_#d-RQ><Sb/:;4%brbF>dZ"mpJpbiTGuLc[5jrE&:Q1?"-5>lF]#-W%fXU)WMCqa]mNsRTZ^F
%S]cM8>6t0B]4dfXq*fkLB%Sfm#99L(*a*+Kpm,Qo3uM_>*J`dX[tl+`h]_AYQQ9CN3'$uXF1W:R5Z!"_U&#P0GAoOKhIq9;epFB?
%MEpCK)t383XpZ;JgG9D[mMDN-Z0hM_5,6%'n_^%[]#HW#A;5;=oKg+!hl=&3/hcc1UK;C&GSZW!8\R8m_RJe;c5UsR3$C!JNOr_L
%P8*[q)T@[tT&F>j^5l><n*#Hpf"=sikt15.G.k,HgtNml%V1tnn8oPp-slQBNC_a$k^u?sYf%<sk^F-!KQF!cT>5Wm9aCl]Q?Ol@
%jY(tW'C64i.)kFm\gH2[j!'RFXqg\20uA!4`-VmXT)VUi2PPX+3Ad;BHj!GfK(28JOAL1Sm'f'Jn>+E:(CHdE9B#.-JE=%%rD79@
%\ge55dah.Lr%#A9*UTU%";l7rFB7<JTXCjs'L#>p`1]%43?;#^[fZ=Al>,P2cJ%Eh:1&/<(@I_7&MR*uIGr>k7^$-8\][#$1C$o:
%Va<T7P<cQ,ou>a>Cp_OS($kgqrk<u/$U$&%pEV]/Of"?&I0<G_\%p>aYpfX2%Ks3")ha98'g=U&,^?d<Bm8m)#.n%6&S)%XJ6KS^
%[o:#""=*GYW4*B85R+A\51`(6aLWhB1*;+14\b;"^'+B("f8n1Vc!<dM8Q)RV,m%`D$HXse?\LVM%?NfOYuck#BlJbT+TGL2I@Xt
%$a]P&*BSlGE!=[f.SRWk!-"@G-a998rHd?UU'N-,FI*7@0a"bs2r84)W^X"X^&fd,gRYNU0N"l<2Y%S&QI\n!I:X:<>V+E_HFNX:
%!$*i1&Ukb&L7nE]]"S5h#;#+,n>>&jl+OpO"13];#@KJ;U[4r-l:9!V0Dlmql?"QDeu-e(iHg-ND3OlGC%[!]V^<LRbk**u3p*92
%$,%-h)-,MLf_Il_X=p4Jl[>Ho#RJ8EogNd.(AlQt!_<,J!:86XW!A:-\:maK+6PRdJ=j`?Oo;roP=PHJs)]I&;bPCMnJe]MpYD()
%p]5($*U!`YAq5!J&WMsU"%]>0^&Wk;p\CaIhkUc!c6#<[4/L7c%Y<hl-@Q"n*nV,,G<EnUkEM?$P0]lKaWC[fi[H[dKTl55mX`3g
%aBP<"m!4CB"KX@lPs/,#$=ln7fLe%?1BOVd>5$3t:Va]G>=qV6m^8L"6[;r1APREp1g]k2XmY@JHn6WOEgVc*$mXO25H5BdO;5?J
%a&2(L!+EiJDgeLVUaJ4r>&+'7XSR-,[emHcX+-S@N\[N9_T>V;j2'sj_2n5m6er9!7]K`<PG4gb%lETEp\]Sh.S4_oluVk"(lb'5
%XV`tWpMU9JDe.[HTJLT"pqRDHVRO_1>3EAbFEqB^W[pn^BjH$"\\[h8B#W,!F:.?gK@.k)N5i2U1LgkR3dd^VlZ:m[q.bXrPbQ]4
%09'9[I-dO!\UBos]i)>fI=3@5rRQl;(Te3B(FA>^,$I1@^TWGB5c.3rkZIEQrTSm%4%ML1YID":eAfV%)U%>;h5s)ZEYQUcZ"(P`
%Hcc&LKtXg;oH`9pl^=N[^Qk#K5qTFUS*g.PpYUFLn1!JnYH9ANrMp/2d&eL(djKW,s'Q[.([ms`Zg_D.MdHj\Hs^a+LS[rE[@lk5
%il3UiBXrit@f56b2$b:)<linb;ec73^W+@H"L#aenEUAa0&2\cppEN(C<A!_JIedhf_MDAjIRmk.Cb(=$S]fm8jlm=05Cj$E43CN
%Em2G!ojbWsSZMPm)u,\k.]+D&i?!@PZfGpLBlm_PlT'D'Vk:D)=7LnQ^Jlr(eV[Z'Pu=@YDN`Xo!&D[=rRTlSNRXr(MZm]9Z^D_F
%&O*h5`[<[]3N_f)>KW`TCE2hjofcYdN8CE].sjpg_ZBd&\46886h`tM+YDWUEN+BcLeB>V7[^.^p?_7_QTL,]\0N*EX&:*gID_o[
%iP\3f\K.td!ghph,%q\LH,UKVg<0qBFIc_(!d=\RaQq1tBuJ2gr;]Ao3IHANQb!@5&4I2%4MmNb1C%?V-r&\X^SC:B`t<JREIDo*
%SX"Db'BtL,5VQB$<*p_6WU6%SoQ'hDD)ZG^4XFF/jn8E7FZn^3.&Yf5e2QaI`Id[ObH'31<sP/<bl3GE*L8=@orYo@.".=kj0(Nj
%3L%g$N[9-o;#:(XNL,8bIqZIOPt`m=%\d-U4l/f^X(?[q6uLju7oDfp7o%r@15U8Jq"\L]YS%T0jt1rZ#+q[CIW+[#?"DLkg>R1I
%!qL^K-,Ss3D/-hu^B34;)Y"$(BS];M=l/@BGcb3(B1"?;4W;J[klHa6D/8ru^D9G;\]V(pG/L"uEi#]`iQ+?c'#*C)M5-j5[t6I`
%qDV:6^\r^+)tjLZf_H?+Hd@.jl;@WDm3_f2SV'+8\mPjr\9>XF%j#)kqU_J,)GtZ->lZU]GP*#l"Z!,qL&"ra$o^NC?EgHfWA#g4
%J(_T@Hlr"del0Wg74qR30?IV@b?H><>/<gqg%DQ:1iE9.FM@-L4,cW+U!n^KJ,SBc_B6Kb5Pl\EE6u?sX`+$'B("0pp12(e#Ps@-
%IW-q8`T>>H^U,&,nB:0.f<<,RGe][ZpAE<Zs+<O:.\W7->K`A=Is_(N`4pAu<V=C:Cri6)Y,2'<gVBRK^"cocB6(1qs5$Z:cG+kW
%$2>%K"3mIgQQH+G4/&<3[k-qD:Q&E4TAMjGr9);S\c6..]\pP>YG_=XO'=I]k3hM>p-5'*mefiaESY!736V3B=.Md0V7`Alf,th!
%^FV0fratg!e_`QIm.t'^Q`pDf3k)TVhq&)@JPP3<@6"p%?<F=8SM,YZ43U%$\+I&C*9j^3Sipi*0FQl]oO'sF?<LQi79asDgFN-_
%6G.[D\ra"ajVKZ_LVgq-rI/6"Hae4)E)Jk4(=!hrXbHBG7:G/DJWB0*`koT&hZ()^Cr4PafKQc@5DK`;J^43\-`?=k0`@8X.Bnp&
%/d@VqSQ[.<04"k"H"eqIo%-K!>inBSV5a1jRnp:]+Fa$3'1a,cS-8QV9I>k7I+\kfmS8I$iHZpn\./XC!r$GB+e\#jDSW45Rt55?
%n/6re[*FiB5]9f+/hW[\<#/QdPL[Y!_es=RM&ec5MZ350U3cS/]"!1@nLl4fm)n</YD!dR6C6]kfm7RPnM1a5?+eq%a=Z])_!PUm
%kchMjo$eU0G5Ah5-%Ba8"iDlC?QEdG6A(Q8-2(GZ/P1@B['Y+k]Y0P;.f#psg1bEgk\r&^Pa<WbV<`j7e^?hFj`RR#>aLbJ+.mRH
%SP#llln@\Ao#aW$F?-Y^lmrP86>SZN@rI^oF_qkJ=l,Dr%[W6Z?<YO+jn5b;S($3QZHgsRjf0K\0"4`FOl\kgGe(-8]*tlrNK'tR
%iSm&,&j)*/XX"D2_TMjL^:]W@gYQ)DXKQeJ*X9$IQ&9Z(>%qUC+'8:lnK%7V/)+;-eOW-B>*W&9]"7R9oN0M0f[]7!prLuP/&/`C
%GGgd.b6OU)C*UPcX8Tuq6?"5ZP_'jr:bF//ZeN<eLL)79qjQdRF-2f0nEM-A)162r%tjQB!Y,lkD(+Dt;X--H(0S?\X@`/cf<q/4
%iFQke?Sp>/QeVAjFk_.C.lR%3[?pagm97:'GT-toX7mc4Bg7>]HOIehlA;KnNn73hd,iYT2l&,!Q9rnf8gMnn30Rd<p!q)J@\(^/
%+0TU;gUHM5?DbGc;X+G:YO?Q1HKg8^Y;_@mQf3X!i?]IMg(&huBNPXXa01ig_a^IC^4>K!r,d..'Rkn/e\Zt(%20$oDN?!iEj645
%f/blbjR?XO13/N5>`@m%kBi?26*%8qE56C0K[7r$)bN+5DBoI6%iZnD5/2)YIdjQBl6pP_jrTE(lDh;7nE5?=Ak1?,bX"H0?nSIY
%9;Zq@F^GL\As`3mZS2g2*X=XVXaI@mmd&(/Het&K[`BfMChk\J_(E@O23-Ep$$"_eFFuYK5$W/1CQVo*Cuf0q2&fZVK;j6VQ\=91
%T+mpCq4*s7i:#483<,MN.`0'a#m8'N)uX;<f\2RVKnJ^<JoJ-+fGBM4`LbH:(OKWTAZ[VcQh#a<RnPGkk8Pd7YnX>rip6H0/?Q$#
%FsMcig64:KNP&4Mb<JV<`bIke<NhbN[6$[;eR1Ci&T7@%n4LFIk$I+h\%O-_ar"rT:+hgV]tKGHQqRe.c$&GUW?9-Pe\FbH;`Wkl
%V^@]_3pLFj[])G.MdZA'k'D-OIXN,oAet=&^34[pf1)kUXV\ED0MH<QYgJI;ak]WAQ!3Fk$E<o=XF,;t''nl-jX.;P&3&XkkPAen
%<ncH\Q+Pu:CZX\m/%fqogtH'b#If`d>&!<m@e"E<F!1&.laqr.mB'@XIf&nZD1DHQjp4sp]2S/LmtAU#Q_!O(metF&-_&l<1[D$2
%DF[dg)^i6:ED>Rsiq_+NJ%XQal"L'Oq\P7DDsLT<HsP8TX-XRgGt"n_<]4<V'C+hTR5jOeh8DZi2j!6F9-G-!)*)$`P8]eD:?MHP
%K4LggH]_LE)O+1ka`/tVE"\#'mOr?ZWq1=s:N%e&f@(%;/XS`:o5!Ue>4Xe]Er"M6`&;@Fk1Fo=cP01O]j6+E\@!iAQ&"2oi%Y_J
%HbWN@g3jD6]6fK_R+t?r\hAD3[Ij0!F0/<q?S<C:mq]btoD\Q&.CoJ[mWK+m"7GqlgB`HBnqGfr61)PA5$U7]m2^*#4BrjmnY:^-
%XS9'%9(tBYouQ)Z^"N=@[[+%$gcce`=oZIgG!1sM.\,,$UZY%hIiOWP[:;p'h]?-^J`GeQk$@6tEg2EOU`LB@jE=t9Ie&qV=ikY@
%4cnFU\JsTNq[`X(s*\HtWasfkV^Lcp&e&hb#t_t>eVtPi[_k>QB,A_1c<9c6r#ia_/>)*L2pR<VLQc,Di*Wu%'pQS\Ag%sr4XjA-
%Q/_UCkot)<\35eBhrNgqkM8Jkj[+@I@P<aVgIE'Fjn/.U0Td/ZQqOPb3PW4(Q52*bQ0n4/[!2OtFV7l;>ub6l9%Tc77JSueIpTe%
%^ZC\!^L",!6u1JHS&0KYIFCjpZaXbI[s!,>=!)>'&&mqJi)[sLQX$QJgt`],g\:^Ea>+0F+$5Jun'=f$g&#rd+[67D'R2V-hc(Z^
%o%NnLjSV.=\A-2/O/8m\kU@qH&"\q9p>tPt[U7H!pPX7l:Aj*L^PV.EqHuO3>)]$6ElEt-7BY9K/"W#jj8K2j;p+jegJ[of?S>(<
%e`ZL;M<U=q(Ul[t3+,-![rmlg)TgW7L#75/<DG0M#*kNIS?MK'^L'.G00`KEH>S.k5AeAS\W,`?Xmsj,eqL_DXF>I:]rec(Z^@+D
%9=`LMF8dfAI-su.[pISG7eu-iV9(C(kDnEO9V3eolN(cX(Ts4]c1knbfmM^5#Ha7kFet@0@IIBr%;)ZS/k>d*K0B4>>q9f2Fu\V0
%d)kAkT/uA$rr@e!<M$Y<f?8SjU$Lkd7Q2C!^Z[kaah,7E;FUQ!D5X*K;.c`I,%U!D0q$,CghRRN>.IoqI(<2\n#*NSICe'CGZE6Z
%]BD>MVqgTbA<l-0281#Ge2#7WlgjTuql](Z<O]2RZ@!VF]\H\Iku[0Ur:3E=&b#-GCXHn?Ius3(YHB/:HDJ"uSaWDO5W!r(]6tsk
%7'h(f8+H#?,\PQ\Og;n46@`KjWTR6'SQUol*[5Cic1OgbhE0dV@$l0ilgJ"R#Q7&5mkc!@'T>0(6JJ>9,dL<r2cdA7%0ObPbYhES
%g$P]/mh<Q4GTD[@Cerg3pM6I>.58i=KZ2-QF(=;EL.PC4KAsu/(1jlt?_$!0Bn^*Yio<nlE7+RXk"Fi#*plCbU"&qe+LAX`Y.u`E
%?^[h4P<l3hIjnk>FVV#(CAh[;^0udVo!Fo:Z.[b(-=g2b,=&i,I&K69iR@?J(1R82=F"6&o&2il,&sHG#;D,5]G`8r9B,2NZ6h]R
%2ROi[3KuL0J&2QZ*(p7Ig@iKOTE[9/rdpd-Tl_SbUI2B3L+[]9Mbhas_a-<1=P?maG=-QV/Xp*r708)2fKfrsG:@]T+4j\mQ"F^q
%.(0-kk#Qo/)N:tFQ_i1tmfGHrY8HgVc]k3tjG".2ArjB$_s9dd+m5;YL?n2(4Lr3E\4j*,+r50trEC_T/LT9`U!8MdD3QOTmRb1J
%XX,*(>?VE-=Djs.l*Q/Gg.o9`V6Hql(Zd3ch?T'=)uA];`ZMeVi\2":GTa[2&/^-N0'iu,95$DnBn"dK9HR1-jEgZZp;UBZqk1c,
%9PAc7^!<HtW`s(*QWorao(2AROf"*moQQH0X^M2ZEF>P\n"@J!DOhr8+cnV0T1D*XG%8oP82nt<8LpU.6`J5JiG2WK<u)HInbdKM
%0D2iW'l'SZQ<Pm\Ba'Me'nBKe3WKt]Dph]_3s1sF<-a8+p#3mS9kd#,H^<$]gSme/>p_+VIe@)^3tT$";So#6R.MUB\k!*.#FThG
%><<Xq8!c;*8r?a>8g(sXoh_Bb5.p">0^3K+>HFR9`NCoX$>g5Q1T:SJ?k1+'r7Y`I[%hK;fT*uZr<9<Bcl]p`jr8$G=Dpe2Wp@\`
%S59l*,B`B*Ws34:O]buX"Ht_-lm?"K2V1hr\%BpNaGSZ<:la2paR3f(#;"95c1"X9:%g9(g4,E2dgK!O.f%]YTm$!g36EKs#7A?i
%(<`+V\Tpn3km0<9-5t=`V:3!)cU-FB.g3<;+G!HJ_Nf,(g3m*Z@'%gO11S4$U6k9ApqDG4_5Hu*DJ,ZAWhGf!r.ZT(rEd+!XS:um
%ELl(C*#B%Mml>L/N9G9qD#,]=8p1p&3k.2S7]kNu:ZLF#;Kcods&a/Rq58kp7X]&06T_6Jlq(C>W*PBi'__2n=uj9J@5^JHqTe4o
%-b\A#jtb+XoEk^c:t)8-f4A_#@OM\V]'8>2Pq;^QXVL6)d91P.Sa(R[$<IB+XL8nl%^5IUb_I4"D?2l>$hEj[1Ab6_LI0)9EiPk9
%4:HpsZV9L9kcYRb^]CnQ0J0R)k,bB\#k0S`H!H]>6!2r[Vq2<Q/R[Z(-(+JX@VC*]ilP>EDQeLm7cO=O;FhfLmY*HdBe`0(&o+F^
%/IGiEMD$7o#>>9^FmBlZCeqXr']KqJ%6:nAI>5M^6*%K'q.9T#L7`W+UR9_s`Ghuq"W*e0j=L*Q[ApiO0FTieaVVICaZ*A-`<SOl
%Hdan'?)Zf%*.2<tr"XjmE(7u_\K(T0KjGg`lu"SZ_.Dd9G'u6)6V"DJEt&Migtkm/Rq&6eq\(!)+@so&B=C\$M=jjso:XuX1*H;!
%9mX^[nmhn#lm;bLWYb_Zd&lb=Hsh+H$\1/>*%$`"S<@<ja4ljf+FQ]!`rS%#NoLBm%[V!$`X)pj)a$W:,J4Uq?e/"hc>?cqV2cuJ
%0S2auFN2@pe'84%:ND/;fd7-f&Ub+NfGii%f!Zee1'7G!fB+%a9*O2!pE=N)kq"hfFU8X)>rndF%\PCu337OR*!X/SP&)]q*EecY
%0&uXZoQ#O0l%?cS._)lrGE?o[KjbPM*!(3%)S2H=Q:&n&9rI2:>.X*gQ:281)j`RY7&X4(Q2R#.3!SBHfi3OH0U$\dc*kbm1>bX[
%V(X/j-?FsGTM2R(Rdq(+b1=Fj=n!%%B1V!YXUK4(mHg2i5Z&Ap<OT/L%s]oWj.ZRNDd?dl(m3&T*YJr]fjs.(*;=^,8J,^-@2o`^
%2.E&J"+I#3Ed7AAP#Jca5)h>.i932O?sA8t[c$e^DS#cIH6LHo5P)nW77;NV?_lR<<^j`+?6FJ@9,E]t7$hPX`+9pC<OJ-9<iI-,
%$@LKO'@F2(`F0.#@:+2EFrs!p`)XpE5RgJT2D^Em_HK(AjSVd/7'96a_nd@Vk[ALYP"as'S>c6,W-2&jANqRC_i%8*V)C*r$I-O4
%R0\qD'.;dR[ZPek['NdeR4NQkmiWW2gN0Y+3HgV2BEASU4_@W8#j)q-6c1U/pr1D@DE;mp0(/th[UO1#P$;W0?'?mZn"Zk7/cXh"
%_GZDZcHe?CDLLuK6mDg<;W79XXfbij9baXqV\s:7Z]DC$kbE6c9*gkhN$dT>Op$L69-b3%7Vf<]%%h,is!5_d<eaD)q+"#jQ/ND9
%BS@MFHMdrpdH5KG8R;j6`SJD\(T62cjlX`"Plm>jB"jjB43XLPjhi6BdGAK9p'a%IX4KB<I@?X*HZuI,KX:f<&hFXt@(;c`(!?S^
%S;U;XglqoWA@7`kR>QL3?,"-CI5)6%Ni_!\9o7q)NB^cr0hpW5'$,c>DQe'=<&IK]-gJh-D%\dD">#V*hY5dNAV.H^/<^]b\Bss;
%;qM5P0%=ji_pl]Vh@?&8?0@Q802Kj!m:Ab9)&.-cp9<0M%i4;`IF2fsSVb=QS_-l8dCMk('fEO?WkdO2*+1/!QOj?-L0[%4q(4tE
%O+;%a+#Giu(q*5m3ktWHZB5N1#"\&KE0[s3:?47=F.p?P*>RX[m-o<%XJ"^bodbo@5poib\,6Y'``AFaTDMW?kN;X#`pM@BJ2<i4
%?,h^RH>]Y3)\>c.Ba%04<5N^]f/cS&l_.$+n94HMLUP]18jGmj&UOX@o5MG[aJ<$m-Z2Lm.Se="1d`m,%hbeN3$c5ic"!([:64u_
%7.JJ7<\.dkE3u1k:Go:?5u,=$+aJO.et8t9;#90dcdMgKrpJ%N;`h=3\6I"a:6>GUF-(iF,"B6*X3E+YhmbU,QaGjR;)%R9PXZ+#
%=5q,0m-4qUm6"RX.k6!Z`d?[o6$M_<0k6^lqS88"aIjh,Te\3T^^"eYWC6Hb`anMsr,@u^ku#-:bfuP;6k=^]Kid1(laGmDm?u3s
%!PHBS0-+5[.Se1pG9.D.nVbA8T;pi#@Gs)OOl85Cm,#]BJeUc,R>YkibrQm`C2'oW5ZgI-s2MofGW6KO1T>LG'P/$ZE@,q$lanOD
%0$>3:i5kPnE?8:F.tm?=:K"*OT:XlPd?$V+%BB-W`]e'9V<\WR-<qs)3XoucCkrR&'Vc'Yb:fbKb8\L#!na#V-n@S"$=r]VSI4q\
%XmnaCTQdsgX6^S%n`])SV,g,ef5Q:;d$;Dn!$c?``k,Z%!#\>f&j^R&@UWgWc1=*p)j%.3Tqf5pHtrC:?:c.Y(>)#7C38g,8##6:
%@<jT"Gml5gJ06`>rMTsR<91->>M,+H9WjJ4,*NctXe[sgD74#nYPD9=eEq@>9'ukK>US6p3S"sieqpk(L*5(jg.ekVXVNe.n';%/
%PJIjL;,@TIW10nB5fDKJV`,a\e<$,4D"oqC'=iWmq-F2YVF@.<]oWfDkc:OGVR(QO96`NE<2u_`Co3+02k;l7@blo4ej4dE6]@8Y
%:87!jGV%6^AWEWk,hI\=f_p(*H4.4>b<]D;<QRDB2^SK@CffR'G'5E>*a2G+#sJ5$Xu7Ed*(J?eH9R*a_C/^\'?*ngDX<PA8Wn7m
%X52iVnq)"%"dt0HQX2p9e-5-2KcSNEq)VNTS8ohkcc7u^r_@5&jQ-IAXZEO:G>>mQ]X)PB@FgrhZ^?IL'+abB;8@'%G$a0tgRT%g
%Z^?oi.2?c+pi98?!GolV`oTC*\Z=8@KT&.jEr-&o-o=7>[FeKB4`C&\ku2=7lALr\BX2qbL%r%PX;tUoNo'C/q@^;,koV4?-emW/
%=tOKDa>NS(iJsM&/E%:4'K71Kk+XMpW:n*uMo2U,1Sp!gS!*1L[U4"d(g(%nNsc__+XXB$1o8j(]$(ZO<ph$2._A@<2;TX2X[@Po
%ftZA!1uZYpT!BSebVUA\_8LACX1Pok]t(;smK/s/iBcR:DsL0VhWbPo\m!^+\(c+1IS^lK$(Q+[Ue@P$2UQb%^Xs`1[!X+4Tq/,^
%-$^38`K^k"Vq";r^#%VIUQ)Dia,9g&Dp=(WoN1%A>;$.6JK70_>hE.VT3q7IN3Z5]p_[Q(4PaB$pY3",QC_(CjErVUS[GpJ2/ti]
%,kp&JCIH;M]FgC\$na/t+CerJV8Y]^cQopqC*pJ)P8p@);^5bC:?mO]JCi"s(hKSE5'L)27Latm/UC')/(6O$@;.6\S6nHN<O=UD
%(6qBpde98>JJV&9]ALYU<[XmDqK:`p0Lr0I??k6OID##V\Zb)saTJZQ\+Z9Db`qTli@(aTCU0QLqiLNXbk3L_?Bs@q.:)@H7(K3H
%:8t*#mgFMT[=-3/iDlud\obJrVC:T?drS&?:']b/HGQcLaCKZOSD)l8>/X%.OYSg:(:;PuN=0]_[/_OK/5AO?65qA3>k`=D;b=r^
%9Y@rZoqp5g+32\X0NKM[/8"8;PU@jJhAYH0(M6Ajm0,<mbcV@#:k%.?m!(mQB`q>-%0`Kbg%kK#$mZ7)Ye#?N%.=lSQ;T&XFJ4)J
%'a/_Z`\TRK5j!6anJ]>M4QhX%K9M\f^q&gO!X8P6#>i,=@VIWj%DA7d>=\p,Xp"]?=63D<=<CH4Sm2[XO^Rf0`8><`_U>F<p;NBM
%jDk%'RWph"/RmtYJl@>l6d@U)"t16f1hD)"M=J#?VM=0\&At]R#0h9(rMr!kXXGQm:t?M1A6q>Q\M`2W!Ro6HcL+T-clp:`gWHaA
%Y&)UHLSrO>+h&HFdS<j2dpYgce!j+dRD2C>1Sd_MkJOVGeFW)CcB?5Ih@53t7-nkIFdL6ab6RR^]jtZp:#?*s;C</tJDh32f%PK(
%4:0s*.NRoX[B[AeQ\r5nH@bX$5BX3ARN_FF;hi&nN\7kYXb^)*ZoJp)oJ[qm\ir?@S+h6Fla:=+(!E]HlW<U_n7i!`%=\m@.FE.i
%ULc2]d?(u&$]foU\ur/7<Kn7Wf*?MBC&<$)m<CCm'F#*A0'0<BQg(o(Aj(q_M9?8UZ=F"j\PLBDEdMl:ZhP)TV@oZcEiBW3oX.qu
%&S;E_=#X3_<9:KJ/*EEO9aZ%@:`O#;mKYVTi1E]5Qqm!g99NUa2%M]B5*LgZIGJ/V^Ce0_<h6F/X^]i&=^:ofkkW"O1WdcLmoj!P
%eF/*W(EWjs_s8VXlSQpS*HEbK*;6?bn`MH"hRmrPK?i-mVk5RbC$[N:NS-G^\5j4SIO/#Q$`UQ17L=*i_ZZDKG.Cl0g9m,%a,E2k
%4c,aeb*_Ea)Y2EH8NSrfdkN5]7V6U,p&=2B\o_fE`q7IJF(uru$r0Z:f@(73[<!a?_Ug#_ER%$75Il3>6)'IcgjRh#-J4Bedj6Fk
%-B<\o]%l"(%DAD/VOi8@Ck(t%*PPRS$/q$X&$%to@D*"SZaV9p*pPgp=N2gYK2$N65eEf!X]R=SZ8EWB?+n;qN@^GtZ\`,XK0K(Z
%A1_,BW7XXIC2L)YlB[e($?A)kD&<.<`O:FU)(Xt"?i_WRS@ZgFN%d*\N<0T:Y=tr7CEiLBNF/93QH9K1i<f''eCi16>&20NK+.7@
%6]8HAB63"70J3LQc6"-;q^6`';Y97e#h0\/LoC&D]1\f9VVa@@WgH3Y@>)7sMcM8F\::ihl;.!CcA8l.UA>^!+,*ZJ^sG-p;PBF0
%D*qJJ4(%D,WorX$7C@Hp"iU*;/-[0Z1*Jo&G^Z<5M4eWuU6e$338BP9>earjaX#7sCIGJ*dC8"H%*1mFmB2N<K]@&NVglB1',$X)
%AKL*MOgreEX)BW,`%,or7buq`A+\78pcp%sE7Ad59=8ZLBr'I4[HNqTn"8_>U]YD)9,BC'ZV-rCWH[QlQZ_?;kNfmfWT2'TH7_hW
%%:_OT0&P8bA\Iuo'Acd!Kl4SLKT?+[JBd=Y@t//"N\Aa2I(oQu&8]5^q!i!!S/G<c_OjCQBl;t(F[+]g@gJ,OfA7=EF>G_YJJ7(=
%(5$odM6<D@`8RWc.A5U8"%DpAH>?7WB0qaK(hurn"YiQq>"BVY=JR]9g,BmVG&.\56R+Yri+ImQN%hR(1D++:1Ujie@VleYQ<?]X
%MZ!S_Oc1#3Gt3$7&-Q')p<INHn6>XT)ebXE,T*;3P'NBJXR5!5XV4*\M^C4_$eXS$"NK/3_:mS#Z*;6QX_$>^)`]oK3jcXF!F#W5
%[L4=Hn1G^n9EC&h2-BT5CWEF*QjDE@'.PD:4r;ZOLH%4@6&a1.RmQe$Pf3HRpF<NH[=r"Fb3k.,@0$r:Xcu-!`;RB*fEaW@E5B;P
%V%7JJlII>l9SniqdsAK2Cc.JJ>G')6D*_YR!r%G96pi1@6nlg!63:!KeiR5TDdp8B%(Q4.UNfWprpo!RW1U9J4%Of)CN#[+!=Q1b
%D.71^UCZBTTrWAuc3D[k+U,^hEsmeBKMnr%D&;ko<rZlUhsSP^GmmJ0]CHrm>Lo/]pHdFX=7:>*T2+b1a.<4:@f+1^l%d/2f9k^g
%^n:"m@1.g+R?mrM+nY]_m_63+b3-?)PFc<s<@6J*m?]!lWE8BY7Nij]luB)jd6%&\B%FR^8brXt>QXcHS)2e0B(+bR2pZUoRGnHk
%hqJMMKhn+kqY>u&I8<X$-?plHED%Qfp/"6VR7`O_LL$)>>W^$"T;]d8qc\DX#P]rOo,$(hiiA&V4Dc8@R<ZqbA\V5s@/h8C]OA'<
%1`pSUpGS)I2#aJPnN[o/4Xb`7oS,p510Rj_*IkJ4Y'%u,h8SjGn`SY03O+9Sb)6ZV3,eE`i/1<ST)[$T^!T-TiI#e`%]&iY6>b(#
%[e+m`9;uJ`Z\%KH(*;K/H-[V'.(HaijM\68!cZ'ULuG6XFad.TF)&2\B.-Z=VE7\R8+#s30&<3#[kF$9C9+KHjZ]T7=POi"GVP\3
%ZP&k8OZ3"408"sW?H7Go!(#XOd[k&r,9(aCDt_TDkUlOe%]leCo(imWB[Gtp!CuP%(?+Tr?s9=f2\:Oa)pE$n5$"?RdGqrBrO2Z*
%&t=dQP?"beCVP/BnIiPc)6*D[ot"^t<RM\+ZfZVJnLl8I5$>l)N).C3C_>Pi:!sYPLlf3s`s$nE(7@JkE^m`jmX.7\Mu):9p]q\a
%8NGoFXus2NP(;1LibPpCHcE8gqX]aK,,]RbpQnAe7Y!f1r^,;S$1NLWGZJ>]hFp<P3E<j*MTW0'AA7$XoD?\h@e5:rY#i7n!<[=0
%HZl>nE&G8=q4N#3QcbqMSC:Ppj1E_cheLM^F\+!:s(__RNXi?<j`!L#70VA[WX8tk+[eC`jEM0VN"FF"$*qG;._]1nVCfjuG).*-
%^oJ&B<>AkCObF&K+-Bl)@+bf5"+"BEOC0nQ,n_=S9SDS>(7KLt,)HXsRgHHXco_u(=;<Y[?r`EqJoYZqAJGs63%;^:5eb)::;"aH
%8d#;]!]dFM$d5Oi;-7--8EaA["R&]`fEd_sr(rm$7Z_idC:b5WO[KL!3Agl$;5'!2+tPAqLlW*E'F@6kE"j0D,F9VT/+D1B7TdIA
%a75#oBV:_<R>\$5h00=$:e+#DQH(%W.3e6iJr2ZqUq#0.+=IJHAgM-sP`^K?!XEQL+=_ok3)4$N2P@b$89$CiNfXs'#$Ao;C.)NA
%RnR@KX3JTp=0$oYb7[.Y2)<NE==d*1"B*/e8jj8q=lFV0/5QEb8d_Mq%&,!M&`ef,"jfG6JPI40(!p_+k=&YRYhK^:?3K*DaZqIT
%dJO@/ak)?cLt7iI5n^A#\;6q9JkJ>7UXbYK&q`[57KYK,6Uu]2c,3O*,H.bWp]YLIZ:b3:M0u"V"'esF0&R:U+/+9TRg&6_bq(7u
%6@sa'j^=8\8g?sF:n&^s(2=KA[#.HYe;bi.\=*RBZjrh(HQ8W8#UgE(7[sHVO]72M6(V?+aq7[9n7k:cN1_^4]#RE\Z.NpSE_->&
%<FH.I'NX0]ea/IO'9<L$a<DXq+A"1e)3]3!Vo^u"LbKGdRe1PC2q2H%:,q5iRs`?g[j"<G_IX]Xjt+L[W\B)>b")NW+ZLYA!i).B
%,UuO0PgIEU@XkR)-)*Y?kLA[hs5[b\@-Bg$k['S&bCU>*.e0gWUduK6n_jE-;5&`C4`QXF(N#U='3&FMi$;Hc0e)9"k[+tHAfMB9
%CiZ2.=9Z'_UI#4DZk9nT2Q/+K\Nr5YM=B#n^dY:R_i=9le89/T+`3Nq+Ukq0!?"E&Y$c("bE4>pRNN*&U[h@f"abCG^cs7VT_r::
%PS#,QLV?;U_/6F?1;Q2[$p3OB,RK/7MGF,CKt[]H5sdM)a])*u,ls6e_)@&nFrSg4!K@oKmfJdM#R!in\0AF>"Z1a#8eF?Dd9fNH
%M67/Rco;`UL!pPF!eDO*,9oW!/KP$/!SNnub,tr,(F7L4NM(S?CQ+Aa^6O<oSjJ-E/J)Dh5f4Im"4nnVVHU%q4q8@1;M?`'A0b=Y
%8":G!eu)o+jWRruD@m(?FsfKajs.6sqG<LS:ku$k*/6>!.!-daXPdgtAHAA.kVFIf'q.SA"$;f[%YH1nP74Od,#r/]!eZ.[6:?nL
%$oo0&(ll*G#WY0/:`H2E5cR.AEAqCg!+ol!Rmi-d(oZ47JT_Wk\rZuH^s/iX1(O:=BUk_DW$jQp-jPc#E18(Q'=jJ8/`SiM*9nQ&
%L.o3(/4'N+Gh*iPo)S',3GW.nP'A>C<X_cg!bl't:N3^EA1(+OD)IeVappA:1k`K]6+3PXE1oZFUf]#WlikcL-5&^;ACr&n^K6KW
%O96ekQiX7NAY+-8aAp('"nGNPi#b!U(%ZQc3+7U4+;ke+bUgP0Jfn2pocP'D4rZ="#aERF$Bc#r45_EN#`g\RD:4/>%RLA4_Fpo0
%N@H3L=>K&W"tWXF1sh/X-Q_4SalO*0!,l>`&e.AS*mcYSX\]ekE_0Yog/pmJJJ7Zr]33!UN$6<3h'K92W(6YDUI4;OUm\2<721qm
%#t;e*YUDf9pE3]0$aT&ph/9!fM]RE@l@=cU$&M^8?1OYoN'K">O3WC.ac']gM,k#7#$@<BRcL[i7%C\/b$E7Sk$92$BSpZHOEerZ
%Cs;o>cHN."W-c`J&"I3&1FC;,)c8,:@Y2*boHTN5GCkFC$)S1>.gpOg+dgf:WF=K-MDsT/*B$6O&0Z0?HAPrsOsF*ZECcbr!\GR?
%W*+NoX&h^r3@gT,&IicJdVsFkGUtAOQd+S\_JfbY]%\oA'.&K5ibIW&g)+"V\XIdUi[rOdHR'KYM+<2A+U.NXLt4%"&:]^F%OqY`
%;"^5e1)uP^jCFEXZ0XB;QZAu%\NkGa5ZFdSa`K%b/=U-*MWp,:BOm^3OFS[Q+t+]G*'..n%[=@gD&25$ZqdsHVsI59@4<&%cSZ>D
%4_->a;M&^W$'J]F<"OC+4:ipkCo!47(AnFQ)<hof%#G\f%+6_jHr:YDT8B=rHr<5uLp7:24FEeRe2su"_+DRB;95i,<O*H,GdE:i
%72j#[R5(117cf@-B!kK]6S9N:Z5XLA15-kh$YJ4P,gtaJV,7g=#Db(a"\b9u"_+8/fSr3[*\^hABF4eiBAH;":=*aqLnb:o"e?\h
%q]ZcJCN.MR3'f5-aMq-k+Ce<KrE8b`ck-AZg9;5IgSeX[91ZJZJ>/N3M/0H07.6jj`36aBk91bb'R:Wp*jpho<gt50D:f:Yc(N^V
%7hE-:rgoqm!$lLHg47qj8h)]k<b<p^OVt1X+:a5hB##)F'nps"_9D_#.&gd@!Qlled"p92OGT,e!m<Vu['OA09I``6\M7:TL3t4"
%MFC5DXH>[sAqS;A$0udQF)X_[E*#qo[K+?.(8keMD3coCbX10&*\q?>=gDcZf1;9jLb_Q!D5;+lL)@T=pI&2:J<:JYJh_ntE%6H3
%R+KO!)Ip2&8dgMfJWp-m.#GMbWAX#p3>ie`_n@'2>r+jBS:`6T0ZQ_cRinWRVVP-oZ[(3^gW_WTSWOoS4%S%FZI9qJ5C...`)DFd
%/5IrA)Y3X0M7S%lG7L:j@]-sQ.cSt5Q>?CgFZ8jO,g*uCkW]rk=<VC3,Z.JQ_.Z]p+I-D-7KA;UI[qKo"&_[87m`']b[PSt\OUhQ
%R=W9kdr*c.R/':k=ZT)F$;T8(AoIlsaO=B(+q,]Z/4T\5PY$T=,m,A(m/qOZbX[i@aW2nGJPhnn\'-:qmu9IY1^AJJ3ltfgEi[MW
%RiH"O,@ri<g`s18V##&kjch7\!X,O%'M2I[WhPnG@F7>.b_W?'&Rm7)Y\(5#Um!]UZ"=q(NNir8+iU9$<:=73QHl1Ugf-%q!TfCk
%&nSrU?]$iZ)$9'NC874N=``1)-mXq^:p>9dTq56T7g2kT;Mklpe7M.l5ZQhhD%amo[#HG3L"N9NPS`%!`_$R]M%NUiLcAK?P8u2)
%GVYnB<=.k-2q5k+SJ3ljG+'^r!K8FhWW[o1Xlj8cM^3.!M+/MUW7!2pLVcS2P3=>a<9eW@S8I5h%6@rq?nS&)D,ciI1UVFXMC9fL
%PX:]L:J;7_Ku'2]7Q8M,=qiLN5Y*\MPZHk4%8.lSh("fEa5MDFj<'X1N(t]hjW,T;P7LQZ;-D5Dm-(K<b"9-5AS*0N\-haXn+)./
%eL]YF5A;I.:T/N>7-C<f4&or-EJCh0Vc8jlP!S[,i?VoTlLB?$XG%NA3k9HF>sOT[:iq79eN6.)QE8b5X$1?#8GRu8MeNil^W8fs
%hWH`;d2>c(1_-/7]lW#=jPEQ=6P*9irdc-olh6"fWhB<QneIBlAON,E'j`*0"H.^C\^P0H@prnc(_lm+TIC=ml*OTG>LPcJ1Dl%+
%`LFJ4(t5#5G=K'q8uC.,LcV1e4\h(,#`"<O7ERhW&iJb)l?Ncpb?"=:X]IoI9$i61DGq5D._nE?Jmf5*LTN3D;)3tq`r]181sLA8
%M1fqKobU<nK9'TZnnAt5l<#6*9Z0@\;ee2m8)]ZS.eG'\5acFIaZ-\Fh_K8A6#iSXoXT=%`#l!V;O5sf>A[=\C.)GTIL$WTPU$`_
%l"Y:#mPN[C3^#Ob]Vdl+ec\D6n`C$&'k!ISLQg:?WH^jfXuPMJ"U\$.TLsIHMD9045hM#ZJ<GjDX#\t:Y]T_ppiRH%aN.o)88h.Q
%T9D7Sh*r7`YtAS]+]*tuU2:r$BAEuHE5JlE-`Z8W>\sh$-h'eohLM>`$"a2b/&XbnW^(!KP^#6%kd4JOi)jsa_k8KMYCSU'eqQC`
%nh%25W#Hptk07\c&:ofT.@IG.[7mK7hCt4)WBRt)1lVUI\j?usPT'jA#"3<DI>)K@K./67Q"ML?OA^n3TNnUdWfl%E:_ZH57&j%Q
%6tZ>35\6HpF4r1aLYsTlJV#,@G;*9-]%ZB+Q5?o3_%3O+p7]q[GU`7`T/4"-<\dD&`7"nTcsq:qNcL>)VVVFT0H2@fVBUXK3$KKa
%Wn&p?CP#&u(1n!F")grUW`d4fjoPe"R8b:AXYsb7oL*u7c-6csQ*[>3S/sru9`8o7\(W5p^fFEt[^eXL1gP7&937TuE*'*"VUM;-
%c?m^5)]:VdJZ_eCN'_g</.#BZi-M'YRqB<u:+('9P4L/gSODqG8fV-"iNua`P!j*l<2=`%#cWt:ns!+:J.e&YYq9[(%b*l\PSL1K
%6i7Y_MNP(Z4\@%GAbVISAQlDPG,T$NF1`@>=1"b+7LK9-eV#%cQ=rF3MMc.<.Z9c'R91HJpQCgAW)hbB4[8&*,.R,Y^1ikWHV<Rh
%--iT>8bP3`,I=L_##p-gL-\75#ib9uDK)r&C4jZ5-=s9Z.r[6fXU(Fobr.Y&Qj>aG%NS<2D^g.]SAG(r&EEi!"M%TM`g,\*1XnK1
%8+&pb:hEFXP8OG*]'[d\ZNq?9Y(7N+.N:ZAP$M?SD:[oO&S*aT[$#TV$-=j6dH);&C+G]tXGNkXlCubqnicBT.N?;WcHZWn,m1.S
%\Jn5^P.9D8%EbVQK_5nIE?_i*\jA0C@5UqA7&r"-MMOY?XsT/YSTU.KD!&!/P>*\uqVuR,Q#,<QUZ5NPQ7QQH;2-6f4qIm;W'@1s
%BP:JRKr!1m6d%Q[Imk7]<[<crW0m"@_9cm1dG@G1"88_@]3;M:D3ulJI%3*q80J?egn5;BD<,"V:e51SI[X:j0rcZ0EuC.ANMX)_
%@i1H>4=0-410paW[YAj'1hGUe*FPq-EYo3ail*';@'K]c(S-L0naNGJ]HE;_blZ2AO8oN&F@dF[n[N?(LC"<A(e^?<C#C[0H%j2r
%[k.MjqM/"ko\MM<:*ro._p&5nocol\#:`<UO%^=6>+`pFgrq\"h(o#&]sm7R,j2>Kp&ak.C1CX6E47#.$o5\+#pmA(T^;d"p0&<2
%1k5S&"ULQKqqmn+INCsH<b?Je^"u9fU&)FG9Ce5Vj7)VgPWh#HB2=^9Qm=$@SbpOlnCXX5T(u:F[d"lfH[!\86cYTHBpKq454d+Y
%J#SO0<ri84DOjWb&Ca7)Kp*<H`[6*F%'s+j?UuBrPKLG]l7gG#Om\&C:#TTX2O]k$(jDQ*NAEuNHu:b?0)rh8WdF2XW_)jU!lHBf
%:K0-"b2UNQZh3Aj!/C;Sop.j;a*&<ZmFh<^msN11p26eup]Gkd`m/;`!4T#b?E_TLK7.+U%r:aCFRQ@&:pg#sLcWO.4Q[;n=51Ie
%OP8u0a6du2`ueD3m<09!`*mk=GuFN`khiB.l'J.g@@UBfN71-sXmL7R;a]sXL&>g8r[?P5r'F^787#]1MA#?M6sj'S:pBPE>TUfB
%bFsQaVE)\YGanD^80D`r?+hi0=15RNSAF.RNB>[)X"@qNJK*$hP@*OB=Z.:!Mr*)D>FCu373,-+A7FEmMci+N*bXclo^sS"_Xt$l
%\CnK(:=a9Tfeb(@,4BUQ1m;<UP@1Yh<hV.ofAQKiMZee-:>TR?kN))oI9fX#jcrQqX9Z36W_TPs_;;o[)3OD*ITaSjQ4i09(\S@)
%gp%[%0@VU<*n`@YGU,&LWHWrBS1-1jF.`7UE'Z29<Lei'Btdp#c,_=d\@XeHio*6Wm'n%q5rLH/$?/%m$Ont!Fi"6]9$;<6Z2QfW
%<UDu/_06^!,N%X\fOATJ.-=B[-Q$h?OteQ^?>>j3!W:%rRPoE\aQ!Y'D_UY;D=["m&,(dj3rh?aKo]T]h\[4NY`bH0Ha$[Y6?Olm
%lu,Mq;/>*icON<S=)ZU?)$\WVVbG<U;:Z)\ku-k#l:YcWDgHcRc)0L7-9OI\-K`#=+mAF*]l.AG8WhXXK.]p446?o["3m]"cObAo
%q^2qAd`>N/GSfQeZMJdt@<oQN9b(UaK[7&$fW:3gWucjDZGD1+SWcM_$WE6%Che9pH"mt[)#'V@%Q$W:K^Np]/gVK1g/n))O.F$*
%><!]b]'E;$9NC(oAG,l0*7'.qq,G>^De_>SUHX'WZ)J&p#]BffiGtEV`c/b&lWEKrnt59\>(0S8VhKJIN<]VM`%PpcYDMKT)p1,M
%F'k#-k,TM3iklp6`SGpijnRG6cS#f4J"%#;i@$E$%Kp:_X*hY$0t4"6d;`$I@5%=;X^.J^ZK\ABSWh.5VTkKI;bsAaAC[NJH8dCh
%+?%S_RM/;U\%.!E'gfN<g^\LKU4&Tk#"OWsgkWIgbOB=V0`tW):K50[@g0gCd^0^2dpS;pm2+)TK55[4MA-@Y6BbKPm+jDPQncs(
%RM/;UpUU;d<f!H,oh,'A#2T/ZXDg9"4_/A^$Fad[9AIeZ4^dqAQ?0@JI7,[`M8:%@\LTeYmcmLj`J7E;?2!]R];$ecU8G?!Y<7^g
%N-e>[#FZiN6FXLT!\^Y8(V#8=+"%!3A!@T1of8:LQa(?Fi`5Y`,%IYLB&f7.oWZ6"S&-GKrge#Y1Ldk2i?3[hW1!h+ZV#9O7PK"m
%L2-/UPQ[#F_3,j^OdN.oHk;1FWb56u=Fu\EXH"sWTQn6+Jt?F7KEK_sDMPBN^#oo",!EZ.U/hR`(df&4Y=YRG`eQ^Vq$3nXk^M@,
%dgP%uHn8W;\D\l?_?B-J+\SQm^(re'g*T,:Np/;6qeB'YEp>Ea`5K<04in<h]&"uYHpK(0LjO?iYK&]LCe:rAM>*Ef!\ksS^_#mo
%7PGj"HAidoLP$G/Aa,NB!jOopL?1tC/lL[g)`6303d9r0cF-p<#Ehg#lDIs++d+PIS_t>t8>PM*B)Z(>Lq)MW2^cB#4?O*9iGhaQ
%4Y[NV-19f'n^NGW=?F(:3TLirVakZ-(\9q0@dDZ_T(NY=)8oZYG:eG-*l4K>fCBJ*5C*:F^8p@n"aO:]GLuVoYTtXWW:D',B3<\#
%E5<$3'#.W=o%5CqHDRo"ESSZqpTF5!M':BJc5G*Y5]HJ`/^@oh"$sK@78JZOfI+)6[EhRJ#H*^*`$RVn>kR\HM&aR\ZE83:L;aD9
%#+A8-67MI`pC@kR"o^&^`C4_c!r-+UnDOlmbA,=!*MKYL?\18?,.:s9e8r$c.i#H[Cl:]WVaSP+F8b]\@9D;1%PgJ5:VM&V;s+XI
%_K)$kP,8m*+(kLT[.%U0G_VXu.B\(.UAU3g@6qti,VlUUC(2ZbLk(#26;Pk?0SX]'.fj.9__p`q_rE8qO8THE6o\'4'%CQB4/0nq
%m*h=22oN/*T7$uUN;@/=LIi\23nJY,![1h8I8EBYbP-=6i>\gB=u8Hsp_oddZk;P&+>?[TBl<99dpguK0M/h3kutZZE$)^L64X@&
%l?VpedaW?n@#=Tr>l;Q\8YQeRm(jhcd\)Fe4h)ee71p-*#62LiPRe8S>L5I%Y'4<""4N'D?t-kMAkaR\9LcUlM1KaRccZ40PEp][
%%k`)oCDL/.&^mj!(oA*/W+)J:FZT0MNacGpQK#if(K78+O..3[Nu(l`'M4\bmO+[DLq0a+3$Ao1^1-&uhAu2&Z%5ACRS\ffR/<Lg
%KWL;%>/h)m%M9uXO^FZsE\^V!4<lu8&hjGFl,1ntl<2=$&9Zh-F5lI=m)9IB9j_&&l)F+]PK:P:c3]M>VT>:PIH'-/KX.2_f[<E)
%T@XI`Qq8)YE!pBsg)[aF`dOiOH"iWU(/ZCWA+ZWgjHMXS\Oe.0)g$HZi5"m5GKqX5ic(*Gi3+=r1Wo\?9g:2O_qMf1aG2e$MDDb4
%'%.@mIaohZabnMpi.HY`rGBF(ebg4nWZ8q4FP\sY^W?_ca;2,'7g$Yu5.4oTlj1PG[.d]lNkO)c<0BXD9oJgMPJi-O]pLK+IH:hE
%KQC]dk1*>M5952J8&LihLq?CX6UXc=ns\uXD#P1\"9G^anY]MT`FSni;&8h1Tt>#H06XtoFe>.@Mam?CaMb`8rH!bkM8qT8rHFBe
%^1KI(RrMhRPLY4^e!L]'][-Q*/;3@P(`.PhVUE0_NVcio6MRC6@hFk`M#m;"bbc?-q^&=08e!?;5aE52WCGO?!HW^$20crc9^OAS
%EdZ+h0T:=%bcU7.!_H+K4D'f$;COB+WHWr(TIDWDFJ&FX&4/rjEbmc`$'ohL^i8$[73>&M!bDSe1bYGZ8R>((HSN.#>2Hc'dBm%3
%c*Hg#ZrcVrD(3!=$,[p2@?7V:\%*f.=Vh=0\p9m17?ajpMe8/S,_u<:7rhR+6TesR,(O1V2.tM/[[Om#g:lYgRp!WZM^AE:9\b$1
%=jn%+:1+A<RP_LlF7)cE5KF)M:sZ9`oMB;u3lC8[DV=ERF8Q_2<V-!kg$c7*M#qeC9luO^KU]h9XQh,?ObnAPIL\EOC%a+oM<dMB
%O1+E20jbM3BJu]4L<08I5J]ZW)M.ds595_(Z-.G3.S#-HLL`E+@m)/TejmS2KkL[UOGKsT;<k4n_u-4$oOXYaSn=$mObn)H$0OQP
%ABa3pnaA[]7m>D`d)a\f$f'5C,X:aT[jh-(fu)Z+"se+j@d\;VMB`9`*R%9V.F*Q$+%]mPGpcCKmYB98Ag2",X2g=RMsc[NQ2Ij-
%:[@`B'!L9K%HF<4D2n.f7/k&tcZENrDtUN&QLaI4MNj=-DdT)XrjHeXRbW0=][#_#XELkOiBYuT?9"3,[#qeK@K$BYGN5[eWXk/S
%aMas(QuH!Xc6='85:H."-ktPJb<ZmQ@koM$3pR<=_6o2&Q97\Dja<Uq4@36p1gEHAh#s^9`.kp@R^Y41^Y"?FP+%!H>9IL5,g8@E
%$b=1;.E3R@IAf\c*8.r6U9,DK2U,C9`;@J;M[6bNLnK.n(A"!&^<W?@"IH8TBjtgA4kq'TS7=(+b+5g\+-=51mB+[d3!Hb0bub#,
%1suZdP_^\Rc1-pE46F^0pGm-&q?]\:'B@pep48AtT?hrFT0NJ0@d*l]OIpTTI"Dh=K!`VJ22I8WOAl[Y*^@l_D^St2jkP`PSXQ_D
%A1S65Gja/%`):OI6DO@])&lftZ'!r+VS9st.]4`ki6A-;^LL)u]g!F4K0%KkR[\nml!jo72UW?=DR5ZCILKW3hi2$?ROc0o1j^NT
%nVAf;_P!.:Bh==`V<5pI=7ZsN5U6Kcj;gs"oK9?6@6!8r_\1:PWC(i-=Vj.h4JdgA^?p:5NLSoAdX54IOtc@\cTm802<h>96q_7R
%\Er$+?P+5j2Pk]1aG7<U!Y$E7<.0[M[HA<F(J%X;b5!a%kVNC223MoWs"P9lO^Mq]B8mb*)?HB@Y7#(`616'S1$Y=f(at6"#sHN2
%qj'NYi74IkU-9g*1L)0RfWp7He#n65"03?uS=%WFP8IP>fejk(9XS`8m:P6O8H8":`QR49c'"d0=rR50csQCVMS?:9e(VLMb]"5[
%N'B:n<rGqF8VZ.Xoa[tdX7b"<Z=\$R>8RE?alC``ris$_rbXhY-EfTqe+jP':+``#ic*Iq],XV8Q&dhV@K+mokEn,3of[%&(tcJ=
%'0_"@R6\l(^Wg!11&ljX+K9)!0]cRfr=M)H9LPpD8)Vl1c_K)0DK'oeN8Tk*m'PF:?'8utMEod8G`Kn;&/r(G;cBB@ZLq.,@c"`p
%H,>qAdsU4"&hurj-pkU/-@_Thc)*Lp'R?>JB2QOkBkHFg)aiH2q[S%^TB8:=&:Ucr4[u'Ea-7:JELr`[JIQM&W<XA+0_Ls@<I_ru
%U&dn"JL9Vo6_pNqP-8Bhm[,Y!X8X9MVT5]Tr$4"iWUE5bPUS7uF.`6"kCgo.^FL<.cU<2Ef*a_/mZJ'_HTLPKe.9/:j['Ha<Z+hQ
%i$0k2`j.&1%HX=F=Y@4&b%`,'Z$lmR]L/l"KIrYNi7m$d[[<S\a:]`$LcBMN[5K%i-'!.B#8OD"e?l95;Q+LuWtJFV^>M6*$VR+T
%,Qup$5%PbK\Y?GLMWEEO2m5fNRtOU%kkW7i+bm#9>VQ$W3TOLZ(r;:0GsOb,9q*\JLZS8e:iKW%_gL2\h1$U!'Oak)cSn6=k.UXP
%kcj/0A!-Y_Z(TmaA%j3H:hlHj%$C:pJ&5DEBuH08l8aI?npMl&l.S"oOY!*8;%Y^%,iKd,@/7Y`E?R:p$;j@e;9UXZ%<opLcf,Ss
%NW[NLVRW/=IFd;PK9C&`S$1LopfX*MXpLZ[Y`qB`\Of?#C@p&&3=5:[8o]E]BoRI5<OsKDD^<NTrREfc"s]&XU:aWn./<;'L*)`@
%EQ-d?gf'ahjAaS%%R.Z<9mS3[hYV"3+&.aO,0*='XVIkS=f9$BX3TUO-142BBs*4X_P\_ie2)AUgr['5p4>Uap*$j92UN(mlaF5s
%nd(^aPV<HjfZl1%*lKb7%Y[p0+K9'M`[0K>r?3d!mr#D0F>9cJ23;6K0]Z[O(0m>oq@S@(.CH`oO^g.YKYIn7US\tsMo:/r71s4G
%l^nCjX.!QT%>dVcgK*!id<T-B,^l342!5MbmkauX`^*K9qPlb3_b:qL"*oQcCrIp]Qt/4X<JF(i@#LmA*b.7O(JDmN&@QAUY%X'X
%76Jjtijc@1<at@L0jbI)m86fX2O1LtPXlA[9lLLs-.6mQ1]IS)M!O:SAI,q<h!5,-/5:3%I8FFHMhOW]0d5SC,^q-U/mT`LM69<+
%N@J7ER`ea;SeC<i=ns$,_+A;[p$6cj2'kVp_).9je\(?<mp9c6,>tjp?ok%2ZcZh-Tk&/3)VD%*EkgAa/VDN0U^rW:Gk5%J'iD1&
%`!@rsip/V_hE3B/.b%c6mRmIE)@0i6`pU$di8![W9X)Rl@A4MA%7c#Ior0-]h(dgZqPg<gaQB.U?R_-lleRUeKAi6"fqVL,JdBab
%F`*;ELCH$Xk%mrPIH$m7!D+=*b,n0)d;[Eb-1US0-.gX]"f!D\;FeMVd\1+YMhI4qkm<UN0ME502;&R#h%re6_BKY_H7(ZVRNcf>
%pUPd?$"?%nXh.K\`qMO3p1,;djgaNV\pD'Y[e*9LHj8_3XbVRi;U[A:k!.r[EVdI-=UqI]J`qNiSRZA=(*pc_Fq!&"p3f(g/BQAh
%]t;GI-a,7p317^%E]V)rr=FdV`QJ/0%^E157Rg=)nRN[#]K?"W-b[8h#A^fCD"HUN0QPRaiIl8tnQiHN2XAJi(]0j`,7iILN!0I\
%,Vh+*'>_kq[28_7R`GZqc#Pfb%#YY;i]H%ek(HXnD=/Kl/r#@%OZIRS^3/.VEPc52p07X-;U$hI/FgbpBq2OG=(#Lc7'sNPe]=VN
%iV]2k#3:35UR7_aI^86<(%RHC?I$XYfcg1G(h5I_WK=diX?V[T*m=j"+/o02RsnRk>0=[d("[?))m?f@GiOUdn$(4qa<5N)S,W,=
%-0.[7d1U!$OoaSP6_=T^U-'BQmoT5MR'2:0D;_;3WejSUA7AL+"NNc+ABa3pnP=B\L;BnTIYEu/[Dua.2g'G/r-@S=KbJ@)icPL\
%K*L0lVYXDs.KMCqp1jV9@"_lL)3gB7PM`^B>%\6c)\d\p2E-mA-E__e`84R*'h-8-?q_JO(7:,]\iVr1mH1!k@[9=nJ%+*8AUu.j
%.S+\WrJV_Z54G&LXHN8`ShsXJE71]3hBsoTi*5^gBKc<(];*U#lO9sN2&+5$DpI(HF<&Q2Cg5UBa*cK3E:q_fR/*"8-K`#=n`MTd
%J]/8/S&baN30n(>h(`7J)e_.+H%sE;gcsc"Qo%\t+,c^7>n?=U-'t'HWabM:;F8a3OG%C[Q4&OBnL['7.=#L@`mn&Re.gT6PZFSN
%_RT>nA"5!1VK87&GF\rCTFrq/m&RZU$,LS*p2"bMS/dG7Fu/2+'miAY5#nSt4>j6ECKm[9V7_@"=u-pH+Ll`GorTHN)n\%Cao^3"
%m5Op6Sfa<[C$FJ[AHZ<kQ>h$Vpm@,I_m<[cd0,Np?gS\o3g.p3?0jr?auhO+qifmoIOLMX5mn4qo`?4Y*KZIfPIoapC3?.mKOHP-
%7CCiPe23S@Lht<'8PKN/$*IB]%hf9$:jLgS75?DX+oA)b9diEdkPcVL+d+7POVX3)<dthi'_-6j8aVuHBCMq\Zl%++<U!Rn#*#nq
%gG(R>>IA()$&Jskf6Yb6FO_YG/.`\i,d@sSm?h2bA!kr6jqo:\oDU:1Gfqog,F&tYg=>`B/;/7TckcffR3%,jmnn>";7V(E>0H?t
%Q55iBPQ<L_9S2g)hG,RIU_:A4$hqp=ARL?H\fBB;%gV5k&/#YG3[Zo,R3H]9pR-McL%*S)7Mq;MT@Xt:[<RM[0thbLTq?!9OX?;"
%bRLG-<%aoB;Pm]H@hFX1=@*hZnDrD-.Uoc2fM0_t+m@S765VD"=E/Ca/%S8G"50MpWC3#=%LUm<eE\?KG0_qmXcA.N.<oDJ0FBVE
%RqL2YSk%[3:TG4@=]N8=d8d4ohj"&6#!t9AUPOI<io`fA.*m4>ncC.B8]qB1D)HIAE@gP9>&6BlekJf-PJDjaCUYBFN'`S:qna!9
%H!\dqDhE-\I$!#6-Q(k2PPt^F+=X)NYKj7!LDKeG</uY%"$C\Qbf;6==W%N)3G(i*!iD)\G1)(Q06WpeI=J&i]0"l&5_?N3KQEA,
%0kYR"p\,,Lbu1`<0b"9W]Zr42X.<u.79#&T<Zs30qM"9,@'a[&q,A0@j`8hMX@f?>0?Z+"/,bJ(*&'*r[;D\J%5bI2J]6*]]W:4N
%'mWulpJuP:c4;c5>'/PAEZneQ35Z1W,PLo5odmY\V57^/SJ7%\f%]`V8a1.t"d+aV;cQR?6GPRXQHaLs>["_eN/,%d%!/b'fmV1N
%;t8S+Qg5?RfW:p&O"`&<8GM;&[=_Q%YkW%u5cJJC1IU*_r\5#k#:?.9Fj%B+_&1b&1iR7rE>D%j:^Iu*aXsPi:WNBuAO!Z7.4U(0
%d5*'QjF&NfF;-1V23^8c'orTsXr[,k^5Xn;k%mrVIH!K;APe0I'1IYTT>gt1rC-"R_QBKNgI8TW@f`WAHBD*uj,\LL-4%B3@b2HO
%MhOle7+;N+-!`l]m[126&<j*XC!!YO,[oJT_D0?#R+&Ulr%iR?Ji^7K7Ft?4lO5$8o:`7h>+fP!^:mk`i`21p-0>GiAPp^LnFtK^
%G^LiW4]*P.[9fb1jB_+EPSgDUmDc^C`[6o8%hpIqLe*l9)=r_R4j1I"A+?./.JU7638c_M#pT]cal@l[kmJGmU+DTt!^p-B=Tb_/
%7t.eA'!q`41jYZQD>MWTUuri]K!;dC08+Xr;;FVN9jAk5<-'?DN4Q40o3,n@"nlC42-1E*WX0YI?p`SR++O]9B"hhrj.<;[Lt&b@
%^(rcLCme3nM76'+`]J1!#d;d_kIgYh?Eser.]5V\?&XjDWH1alQ'(8K44=?W(Z),R4-a7,M]HN4Ra88gHkZ.O0I7?$I1mNo9SkTq
%gUt9s"fp8P_9^C?1,A2RiUG$V1-P3G>#qO3)J:.Z5A5sF"ZP7q`J8$$&,FfF?8cQU/-E:r)pN"Prk':u3FD]nqQ?QbQK2cAhHT#P
%@27.DAd.85/(1aKAMk`^[D!H*3^l[!;U#ToQ.[]XpHe9*@=sL6@F&RQU>qp;g<<G68l)8N2fmjeLACdE!Z\,8];AS?M$^GI&hTQg
%B+g"fB"@7s_u-k"_i1HLRh0k7pP4PIR%te>n@@F7GH_LcUIb5.%[P'R`0%^PW-^L_#3Ig(oj=Ml3)/#<9d18BhYjqPn7nf58L1Ha
%at9rDa5$^G#+A8#Sg!YgpJ3RO?;o&2:d*M-MVNqNM[Qu2X2mlbKtZq_!-2L>G[TQrOS!FppajRK"55U29W`>q,1ZNB0`WX5[?i-m
%Pe)%^f0fHN\1&n#Y/_eBTW.6F@uMjtVK/1!-h'CN(R6[$Us55W$a1?`Bd;]IMZim!'u_3=URHsk#,]OZH:=EoDWB[,+,:WAoNPL7
%?MNU.n,^C`L?3oSRnE%kC0pk)[S(A"kS!Pql`sL,FA/nZeu<4E0/T^elHr1h:2rsQh8CHDR(g=,?+"F0,MW!eBbE9_XK31CPT&)h
%CCaVJ5o,9c^8QW+#K#d8j*aXskY[jGb<"Qu<J%d?Np]Ql1[Z2#2/ejuMRS>7b7l-6oA8M1_Vj6K4JkZQ:!:43jpPW#c)*>D&:'oF
%-a5nb#X6W'Ghh<CdU>-R<m;J:OiRbiTh-C1,J6fjkTLO6Mji.G'Oo^Q*Gb4Dc:rYq18d[[\G(YtS0=#lF.;uLq&lEeoSSUZ?<I25
%B@pQXjVP)n#mh^%1CO62hlL6Ie*_M\W9L:D+S#Wb&eksfE6-RRoFg](BI_mZBr^St'""mMj$S-A>*>e[HZ,1]V)qMCMpbom`c,(G
%(NV;sSj%C0>rfMTm<Z_u,o997p8%Jm#pJrOSNP?P)9/@MK_XP?/lA<3ZQ%AZ0^Qb"9JnSeRhi'28J3&4[1m:"JkUGLU?btE,r.#8
%+?E,0RZgF-[u#UU@h9@pZki#5CKT$N%%lW_I?g*LjdNC!$IOf(2t`)%9HLV##eq@#dhQ#!2-Z_H9Z[+^^CGLY`=cFs&r3olX<DfU
%R/D5i1RmNK;WN8g5E-6>:c5:"qYFo/Vc!IZ',gJl^AY@-A_5*n_G^$FY%,Pp)"h;G6iLT!P=Xm[[_''$UdS#4c(/nkETCE_eAWZ%
%DI(G7Yt2a1o0dYe.?UKKS,"GA%3dt5Bd6g?TDCUBir>\)relO<SLDu27B+:_,XYgGW_LtVQJ4,OXd4>BPE`sQ=*+!)on7+<UhNTj
%3&Fb;gY>bPfVrZ9Me@f&n&>thVB&Sej+u5-6SofJ,`.9*][=@]<%.c/FZ4F@b_elk%+Tob\Ri,<-qGVc8S:3?L/`Jt`VDgC5Nju7
%<V;]FN4!GDkK\b,766MeVH2H!kZRKai4!FUbq\,JRBk>2Y&Md$Gn,)6Iejf&0J@^\=Vf.-Q8\DNO=inZ0,i:"6Jd.-TAV1iH<BhP
%lI@eYVRZtW@&oR&_'3X4/7YaiJi>3^Q4a]r4A#P=m+ei^43ke:`D*hl/,b2jK",`NF-n,5VK87&G?kBWRWe<\c-Q33JZC.O.TIuE
%bKic_kdKK3U4N,>X[[.c7Fp:l3VPK*#LR9.&reE@Qk,)r6.9n_NcsqK6ijK4/K[m^du$7=gq-2fh]:PAVpU)Y\#S=kc:'tE?`e*<
%W-od+l!f/0MELP-q5!Vkh#rXK7%95>JmhsUe'K9DE#NS?T64\sMg[pgo[)*p>-p,E9PdU)_UVQpO\!fG_S&m2'HUpGbmC5fgYD7D
%\hLu\1sR+;ZH2GmY2q`?h8.r,nTPr0.6/gmWHsB+)WTB]B?*&sO<"q1Re%;W:0sT+kXUhW-!YTrah__2e1/,0e8nVRnB6C"1`eVT
%On)`Y1<7@)!_UHD4cM*-84sGNhkd1&($$fNEom9)=IcRPVoQ[3!T)e306aOtFi)M7]OtR/'=MkI$21c29Ee>2FsMe\;_=F?"W8KD
%P;9k%lB!Yj.Q(Z1NhcOEe>E'U-iH%PIu\3cjjFk-&`hFQO]%ugQ\(L#p[21bp7@\.(ThO7Yg'1&@6SGR-d8Lf<W:e4=]+)Wc1@$M
%=rRN*l>^MX-oS/[Mb^3]1e-KcEN_LKiC-cdQ\?G/-ACCA^9E.Z*BsdBdW^d$V--eVg1^4Dq:/$U\=[22ilerA-*YSEg;_YE4M3?E
%d(ghhM+]SGEFI\8KTs?'"iFW-5Qr+@T((Ij(`p<<?,_n9>-Du^8SQ,;"q=++<8$i@gik`-e5@LN>3@QsLXp7,/RL:A,:u5N0ieUe
%6Ko\9n=:Xf_Q]f1&GlW"7MTHY*SBUW`U6OV'dG8I?2"3""$ZC?he4=)mZRB\[9I"#WaMgA_"7l<>?5QT$Dr50bGsHD,Uh;b8(bLW
%_WY6Oa-p36IYlsunZq0U9WaYKO<h=Ybbd!351',@J-ePjE*0/Zr!jA-aRXsjmfc0t$$dTFiGkhcFCi"&D]KpGbo*ZGj03(n4'jtd
%Sg'Xp?Hr0u)U1I0S*aWkILTo&^^N"WaKbk;f'a>b,*a;mP1Y87jb-2LpO)Ko?iA4!"N386A^?8:doHbr)u9-a:o&f_k@nbcY.n$5
%SG$^$3HZ<s?(%hiV8Af]/m(u*H+!:2K[iN3JMg)FhX\uW"@qttRbrreOo#j/mIE]n(L%UGP+_h)@;BlcKp``3:GR<ZY<uoU1C1t@
%n8#:r9"\?CgdSd^9U6EkhD$sS-.M_KAf7Z16X#?clW7A"rO"J)e<"[mc"b:9:Psg,0.3?QcWW6=U[t@3A$6+Wb.k`s:4"cHD!MB\
%[U$OjXDF([o?6@,;\T/Q*\$Y'/$$6PcrRaH3o/3`n\=CmhA4eR7GaXQZ%Ho*h\p&bA'ZZ\GrWpHq"btR3(`Wjg!uQ>nEuU0#]@O$
%!J[n*ppCaqHI4nC0Tq,"'!UUiK3;QF\iuhZV@6Eja'gR!Lb[;`&QSj==WY2\N_bP!m#GS_UAW9=`j8*LfF?&PoCX-$>dgJ=Z8)]D
%;1!=?*Huq>jH.HrBYoD4o6jgo4(+(i>eo^C+4Eg&kH05MkbOtZU6)gal4T\tA\u/X?qm,FF8BqFnnUIm<R:@Jq)%2o:XhUE1=,(6
%\k,Nd"a(orbJ#f,=mKK6fr-@$hF4O&+nB'r.;f*Gs-HW*A-SufSBU$CfiPRfol2mBRrkJR6UXkn7(K5P<VebMV#,onH="gnAUi>R
%DsSa>L$Iho9ui5l;C.,iah&]A8b4(b,MeIS6r%s9&h*QAROW\@j<1ljHN]k\)hK'TeL]jG?U6c_l\%G^9A3EO2C,4s*d8plauG*u
%cp8sKB>2>(7'uUX.0Y=_f1c_^mMecbpJ3dfL"+5qg.li34M.,.M'8REQ^poS1X>^Kceo]&+33t+l*a$0PAN6Bc_l*sJuX1>RL1-B
%acM:5*5-CDblVJ;pN7s\9ahbN\iKg;aoeM^n.Fa!nVrb)IdUNM&.ltKJ:i5')lr/!?c7`1Ie>e/Hl2kAYQ(WMIG#%O?iKZa0kH-L
%M8^`>%GZ<$iH)CD&#!q\jj^\;T,^/^Tb<`ufZ!2:e.hUWnV\`NM0\9qo`?0Rf1Bq;`2-:(\CA-#5rCOf+^4#M;W<,eTC\GU_1BNH
%;rg/ZU`-:d^;_JsiAK_X*1>Do*ASn`Z[=j(hV;[&OdfjE'Zpp/<C:"u,plNiSh^M^fP7S;%$*L7WjgFg.Ac<im0i[VQnCocgFkKS
%[cM!78Jq2nE"4]nk(N/Ds7=PcqqflE+CgQWkgp[n],B[V5h-?VAH#C9Y$LJ5OseR1S^HH]$+$Tj'2%E#'.N%#H<T?$-\[MTrr`)S
%-`h*0dr1SM<@hUj9!)6P8V:kS3Z!2lk,'%ij@W-jI::_E8-HL$DX2T3fa`q2e@,R(m[H_q*fIc&Ln5ARUC/<FUc2kMFu@W/WVORU
%<7&CVAB*rjH.k#"HKl0p^i15W//Ga=`09X-$fm]Cq\h\gCq=pEOVCBSG-6=ckYQO<gK@.e(LJBNWH6+%6"6A;Pi`W'D_qFb%kF^l
%,_.jkf>CNdhKf6hZ_8tq<`=IF'?9l>ZtPmkQIt.\?7u(.m)=uC%1o20P+d&g71r(\',nb^M):dXbeNnV,3u5mp5`LsLL)Y'B).AT
%"'7_?k%58DkgZ8hQqu7^ajF&h+\iF4dVN!P<7R&hZ0CNCeTT6C=j+CV;AOC^rd^R^QfMlFhHON$6L%i8]c%4P$ld]?<HIITV@#7i
%_3h&.-".mrZ<Pl;#Hbc:Zm**:fA"-'B[aFB4dGDmet)>/OJ$#8p-#hS-I``BTd0n<ObC!"'&A4*:'-@9Z_%"O/3Y+5b\0VtEJ_/M
%J&JfC8J+:FnB1EM6+b[a<0ehB06d[9Z1?Cd=>jumK@D_;*f2.94.k26Qh"12a^F"HP==Ah,oQ(8e24':&o[C@1bQ9m(CVUlCNfBW
%WM"KL2@GpEhA.g845?^pQ".\27ek8.&>NTcb,%K:MWN,(9-u&_g!nO9>tQAuq^+:WR1aR%pR-LX&aY\Rg-TQlmTMTjR%P?F]Nf#'
%_8'Y0854^C@[`I8@:k*Fq6-oMR35HpWS<+4Fq:TG+t/!n;DTh[?skc&jJGZT,n()eZ'bm7*hY/R8d+7b.>`-3:..o#/2jU]4R$b4
%YJHEks!SK/LrI&5R%VB+9#+F^/1>gLX:$,]J^$lMRsLVk&kSJ`*`PsE";6Sj3f0r-)G[eda(?el9liWMnilfojFXV`D[>^!\R<5F
%n]0W@HgNUIBd@(3)aRjYMlb1\c:B1>XEm1gW+f'j&t.D%42EYu'M/tLc2D-g&A86]%M3H[lIr_'RIX6`aTVd9\KEa=/h$7]7;l2O
%"hV_Cm`3NTn^gqt41X;HC49EMVj2UIOa"-B&fIKTXD+&Y5f,K.1'lCD1o]BWb#mJArW+?j3>iG^js?32926fgg[\\'o(d3jI(+EX
%A5ak#,a,B'701RV^E+RB'#BCEj]lhB-A0f)-^5hDF8ldlPcs^n+UJ%N5RW1?_ND"=i^)7Q(X.H4eic,)o/C]<$`9feW=^@+1,86'
%mFhU$bn2T>//"S&$.Pd-*HO,R"3m]'TbMdEq^6C#rA]uSm`4QZ'qYZoCOaR]ru%VO6f+-R4N\5tWXgY:>>PPf7HJ["pLZU9G3gJ4
%DMH3sQQ^s)bF;!7&R/71H*`@A*V43EAWG*6pegcsRm[n/]dK<P9p%0&gVc=-&gI4'7\G_Q8aP@#%#_a<.=:SQPb<;[a?uO-8J6Cr
%VY?X$5ZW0gTr*t'qQQDNZC4<1U/BuB66j#M#t*jWm4eN.n8=:^=<o&,nf!0Z_0Q?mr:l<:TR+Pl78jn2[[/CQKj;4ZeCE"WMdO`?
%l[md`(;UDu'DQ06KuV;<2)X6l<3nF:o_a?3&GJVAgVJ6ldHt,,n?J@E#:?HR?Jn**`%6n70P.VO]pM:F;(.lnA*@aob8:j*o?R:G
%FBI!AYXHE#8h;E6m[125%Pq>;,[K>VhOhRg8KB5M?2P+^J"XFj3\2Y2Ur\aRo2jYa-?UTH=mR8f7$^7%(?aNpo1*`2##`o;96a,S
%'B@pUNe+(KSBu]PhrTJm:oXJJD-oCK2T&O2?h+;cMlJ>"V?Xq(Yc)2p@r;g^9,BJQl?jgTh'HJ_k+kH1,uh*dp+G)_lYGB/q#Mc7
%AM#"Po>?_R/`$<)N7V;0ns@gn9cdc5V/"Ool.nJ*dCU]Y7T5.2@:`X9MC6*PbmO!XCI+_C2A"XiWO*_jA[N&qm;-b.`BL5(Ln1"f
%EJfIgKVmRmn?2"+-A`"EDjS`YM[tW'1RmNK;WM]W+5qm\_3%o:j:(-n.t1*0WObSlKjUNCo5+-&:bOj=KQ9aLNXuRuO/XS&H,M;'
%6mh'0l^nE@4M;A673[kPGWhqL%8sC[(hPVKfqc:X`';F9\F>,*hD]SM6<COta)h`^5R?>gUKKI:QV;EhWRjPe07(J;.j"Qp[_;;N
%=u?Vu-o>@32Grk<7*JPf^soo)\fSK7hO'`Q*`nLK':X:qfZ0BmF#s&`s*74=@=ch+AZM+jI\"ldAW?rtK:O^qd]BBebnO9?WA[O(
%lpiXI2(k>BDV+.ql;W`rL0RkNpSXfNA8G*FjgVe""9XIX,-2Eb=Nq9]!g:jZXiV_dEL@^gfqXi!1ABV^D&j/[GXZutP(s?e(/<IG
%-o'08IPVG4X3u=j^f+s*eh;<qmZ6m'FKUHsV3KP>Oi%=>FWXVd`07m83uGh(S*H_P.`B,EIA6?J22+]k2N(8QHe1JXGZ3'?Mj14E
%Aa\A/?&BJ42Pk\RaSXcm4;VOfCfq)^S*R"#_f@*j\s&"2CJW<YOG)RHH`g^X+p(?s0q8tffSc;6>5OVS_LUpJIS=3;gioDGa:q-c
%\P;sJ1f.4OYG3VNb5T@*(kEmEkRY;mVu=3VB<T1lf=`Y1\G'!K/a;HJF@VX^-u2mCSYoPK(angMa.0M!1b[dE5i+kXl<`]<4WQa>
%a4%?-\&)%67mA<@0-FTXFEYLT<!tnL->c+?e;S#87n]Cal4U""eM#3Bm;K9q.!*q&D`S^:*G:X*I*5s"V#tZf8`hGX%SJ.:_Js<3
%V:=!-$r%oZS!9-km%[oii4<.T5@1!GP6B;fZY@_)jP;0]K29G0rs0+?`fI;ulM-p9p`D`b7alb\9p(8es!'Mu)MrQ>8"C=nUL?X0
%S5%/<:]/]:?Xs)eVFTX<bQ$e.PkcE7kltRjVdJUe$kWRd363"0$rTTd1]O4/?"t9r^F:qCWHWrBS1-1jF.`9+^(N4&ACqbB]b1RR
%UK:o:JFlI(:%OX;.3Q>&`\GUQ;*]_c!p2:YO?7b8AdV)T`7-W8M4"Us1NDnLH7!5F8C,4?"Bg#q"<[:6LS'G!`$[Nh)niri^SBs/
%VLnH;924I62ao(57m=i9gIPlE46iB9+:U/sdQBnXII<a(9[$It?4_`QdBfLP/:qJf,j_%Q,R4!NKb-tP-f&U-:VS?A0^_*_(hZI:
%l.fnM_+.sHK+'g\UhA\[Gk=\RClk6FZY;T:3uats@V18g9'g)M*f8e)o&G<a/_k\g*+Y-PM<P_4=(3A+q+)K1O>Ih[n3Q:\Gpf2E
%L4l,/dIV-M4PgRd#3f!OR`=B+MBm#d;SpT58757V?6Nd11sBc.dkQFJH2j6pE/Gb]39!*Ld$AYpBp+rP8CD`Q9uG%B+qruJ&qV@d
%K1&1:#kcId,W*kaRM/;UpUU;\8sgsAT,^4]L9W1^,Rnu9Efl*j%*]oRUGs+aJ.E81JK`N)a,m)#O.3_SO$jW#]dK<P9p%H0qqOE`
%-ocpB,jGseBbS^pOL,<h&L:cuUm>F&S,u70d$N&0N)9Q]_]D(+2Sfe0$(Kie5U&*PC(rSB.<ZtRJf-Y52Sghc,]&&M3^T;-aH=)T
%s/8YRrPKNG.$(aBAMcqa^Sel0[,5k%\+>_Q_U:Z=;318jM%L1`STE]pNAI'PHpZn2k+??!S,u4/?BgQfB`uS7%)uBkM0edp8W5&$
%ecu@8U]lgJ\t+m--:D,e(h66Z1mct(5@tIsU.-!nW0&nBAgg1g"K/2\1^I".0F2:?86Q.oW0+FmB%TYC"Q.i%j+9BFgj;]\DYe&Z
%jHIb=JfH\3(;YqK@:ac?aFi@,[g::"6@^-:Od<Ea"X+V#e4A<^\>`^.=CbmBU-pTQK*?QL#kq%j,<X1`R^7!bf1H"05qqlN>XF6N
%Z#UTtRbLXlY"^VqJ^*mRC79.Y.5<RGI's9?1Wl^4PK7K-QFM.ZdNWp2/TWs%nNQP?UOSQn?Y,.gp=9-D+iHq5N2u(eK\0_=o/3=:
%/pj'A"DN*a$&5M394O*W?0W;u]fVN,_1$):EPX)e0^_*_*,(5R$/OeDR5R?i8\C?B+iJ6j6rOsjgakN%f`VDHD1^7o@u)F^oCseB
%@Yjd-UM^A'C)=J"&;._L>:5nJgWQd3NZ_A5[KgENL`T#(3;<hdU5)U"l"I,%",6:'?`90-M&o-/NCD*hXA)F9qOle3C(4uhctuph
%5pK32LBAk@fs$a[-&8YZJ^)b2DAkgW.?ZCN4fj2=Y?L4A7A>6<\b,=BC^m2;1nbJ+TDN8)!uo\e[=0h73_IsF/DYKpp;)YN&hZdV
%=<]4%D9&^ga(Ag(29i)X'M0/9:2gUu7HT!#'E=FO&Gs23mC_'Qn]R%o>\"4YP)N"<9/CtJZ.Tm`9f%0A035`D_M9EE7VgJL0sF6/
%7l;&Nq!bn1IU&#5Q$[_;;.dU,^Fao%cEE$GDMoj3S'6Fs=f(I=.ha;dn`<@0+0YrUNeW4VVo$Qs>T?I.R?aS0gB&t\2]G4[E69DA
%;Gk;sTllO.BpI_XDo60s+>p"KKZO&/J']1VClmT5DId;dN^j:6VLrEkbGK"699G&c*@*Vc)i4ud8%g]!Uk*.,S5>*Uci'(&i-o^f
%La5_gF5YC+K4GU)5"N,oTMK+Y$^sL$1GX]U]TL8XH.4qI6*f<De$/A=8A_n2KQEe81+.19qe)?"R1:P^Cln"761N#;aD<QtJ_;gG
%JP69ia;9U\@mgM=FtuV^5biU=%88OU[QnbmQ9aS`A-iYc8<uO'JS>E!)E90C=l<ShJ(PCT-U#AmfZ:uHb`4=49EN=T7npn:QQca2
%_k(:LCa:d'*VI]'O9V.JBgO!655.i1"qh4f6]mQZZMk!9@VjI__G2CJ@SdR"S(S)cn$6Z[pekQfgioJIb*86V\^(&(VEeaD$p+P:
%;dds51'KE8,ZA)/9iGFR5V`Ku"!gfQ:d?c>^8p>8olsZLGF-r2+P?h\e-]D&;a<)B"p\[])@(Xdr!.%ho>)!:1H)PE3O*'7,m,F9
%>rE,g*m%&kdSReUf3"cr3prIS+HJ:Hk%$g<D:Uqks#>W>URpn-_Cd#a$jC<`"rZN;rKs$ca@D+5/2P?YlM4aWi0O*!N(foR1*"4F
%9li?=nM]i31Beh9$B-AK/S"f:1WWCG"D<gi8<-6O64k<%RY<K=ikhq]HQe6.(5=m5$o/O=5trT^,:!o?I1mU<9Skd#qoh9epIts)
%#ke*M'H7ZV@44$eo>bBX8@B5hf.<soUlV4"&'ql'&>bFrf[Il;BLjD&aj:So++mA3ZBV=sL50aA(^^e1lnK1q_V&ES4=$*1OPW*D
%b[&&7KE,?M6P/Nc?BeG][XlL(6]Tfh3//V;W$s]3Rj9=KaWV:V'JC^b;Sc2]S2H$jR8%0H.If=^cX_K'c56m-L_M?R$P9:>(n9"e
%E+C"5Occ>jog-\n.$>gE7_D5`$u"ofd26H;UY4ELr\")s13K!=L;6=s,@!`k!?qo1E5,oAbV1jIUS\nF&d`%r0SC+Z:gch)N1n=S
%GEr*9*`)+qh@`>u(lAaDP:H]%3+InF^XIX7p1[)-Hch_Ff&%j(QP1N=cgF-i(6JcTpAuY"TdUCc]'HUZM+ha6:r&4LKg\BG(g\:V
%(deDMVD4^-GanJ`\6j1:4jM_i&rk*fW*!JgXcWWrHt^1*4=?'707nSCZY;k=d(W3u'B<UX"@m&?&fDQpW-:uP6NbT10qX\TS+od+
%#M+I7k'd38<&#+'Y9H2"8ek9uL+_;/C))g[M^+8k/;/#K(5=uU$V?<T0@VqYMQ*Q<IFPeVZFZB>(.fA;So>/r7E0^m'E84'f8E_W
%jA[i:8#hs1:<i?)q-Pg$j)ge@"tA`A#*CiM`u0-ScRi&6i-HSIngMZ_@@Sg%@8@Vj7?W0&b5WXln+Ui8VLq3iQh?l;Nh;H*lC9:-
%\j'$0Q86DbVFNUYMLhK;/\2ad@V212F4":<5=bfFpRZGYZ9]$AH!RFL0CDd<(]68;Q^q'oTUJ^E^@A;('^"YdaM^%["N-PYKd9+h
%)![Vi`R$TN.8A8;hIlfo4HT2$\RMe\L9R4V3?%TpD<\,]$t5>`')$u',Vg!r;"'pl"@&dN4R:ep(^KhU&XaL1:2gUu7HT9kF8mj-
%`/8<P'@%?1YiUbY0>%U"O8LXZa&]9B32MM3;UO_kk,)FaZr3b<bfHh_B;QO!2gr*+]Om&;:]@SM,k#LD@6pJ#meo$:9JOnJ<QCag
%%(]_=bE44X]l1N3P<;bPX3rfC4D=\11'h`34o=J[+P?7r?o_!ZUn.7TJMY:'?nM6@Uo(3KaAQCgdnU>$F1SS8ci(^D;jnOEA2_]C
%Ur_;t5NEQhiqBA%6apF'5FX$HifbKfE0g#7Ocl)+o>m3%A]J.K8d*1F`9/'#^SC$*AXl+1@FhjaFeU:>,Me#8PQok'a-Bpl-BI:Q
%`b7n!0lcq*J(ip9O[,m7Y+sKuK]oH9/762(glF@%8#O$IC6_>#+"N":2+7m-3`.\50$&m+]>".k'>3"B3s>7U0;[I3A%E5rb>(p`
%1C0HVA;IfD3(?IP@l=khrWGI$"a(#nbHb6Mf4IVL`1O-`>YFbd5%g"8E&o>h>NqMMBe^^?Cc_"A*p#>X.5beHro$UpfN7l>&_-;9
%\!LHR2g9-VCS^X8(H'r=f>k%.,7W*6D,qU?S*oRX/OVOuRge,rm6-A`.;$-*nF#3@UkbDiWgu"#>t#Z#H:Qd"2_G'&0Au'O6AohV
%JE?h(!i)KWecdYjHQ[XcqR$$3p/U=[A%q3PYX)!GeZhdl)7/2uk]7SPO&u5#RE0@Lot&A\4/PX`"-'0?+W'r.pJ2o_3Mtg^_tVen
%kB\m7j_%e7<h4P>`>VM(Ulg>^Ysmc.1e!GB_7YFl,:E;Rj4CZfW@9a.kG<<`N)B$Pq`m^u:$=M0mufpel)D+S$>l6/&hP$n.6hf*
%]"M5@(b4-@i_Y>VU6]!6)e(aNM>,QdpFK_d6ht6Qn,2GiVk8-*Bq'A8NM!oG<I7NbcO9<NE:9rLo0ctR)/]tB6YtsqpVO#P\X55c
%8,(k@Kf)R5BsQuak<\9LqZ9*NB=T)n$1D&-<Ksj1G-:O-/,/.30^QbBVORQCWTj1)Q"+H`N(l?*(o<5Dp14lIhG4?rr:=@W>iT55
%l+"ZeRGYFEZ\u2KYEg$<%sWqKk"mi4@C?1c/NeK@>,+/_9)rGqK&-dim@1h)GJoUFm7XijM,WGfUW;8`#P+A3K*=3N]jN%dmXr;b
%\t^5;ha=5Iq:&et&=E4-\K7UmZUEA[H!a$HcD=[OlYJ`/#9FKS-Bm?,W;t]OgQN.if&*6+j[2'7BA[7HfG&<$a$7U5!B*c!$;1P7
%cq^[=*c2GJT;OOWoSrAG4=fAf2c4%nDgRZW\1A"/%Bp9<+E]^Gs(&r?WoArf("#mFWo8??1q]O8V[EtQibob!D\EK+fMU2n[n0!'
%s84;@[j[mFLUPT/7l&`FrVe\cbM`Y,C7%#2]1hT$QtH7QLSo.ik2/9_82!&R+!fD7Km#=h^!8=5O7Ep;Jt"h][J0dk"XZSNH8aYn
%a'N<VXuLb(e.em&p+f2JaSV8f%M\ACGlM/s[FdWn\opdH3_,T4F#GK<54Qt01+r(knggL5#7ji2.Z\en:H?4jI7]0Z#6S<kgP<jI
%XG;kS"1)5YiZ'C3@E)]F=mV`tn?+d'=<nqIV1(Dsm[,ZLH1("Re<4^R8A_n2KQEe81+.19qk(V_ig0ps/jmK]lu`A<ne(?D<blsX
%<rMF.J<U`PVV6_'e'r@.-O0CXD1ekQf4`dZQ8mPLI?g[\_+M1TC85DY407n^6CMd1DLX&3E5n!ZeiHGM9N@$5b0f@K]DAA">MAO(
%pSONr?,A`=3N>BN]\fgLZ0`<UZ*'b\Us7rO[Vsoe]7PP!`e[L'CZHUJHTu>#!eu3a.=EH:`+ad3HRj8e$,]E[p\WlCD/Qq"/fg+B
%OSA-tT>P/c88W[93)6,ff,n4=m[123NAI'P/48KHk(!BEa9ifkM!l2OSi>=1%M&saK\bE3ec1K28L"O[8g7@_:?$DeQc$'E44H/[
%W_H4,O5O7jOb@`C"NNc+,YdJ\p[?oSAP%5mT2>`g]O'MWc?$KbiqKRCgL^1Ur?e&efdC2h=QCRu=>=Ru`s`s_10<5SG_o`i!_'e@
%A`oGq3aOZ9D\m[grIC1U(Z];hhHaW=m1.nDOtL]7^m^Q!(JNUU^KU)K294Yhf$R'QA&M(HFAr%*2b'mRpeP7XL4m1igX%0jgWWMs
%XFHG&%"#6TWK>Z0.@f9PmOgpT2Q8-6gj!sgUrZ9Is/+'VMD'_odi6_O6Jd.M+*f_77Ke'j]\pG/?t=oTNN(jg>N8@^2C:G8buBdn
%3l<2!$!H.!'uZTl._0Ce?:3N(eu,YkS#IMfc.So6qnt^W$D&26_/n1joJJfa5Fi.u3"8+:R0boHljgIm?.^#\E9FT!-\@In"G-(o
%E*Qu9?ei&!1CrQD:@:Y`@T2^uq`%M`biUhN:F(MN6K!ocKQ_>M,n^KAUVr'%#n2ba+>qs&cNJX[-l3LE-8J.:ak2nN72a,%C6_@5
%*]1j$O%<Yd1C<->:'/Cj#];S`5W+F:-aQ'GZFD[u">"?-MVIc+j[$e6PQm"JFZ]GR#/Z\8p2Vo!KV%:NMN6H,Aff#fS_]E!_Q<L"
%#XY6NZM=`!7<T[0gXNc"1C_Q_3Lc7WTD3')5aY!FkVENePWnqGb+f9`-Yu[M^tg&.=^l<<Ddh(K@5A.aVEsQ>A7AL+"NNc+ABs@!
%nW,CioHgJtAd4(KN4;:f"-fW\lUNYE^h*dA9nNIUVQ2hf,m>!4.sPCF,S5I^TR\;=n#Q8(7@mQJ]g[Zskg2,L5X)uR"QDr$/_+3k
%5dWZM\pg&h]NISK#JGV;"C;RmKZs[`fTht"P!GBn`0RrgPHf++B6Gg]Yt7XjGJnLb%LJ7<Y6AsDdNTPedm.Z:'2"D]\c3c_>iFUh
%mT1GHl$%hi=dJh-#f33>/$THmbbd_qk)@$-H1/iX"^V[5#/VSS<$ngCe@T3V"YE5m1sH?'aSXaWbpp49'g,M=l?Yj*O0N5f9Ebgp
%#ouD;[;LVk9^kXpkKIsAfQuhdo"kQmf2`OHOi2B]YMNkTk1G@q;H",h`BkhYgj?muckIAh\P;uXal&'9Bs,ZF,segLNF7Ck]QIR/
%2X&f3#.(#-6-[8_7aDG]P^MhGS_2kX!/#@-Z9`:[ED@Z8\6AhdAqQ+LfH<$\2Rq?.7t&"R_6rTe27#U01NqXk@Y8GmGZ*_9T'M^J
%%KBilM"Jh\c[R*jAMJsY@Tdq9;(e<8Y%&8'854`qV9$TfpBqjD/KGC\>c^CDp[6[f%VAY.B8F4HrDWN"=k2-e63nTD"s@Wf\!\ek
%)G(bPlAg]4_P-F#k2gRK63so3ZFl8i&GJn<$o93XFD`o7+<qjj"nAS'0Z)?IbVCC_Mq=FS&7^BR>o7!."X>RV.F0sE7N[l#RNDhj
%_K?7HYqs7@p&)<F%kIDB)B\7P@t_(&o,/<sYcL\5KEu#6@-^CLj01%C6b$q1,CFGo)\O4T<R\!Pcn$/28CKIGafl-pUo$jN9U!Q9
%-7pOVCQZn6A6"i@e@T-*5+#&Y66Yn`pE/FJaP9r(A%t2>,H^\po>,V0h08"6JR+k'ZY>L`&t,-]54cVA%o#=*+q[t_/Ucp?Z'c,#
%e!s6l][-Q*p`Q%1;c.#QQbLb[J8#Q$ro7!7fUJX(ng)i_r'Geh4&iA!&7])!&sbi&<ojeGZX]=<@VY0BO$jW#]dN0a9S"pbgS@(*
%FVl0S#ihJJLX4u+2=W_Teo?MsaY4RaoK&KOK*l(2V;A/DjLnRuSJY%r\<gN.LU"2XGrK)c`A"bp<%tQ"lS(2Uf4!<Fj2j>gLC[2)
%7aJtBcV+T94RBe8UeSK3+4GkI/,0W>%j.bF?E[<>\gur;"efNWCX:<\Na:LsWG0$AVT?]gpWEXnbbs2N;*c0ckPY=TaQ7EoS'_X3
%fR;>CqD8V9k]OG!^jt[MO-MiRXj#FnMhF%#d$VlV09NSP0!NOJE&Pu8h@rNupJ,Z91e#iGDKGj9e*uR<S17UX+FZ,9A3cidiN[c?
%od7Ra@$deMC`5,AF"PIZ82Ln6FF5>eYJZ0?KaNtI^9?b@20iB;GF*T&jjnk>JUE!elgVGu^tJWHI,K.W9nkqsl?`F"V"]q_%aQLi
%_HeB/LgS9?A6-rSP@9g0@;>)oN^Y9QW@;8c>47Y`:b&TsR0X"?Got>/1nbJ+TDK-;"srAF^HE.se^E39]rgBp<1)ef],1aYBj1C3
%A7FEm`A!+,/^$2c$]\.;/F_'!@i*$j2Pk\RaSXcm!^na=qY>l^IGC^.^0WCD%^Wieh^u)QA#fgM?;-"HI+tu1Lodi@Dj.e@?l.97
%2%=n>MG.jOS_t>uMTcC_kPgmh_(d2p0[@,CZ'dK2)qbGi7blX4K8r[7_/,LI6)7\8>Kt,FLt!med)FY3WVJ0T60th`9^[KQH"?8?
%)R_rP0"+&\)RdI:h.?NI`AUgoa[f$i5qE^NnmWJ)erY;gngCuPb\ugAh`kopXQ*')DHCaBUjuT@T+$@8.-g@akh*j.857"U(D7DP
%^+XXqjSi%iR$<C;oPmR]Bn9RVK%ZB#)'\N*s&?TQ.M1O9G-ME9b_@7>?uXD'UfeoKmi"L6+tHuWk"fr((W0W=9lj[!,`I(G3!Ylr
%BgT;>J']s,gcta,#pj/HUf&G\i)m^9gEpjT^b1qhCmpYUUamqlA/I_o^14e/"d,!SJe6B`po^&-=6+)WhHONd40!)+$^PWn^qqd]
%lqI;*E>M#9To#kn?&n$g>qiYb&^0*[2C*[);(2ok8@#805I;L@]3#9:BpecgA7Cak&oPkR=eoRTRgjuS?0m0jOCf0smM!>cl"A&'
%@>&ci0HuN1KB]b9`82IUe[JIl_Z"R,I2qdh7Z<<;Oo*^hJ"?@$8n5(-Z`5fd[di,:<WoXt/im03d:`cb0LT+(#i@[N.9tSQD&oi[
%292Ufi+9CbLiH&rN64UjcK=qRWjbI&77lZ%[n`=NiZ8ft+_,*]:9/>Z.HM\ZAZatR^S"1"*/,gYCB[Oj/s]V8qeF1r/`SeBOeQ9A
%%*R4X7?W<h![I:=keT^VD_)-jY#TcDY.g<jf$eYuhn,:H3-=Pi`Ch&1fbU(]T*e4[408\s,%3eIEJ\i<ma;8$Dqi=gXScWm;:Tb.
%>hch5n^ogU.o&2)r3i8fbB]'Hq16^RXMVV0if2G_>F`dT2='oEFXK<9oaQ$kgaiJb#\g?h27mPk=g*k246gg\7BGIr\hKMf<FC9n
%idsQillk_)'HK3Jk'I3P):sVK[`?XQg_<qC)WB;>77GX08B<R/dn3ap?.r:1UMn!^V)Q\(SK;Z`[D!*nQ)'fZA5D"Ao8RQP]/M?P
%3T\nB7QKIi-GtCr%s,rc8C8lr_`/Ba!ff0Z;Cq"1B74uH%d#MFn&o2^'<-J`d0h#Gpj,d<"ZsGlR5ad5VUhNc2dkqA^PR]7VtfUZ
%n`t<uVSd=frcsbM,^Z/A3<tEP=Zi^"L(,!=3c<?WSK)S7]#XJj>4(50*oDKr+M[aH?WQ\=rq`f:IJ`D\r8g0#$q*TOK('CmK(bBO
%\<V'gKSfP-HPDQ-;&T/<*p[9l*<LSMY9mN@g=3JS+\J_n72"ar^W?-ri,RB!>.,\sOC1d39>*D6^#qYeBhg'FhWOlP5m6O7"pZ"d
%WgCgGLZTO)M#R$bpK4K1\nDNgbDUNpVj9+JF?nkmnO:=V2Vd9oOE8WDU'4RT.38iul]MY^e>6Y.`pG#f3&a:ZGn$6:Ob@`+$0Mju
%A5)#Ah`l#l)HTJS/0k6`Ot6QTL@JQfr<K.V35nEP^4i"No2mrbKI3S]^oMTl;q&]8[E<DSErX3!/j2OX&?67B(WOHj$4lO]/knJW
%(OOC7d1eB%@8La(ZNs4S!D`fUe'"U:Z![TC#81_KDNgE'rXpom+P3,kle[P/;J#cqlY5T!Y,*RoB9c)>aHN'BbVg`ULV?jrXjfI[
%]te-e8j#*\\h8o[LT[Re4###b4f&R60pQLF1MVdM2Z%Jf+pkU4rTnTME$)'T9-W[F[s@Ds+C>WuAi@ldKY73#s1E'%eZhZDR[tLo
%X0%qLb+TqqIi;)f"6>,0b"-d++ri.RpVP,'[puEJj?9T2VJT.]dO101EUO%N5Z;4;k;Ml!R>#0'/VQaE=01!]4BTC>*dUq'-;lCc
%Uu@H]jH1lGT5!,pE03)]QJ+tu]VRq22TWBr=iE:U<W24[B%sF;O!M(IOiht+fCRIS4>,I%X5#SN;tR?fD*GgU>jRqc13O$K5g(B%
%d'U+4C$424/?%MnnS_Tc7%IAZEB4sMmZuL2cK.JaKd^&u3iOID?L02rbHXi;L[)Nc9Sas1;H(I*f=h"rEKOaIa:gH(DHM9OCnTIG
%CJpVBqqOF,<7m>CEj,GY":7iWeeU3S#ee.@Le2`'#@T8tj,g;^2hdB05:23f9ft,Vi+sZ7\/h.YWGBQ8YB,r]1hW!rmh>`.GJ\-!
%&KRn7+'P#o=OL!U_i<PEXdVJMBg!&2::tG6Q/NpA<lkB09T(SOAIO4+iIQbP#1'($R1a\BqW$6uX=9)6D(1Z>_RT>nF.as;-Zl!X
%T-o?Ko*?jLZ&$grSJ'prE]$cf[9U9[ODM_NA3RWf.%XVF>%khkU#i#5;?N5/kHoVmN"I:FfGPiukXtI=ji\<:"=$<?S_\`(d1ie^
%A_A]#&9Ha1;P@%+*r4;58dK[F`>Ki9,pn$UWN:&?nW33+N&-CQauAGT!]t\F1q.=GN`YQM'6ftb?;-t;MI0OcH(<a6,`seHg^cZ*
%S\C4W@<lGLg`Tr4*G)UQ\V.Ki[/W6-A8Qi2RGE*p1s.1B3>/cKo0SV'1kr8,(C:UPm^h@EU/6nn?4"YYlq$`:l.P^Un=*![@ba&]
%1!gUPo=7TnHYcNEngNV:"rRUae?^7=A]s3Mn$#TS&A,l&W&n"_p82+gY8S@5P8gC+B]^jSK3d0'Cn'R$KZ&R07.)-po##c9XkW_G
%lr4P=BNC3O%PK6jn?S@fC='`fmR`O1;i*)8>ridL;#?_e&2R*,;k==!4)pGdGrrZNV,@uT'6-=?KsR:j;g^b%=^jYF<XdJ\)p8>q
%/*G]q@I`$T;.e:I9o?SXr'Nj`.7<D6VCEsF#q'RO::G3i]0h,;WAeZ@K#l!95/l2sr9LTPe]BBFS#B`38_d3S'"mRZids2;Cml#0
%OnZEd4>&$L?,QI5'=f7.S`kiTidtY?j7$Hd8-Jd8bS2S4M2`)e`%=D)_9:[_/i]/-5A&Jk69!XZ8L06V:H6B4&p$,.R=>8O4RoEC
%bA!=K#nASD9Y+th8;7AAcL'9!>dtpSEGM1\,;MusDDDaoTSAO]kB*:.`ak1h+G6WjYY:q0U01\IK(re.)cFG!C5Sg*A\F6m\BqG6
%3KZU8<b.K;i..X^'XPVIVc$[W8^BWB#8(rr[*9+HZN;g#lj[:/X';(DkU3pm/ajG-#:6!0D>Vhi,Psd!,UPo;!()=PV7^2]fe]tN
%*+LnNWJ%q]X?V7GOtP0B-q+:rMT:]j;Ad=\5JaW2Rrjds>F7rj=JDa42Hjhol1NK3qrK=s'#qTu*!8ot0q[4=^Ing:Q=a`A3_6Io
%#P$i?aIlngi[5V>/Opcu#;Ib9=db^::Ve$j6"'[\@603mZ`b#]P\:8XDL,C/:Fl"GEpkW$&4.Wg0agu$@##Jn2WN_)KFh^$g^mk@
%OH^W1n?2Mpq;@W%?^KbO83#6@%V:XM8<QJX@QoV-%Fs?KX=<^dfMb%k,]$@W_SP,#U`96AGHq\K5dP0"-q3"TrZOnDFj6CtTnE`9
%,qk2Yan(V`5s>Aa,@$`!O6;8%I!3gqC]Y9>#[tTlhEk\7]]a[9K/q"hR?L3npNcd$3[c3^k4o\D@-Q\fU:(SEK4RujEi)W'i3AX5
%R@(48O:`Jf/O_#,bMFU)\03HN?Dj[TrbLa7@j>F;Hbqei'U]WGci"OPi)U&?nH169@)B_bi@:TLLa78BHN;I3#E+keS=5c6kNA*?
%(*(LmBC%H$N9MJ$5mIegd2b$`/#Y/i[YCT1`G<"]e"L?NLeJ%4X&7,`E+$<3kpJO%(!WYsFDt-WdD<G`Iuk/#Tk\<<q;<V[aBL[s
%)oN`"e6hnAAn$Ar5oT&_*7qHklS9D!$0-*!i#ltf13d-tc$V2M)=;)i+mqP]:Z-l)%&/Bngd$][+]h0@isAag(1ECV&e7g%&sI]2
%f+UlpcU_1q[63!9I?Ks7G><+91I]<*Y1*A&)8nR*]&t>k":#eq7FMJq_]'tR3##]?i:q.1bMMEZE.Hc)M%#\tHtG-i9lkPg@q1,p
%Y+*W2&M65Ka4%W5^ViDBObTbJJ,VV0TX0hk,(iECZ5nDB.2sOL"rk3*rbXP!F`&SuZ.B@'e."q=hI_Y3C18qXcI=02+FD9h?Lq*)
%@aep_31(YA%#1+>1DciqB$6]>9"`FH,@'^dn:U.0I83,R?>!AX+ipR%+BaXcA0\?pYO3DW<V[78(BQ0^R8"K;So0b5`4U<mo7S]\
%.>o2'qM$2/gq.(]CDI#sVDQU1H(Xt0j+BDBUO$;5:NRIjp8/<is&t;l]8[o+((k^lg_E9pOr^f_+&l^J)5"VUL8+*O;;[k)fQSi:
%9q=B.hLAj\17FNoJ\NWh1%(RY(hQCal.fqN$/U=0p%I4);H=daY8;F'9$:fVFS4#/@Q#4*TcsI#ra<pLotsSu%&o"`l`5@kf=Wib
%ITR6.ipNZR'm2Y;2Reo6FkEFq/oe#'W_6ZHnM7*l6/bm\]0BI76ol%*JLMu>ml"<E/Nj$?q#[4XVIHj,hlQ'^<ia;QI\*@9o'6lo
%U9dmMcrgq8=/'OWm_a)i0oSh*\p?EHj06+@h>BsUW17XjDtCF21,U'WcW7_IRY`;+adbm),JSD%?c*G3I-5o>VVW?b'sW=%e!s6l
%][-O4qup"D],GcuD3(5VG(dcmq4nb'Y^!Tt#b*X`0WLZ3[[Bj!7sOf?3?3+$^J,+*;:@lGr3O=lVS3@s@A^u5c@+j4pD?"UbQ(4?
%pEP*l%7\TSG^[^F]W]k+r9d)aW?0?um"C(6UXk-qVEOJeO+1S0eQ:7X:a?"aEL=dS[p&n4r.GF<B<QOS%k.9_9cfVgh*jL=qKf_c
%\RlkC6OX3SQSq;(YL[bqLY$&iXPjf,_OK,kj"B!.Qo(EE"C'GdFir48#RDN:iX!1=%!.3;%3]1ZdoEs9,VlW=2[54/mSZ`A7#o5c
%_\KB%OZ"g1-oHtjOiZ;45O'k7Tn5r?#nG6-mR-QG$>P?_D)JCh/5VjJg3u^iOjKlQ8ROg-!=<n_7e2/_;:eJBF-,(<VAKs7e,H>l
%Js&+kV_^S4<$>]*_LjtT#rb8KTFQm4a)N/cW>/o7_?^U^7M:@);<Q.'YooXi4IW]uP:a19+qs"^$&rAj`15,$k+CZ`fT5/4d%(1m
%ljOH^Jl0TVK#D1j@iV$np\O@th:Zm-#8-*NP)dFP6K9Km1*K$j$'l%/Rl@7@Rkp4/UmkYJq'>+ZC#^su9MKM65;kT^_uf/*JlT.f
%"<S>M5]MZ\51iK;$;-t\n\P'5;I$IXo+*n]EG%S@5>PoU_fgluM:PV3f/q+?EjsoN$QkW*!2]FhBl3_F@?H5jR8:&K[pm'H-F2BW
%^qDhl.q/V*VE(=aH(XusGRV/Qp:Nl3f;Vu.EJ*@df^2kKWADDE9c=>j8Hh["m]gT764@q%5qBlH9b.]J@Yk+[I1mU<9Skd#qomsh
%)6C5`(HtB/2]aG5n@e%hZ"Z?-3=(p\-cfQtO*t_`bAL'u8I$uJ2(i]XlUSGn>!ZqtK<=Ca^:!o,C499ILP:)!M1lBsg[ndCKB!Am
%.e_;]%>MW*Yu:X5nB7W_@`96-'`MBV6&e@%Ns1-+\&jK>Pj\Ip]deF\)"qEGdabDeGY=i"RcQObm6Li,Yb`o0Ff!F-@T\"5FF_jt
%-:/>`F8hQ%@+2c=(CHOK1,cZ?oO[08pe?VBqof(fdf`4s[,Wk/a!<FFM$4M3Ub,"^\]`hW)OLWOVDQU1H(Xt0F;0\-rbNW(-.V*`
%2Xs%38!2^d,#6t"D_f-QN2TjQ8_R'OP.U(.idp9e5sWrjK\cNm"9ue--Q#2ZBfVCSUd)aeE;Z^HY<nEeOPld^a/SM]9^Ie:cNY0q
%./>"9[ZX?dMkZb%+C#/4]M<sE&E\KLLIk=&iF?/af^7fm.Cks\RiqPi(B;<T;u#aJ'nU7RR/;@/L"nX1'$!C;U9Fq*mO4l&*0;un
%*:U,l+67sn==Ps!o3kG!)t9Zk@FU;n@L'(U.lPBeE%"TkBQMYZ]NAW69Sh$l5f7n<nrhO7f+S2/;.e:I9o?SZr%i^';]SO3iPr5V
%lbo/un^;2S1+U3gK`iAX+seSl+GDL*Ja]'@"DU!m`o?,tP8MZr2o.5mPaKq1ci!ZHJgXV^$Nc]7&jT$kIYO+`B\cP'MU)_#YaR:F
%diR,G@"8IhWdA<_A:VaC>M;IF;<^`DdQX>eLF%4J\TcXbm"*N<<&CBa%#7:+B*NT3qRE()OL/6OkBGDMGPhPecd4Tk$3UTD6d`5]
%T.GB&(W[FAAJ^?CACFO7!)=^ORs&8V8_[-RdQ:VRAqE$>C)Ra0OghlNbWi='`lnf&$oCNp*2&>*9]Rg4[V$We@ru)0W@9T,R(4J1
%-8tBZJqLG,a<Yu_qnrSXT\2/7)%pj$s,$`+RtXo@F;@uIQS+e1+M?#GC6?$THAp1"SK:rP,;,9qP.$UBgb([\=Q#KGN+fe*Oa@k3
%(jA_g$o93lFRCsb%/3$^bgc#P"UPYg=:e]1:Sbhq9(T).1Vlu,WfeqsY[_-oE6OOd1NAEf_FuZBA:e<F[^43MY)H.]lhk/W%ToiL
%;p0#tC,uqm\-t"E2A&5_8ktcZ6:^@M0b5P;"V87]pd[ILitZo%nd,fW<dG0<a;t1`qni%mpNG7C/b.KA[XF<0(n^R0-Z'6JamQJ'
%M$W5tZY</^-/N;6):!f4%jlnI&tUh!6:N?'^DmZ?YXou=#G"DBaZ;s99MiaTBK;,Hdj$L8+YfXhDh;Jd.5@`ATD<\f+P'JNFqYH]
%3/M$G/U\><4/C@g]kDU&_/KD7VHp5d1D)0.Hr67:@dDOO:/%nY(4l#W76dlq_pZ61aN4R]VI0r7(/m\lH!jdl/o*S2PT)aSY41n)
%"sVU=FupBD%ap*\GaZ)_m0';;j$8krKMthDb%?Ke:&?X&jD68#\K.d]e%ceJ[>a@3`7rL#_uf[Q+RA(EDQ0aFB,J`6&C==:_qt<[
%>1\9?bn-tR"NU/h?*jY<2]Y,rhUG.6+qr][h_r;A6so#aPTl5\q9Wf+khRu$9ufN*Bhg'FhWOn0Qs^D(qPqS3@tJjPJ:l]0Fgul9
%%kl2cYQSA#lA^D:S^tr:+\tD1l6-RSnfe"L,'SqIUWsnN"W9_fS6EcG\]I3a8gK?W:H6C_,',rWR=>8MX>ntq>i*(jQe**mp?Pc"
%"[28-(@Qe+@d9c#A]9#_9?i;a9fI;ub6cj&I>%?1>2'hAanQV#0,)noSc-#je*=ujG%rQChBZ:,]8fH=>6h$8WoKK&026fC[BOu&
%^YA,B@Z+J2]if4Zn`1HZC_bj/kuOibgDEGJ]eZEZ[7\i!Spuh3<fe[hATn91T#P+C*nthh-S9"%rC2\,k>4[57@9QS0;d/$^?F>d
%0eN6PT-=TJhYeF9(g4\oXZJu&*k>@HGK5)&CnT97-PRcnF8lA0Qt+iYeS->h#<0213@]f:VNf$Q[<g=?RhV$)n\dO5&ZuRkRodK^
%eOS$^YGiu7KX_,^7)HHTJn(<"1?W_Nq0*,g(0'.6iGns>q)Y;G"r'3Rf4Lirj?/Wtbb<?;T4_/a8555Eq!b9m;G($6_A)<(l83t_
%D56iXdBmBZ,')/5r4?-]=HCL6HZt15\h8jmlFO.i)0S"6gYkt7N"U$Q?V:sZZPPFMQmr]$+UmS3o=$0B'^DXiFtb2sX<NoLbE>Fb
%%]67T;RmYRHa3$RDdl/XVC:i\]s<`V,](n,_OJ9o9HoD+KM9&u(>fWABK"*AKuj/H5=>j*EJHPZ5o)8*,e@"3D;n_H#q_u+Ng.`6
%A88^S*:l[?oBXSsE1N+SO:hZ$Y/A4JCT!efgn(@E<AtnAm$PAL`>Gpqc6Xam-N+UK"Aa4SPci#gqm4@O.rM-f>MH7W*e%>Udc[ho
%*f-0#0DGiHFQnIpQ@5QiK#*75OofkR')*6>pY!/g^*$b/4IYu_IK*2U@T2^ua$<R6:?Xn9cYsPN=\'S[[O#]a10h629*#DPl5dPq
%^V5=hW1T_miA[`bK%UinST4rLlp1cG?J(@/:(2l5Q,\qM@5*6SAr0.tgMAI-I8%lC^W=*/Pt4;&or5!b@lgR5>m73Ao3djc2r2;6
%I^eR2%iZ]0oul(#]*]`W'.;j"f@49.enC[uW^X9:o_bJeK$@$/A+F)KH(Ep1bnftV!XI?),:$QpHceiM]lP07O"I=V1c6lQs-FoC
%oA7B]aP]d?)H\2B0N*k!3d8da`3gRZBpp[E54d*>'MNohN<7X_UhPp?_F863MN&)-HL)coApkr;USa0D6Qm)G-ah7#iRj'ZDT3j*
%W@)FnOb@`C$0OQP,YdJ\p[@Z=XJikt,5+2M:(WB6b>M[J*dkqVNKS-`c2sh#%d@(sG86p>S%B"OlknW*9t..[5f>f,X3mr%Ebk5&
%LA4^.ERE"$D?#E`+.)&&l/#Y+D38jjRc[@N"mH`m/>eSP!1'dkf"&KM92POuc>TRQ*-c*X^HALoD,(@RWr((h3$`ldZ4T6geK8^O
%<S,EC:rjYQp!"l=F`dd[@=_,;E=`<<Wd24V.%"tC*[nQSL;ep88!cqa(*W33iK&6l`f',6,a*!P?Q4W!'L:J*)jrfar.7EMpC?^U
%6@nq;>Vk\E;s[^[Y=KiNoA9FYX)L/Z4`QpsTdB"h_3iuInAm>6<nDn#e!L]'][-Q>&OIA8r4o,3nTk"GhL]u6C;ua^I%]79[8(q#
%Kb0kNl1F7D#80C9pVT=()(tdA-B[[`]S,C)d`rk*#<>A8R10ChP`1\LO"fu_i>cE"UtONNrX!E1J-38ccPH:6PSS-a%\NSg,>K<7
%/nQ3dKQ!?jpISMI`8%]]3$h`\S"`ZF51Lj7%lZM^WM/nH@7np6K8_\d"amp=7EUBpCU@l)os.+lC[nuMP(LOoG@g#"dV+HWd&IP;
%.VG^#o2Zct>]tO2;a3[l3XKV=PAf%!4opT'LVN'%1IU)Ar.@ZSIPdOb,*Er?F[itI.Ea"2-KGqNI'q]@[d-;?A%G'ta2Us)7BI4S
%P-BoYp'-I-0Cd^@ZCO_5^esQOq.f+YWN"4!,i0mI#s9p7JN>cQH35T/[HtB?E[^:0X]oRia#7VZ7\HdsB2*[=Zr_uR)2>[<>LCq<
%fbCU3?#8aSOtc<oi#$'^jOr<8rdB",9jIolo;VsL?8$9FqMb!o<rYru\taRh]IH@)*-3c59pV(s%le!2%8;-aW]QX5GBZ=RUU?NE
%h<L]^bMo]8aC/-qM9WYiIU&(lV0cj7GE#rC>tDj-l0R-;3qdUX"4('7g7Ehk7]5sDWbe,hnO`%bF$Sqe$^a`Q!l;M2=4ID`l):%8
%5gb$7m);/alR?q9RdO@"E>"\lUo&h8hPo0g;rjrHHKs=jpi>"PZY</_7Gd2+&NZl@>U3[Xpc-o90u5iM;&XUcX(Rq;GB&Vaf^-F.
%0`;/5Xf0K=O%=R4+pmktrV,c"&qCPHG"l>\]fYp3K9(RQ;kBnFI$jf/dD<hEE)r4q286[eM[l>,S.AL*m=\Ka9$^oGlQIQY*L;cl
%.qK&P:(%A"XQWAZQR#s<kUg8;99H00\k+k]p?n;$M.P+rVPrak<lJ;h@GEr^5#;l['=uNgcSNFJEMI"Wn$cl9T1HiZR^sK).`j.o
%_81+o9I#]o-6U\`$N'7&Rp.)29_*ZVmKCWUr5No]TUG3"4LGr5X-2CZF&Ub'VsQUkab3j2Q>@+@;k!a=0ced=,K]9g/YV9COm5s,
%I$0Wo^Y@hO'Zp-PmTZ#''1G:_!HkntI^>@"I3^&&)ptIm<U4<]C&,e/+\$2mpu$n\m88[I3$l]nIS<]6L?R<LDJ)s"CLSrG/`-.?
%N2GWBV`=:G`.YdA56`.b28K\o*8f)9j"bcFQnO5S1Rdkc?0&oI5CjQ464h&Lq_@)bja]4/8e^80/ZrYD%rBff_D#M67FD`-cA&oe
%22F(ufSc;;QAM0$SlW.^74-$f-_(95OZB-4gqQJjZ(tR^%8gC-g!Z\Er22>mX1rU"4]oCt`C!Jf@$1BcNp0Z8ZD+>_To;[B>$#u'
%(?0LP-O5%D^A?ECV]5R,d=hW4M3dT*I6BeGaj\\O]?6ePgLC&/I.mDaMA6L;!@DLh^KU*lEr(?r$Fq?$>>D4H]t[8Na5efS5G&Dg
%j3Z3Z&KK&Y/Ji;T9Bl&&0ML"r`i*J5W9J'e1+Y/aGrm@#QpX/3K[Zh[U<jer(1.Uj-FM&hL;;QVmlJ$V7&^L\8&p^=i9X`Haql>!
%i3S,@h[:J6EF+T<N_@:s@aaiN=XRCY[aR%[NfWP:i9kX/>`o%f/Bq5JI?CPSe/H*OZOJJfQF&<6NH]u$*p<g3HEWJGTr42"`[FXu
%e@o-SX5Z:I8qOoKR\!e0H+ouOe,VY3h]eE'S.BUj?0r@shLuf!UI3QW]aQ,/09WuOOpbrgf=TVAdc1[L@qPXV?B"Z#XIH(3Nj+1:
%mXWh#!K,iM'uT;(\Pr_/MSFmKI3nAA!^m"&4YOus`gHa#'HX_:f](l3r[RCtB#!a:YILM_ntDCb8uRi]ipJVj2=B/)*`XQmEmbHl
%QU2+OY*V=>Ne&bV?89I"AJejoddlo&4N*7&?)r'"f8O&n\+4!s`Am5s'3+E324bkcZlZda4E\[keN1dO%;l%:XLg"qYJ7?W'?Yg3
%EH.<u0l.E<5h@K_!8'5s>qQ/YJ#$-GKp[@HT@j+O,X4#JP1lT7d*lQE9ijM^,O_Q6Z,ilEr94"mhQ+1b">$%g/!s`5SDm-hCZ.-5
%i"._'f>Fd(5;A"_=V!TaC6<ouk\AYJiJ9ES=,(+0m2"s'0HNYj=qQTsPBFu0RdD:lmT22*9\/!B&X*/Z'<Cmlb+U:L//T=,ET/gq
%:;^Tai-24T?k32p_=MsGGg,9q%/sDp/5QiTh94,<4P;3X/)4_H`"_I3OTg-OZn0q@R%'12:_F./=E]748:HY>bgfCV;Sffm$(KF;
%nG!gN?:9\<amAl[HIk99Y[!4=h"AuJ:b@-NCLZ%k9$Bd004k5q9VeWm2QJdp=hUMlhk'N8per,=-Y.'un9-`#IseKGMPh=<_C[Bj
%bB]'Hq0or)qD$70Z10WsUrP6n;UtU%!a!=jDhP8Q,"-Xi1q<C]C@8hi5JZoX3"D<q28^=TS3s?#J/I]cSM8h!S%;?,/?a(eCNaem
%Sp>.F%PKb$^#X5g%bXRiLgU'"kcuQd;I!9[*C$s6Wm?,1/heut'^kOsEX^,Pp1q24)uSFncUZLFad'UZA2dfebnAE=a/Zlmj9mX,
%9(8k;7e/RYXG\&K@p]"\\r=sa/Z'V7>jI/hWVVp:KV%3T=j3C?iH@%dXPSVkY!5,_3Be77dhDNtDtle&UP.YE1A,+HC)6"eF;.U6
%R*QOL5$T1Cl@I4F%<tolB]QX8rB:0q>*n"(\0p8uJ7T(K:9^6>\E5">V&?/=5meM_Qt>d'EDAWEV5/p#m/HOK7s`qAq3PQhIuK?"
%)Ce7=-0;:cRp)MZ[]99s&rh+K6-0.7[?P%QeQYUg\m:5UU3#--RXZZ=i_6_S\"-\(i>7K#&k[nIT4`AO"a`n*6-@dS"jZrPbTeY;
%V%f\BqMI?48.9j-jk?9L3;hM>&*i$aTDI<<c[c&k;9a%XF?hZ?(j<m_=k#m`@G.XN_,=W541'"h=Nt'c1XX<bR5YfGpL)Eik%dO"
%H"M^QS?Q/Z#p71Y8YfUh^a5t(q2r&?IsO:TQqJ^N/kp$WVUYZ.rH=KO$R,0II*oO+jI`%ZR(j[$G(8)5/)/'AKV4DhIW%gf2Ks6]
%)cTS9(!c;H@mn&`D:>iE0moP4-cEdF!TU>sFIXd''%cP=Z05JRWH5CA&GED88\psN)f2HFZC-DN9$Q[9W.e+=qUIHb>8C6:606rS
%IZW%<G7C?pJ"Q4rHJ!O^m*_d@rNu+`9DnI.6g-]o4EK8eq+3bTB)oR"//ZAeYNLYX10dI1[,N,V-cCH+p%lCsHGTA?68oY)JZZr4
%:BO8mrlnE>LRb.1-/YdhoqHBN.pV1pFhqFag1Ni:kS>fo..0TGk*g^5n!`kEX`O:%`-s\uDdS$uD]N=`BARQj:>UM(-Y`aGhq:6l
%oj9S^J,K%c0DP+1Y7G4qNZe]WQ8r!U"ME#6L_K,RX#tMqqBXjB,W55(#f''1Dc::ZO^;7u1*53bQ,/@uI46p+mp5oT@8u<AV^RIf
%Y6aR'e@T5]k;gn*RM/;UpUU<d#IAChkiscH&'SOqXPd+L>l;bp)6q4X7N^)UWLsuP9Z*,_VbqjZj%u3$df,$:s-pe%f73\0IsUq"
%J,5N3kJ.#^mpH',_&2t<2uicir7c_sa-V;Of7+XTr1EJnIrneBo3_Le^]*j)p0[je?iTBj`LhSS%q#A15Q.cDci<UOrQDsilMpQB
%Wmq(1bCB<AJ,#B1q]Gk;Du\;^pL@2&a1qTPci<e73>?Cds/0KoG2lT!jTjZc<=c@45OEH1`T*r[4Moo\_Aq'_BC8t1YLp5B&n+41
%i?(6LMgfG`o*:5UT!8-u7'CULSPqPM'i\6J.</:5ct/>r9t_5,j%P:iSbpY2o[DeLmqhl0Fkjs,s7HG3qOnoHDJ&GgD7_.E>X;?=
%<AZD[-]%4T2f5d8a;4ic9(3!A)0r_0MPJ9,'4^o!MfoR,SD^9!(KmSSe$;$,P3-!R[C/hlC:R/lG]-a`%Q)J7Z;n<[lAL@EKCHN#
%aLQSAT8#C4hb6aNjnR>l;cXoR';;#NPEp^^Bi4_6Hae;m&d@ti_t`_lpkm0dh'T#_TeEBjZta$g\e4XF$AI[/giVngU-GFbR@*`O
%J"H/^,R#!0&rAlg2YF2.089qaS'_X3fR;>#qH7gd7I`@E<W"\r6)Yb1?9INF%7AdDM2a!1#mk*u]B/>@^)^-h/G]Rq9lYefc8(5%
%N-crIUu-]ZbkYKkrgbE*>tA1>pL>CdfB>.N/"TdDD1a("o]'K_"n=$BI9+LFh9)&*'T3G?2/#`Do'U8WPhjcp=K,M[+L![SPkL\p
%+'7H9`SOnU;]Q`D&Xk\2:G&e`rADEYTroKc]4Qg15(q93dc5&SpSRAfh@WbOC7_#XJqQuhUrXfWMs-D##e-p-7q]=LaPcG3OI@B0
%<\:Z!`$QKN]PCiU8Yl-?Soa@T`V74R)GOp4+n@hk&%J"/@U-2_a1K(_]ZtIHqJ06qmM6mNqim]Y[HJuH12&dTl-CuO_FNrD/28=:
%>OVEK,*tT"V43Po&[q8dafZYJ$VcX:RaQ"=jMSq9&p.:#fg1t&=i`:CrHGjN(S]+4Slq>$=m2cR(@\YnYc*(R7&aj;4JBZjS?e"1
%W*7DA7Hgmd%@4N!DM,TOB'53Mma[PEe.c%(eX7OJ17"IE)T*hW0qF)fs*;1,T#-Z&7)&oEXHj/;REQho'Y*6?EU*XDmAh\Sr'_T(
%KoG]\[](]<!VBAu$Q1Uu;UZ;&a^RpV/=.O+DX_L\M'$$\MCt'A?L`'BaI&'8Y;)nag>"kY9q*GmP"MH.mshh"Dfmp)N'''M(>i#8
%dedWNa*%7.YmM)7FF%V/h^:Se(h"2@M-B;LYjH=u8f2,g:3jqu1UZ&g^sV6TZ1gZ,I+Oi2Lmf+NISY6BH.W&+E#:,okY@!T1g%W'
%\9Gu@4a(_`1N[mQZi1*E9^5aU#jI#Dn7L'UH)\h9cfU0\RRe9p3Fr`U_',.SmaA?V43ZdF858VD[cq)BA._/!''d@ZEAW[0AA?<N
%Z%2^h`(d7n^L#iuOWa4I[d,a#$[-LbiJX*]0c_cRT.V]SbJ,M(q%1_1Sd2CGn^&Zs,(9-TU1&tCMlc:A,M->XGEmP[MMK/sG?GG.
%?R^blfN\0]l;>kI4&0/;d;X%'_aLHoUr5XVrLWZ[-;bO1>35;=#Y91[15LM."*j'RKW90`eRR6iI6#i/P?R\<mOBlP8O#?j:\*)]
%Z8R[oS9d%D^(AHj:D7`)%s.^]6*>1r;kkrYjFi^>b9P3PA6>C`UnHm=OC:qo\);)6Sm!)(74-"gRG]?t.5H`up-*KW*,%7T$)P`?
%h#AQ<q.,N@C`<.%piho!(FI6CEd.m@@?R_+IE+`*OkWu$+d.4"`\`t-+LE:GH#Ijh;.O4ig\.%0,Cu1"<Dt)Me9@WIb*8:"\^1-d
%-o0T7b#Y\[3T6dT86BH3`h:CW<N!,17>;237&";:EXpZJmMCU/M&ME&k`\@F1Lu62+lcWPA=%!`ZL;V#1&'-/fC5d(@;/VOL-1\b
%8AI8@A72;OQ;<5t?nL5#%%1'5%/I'g+(WI^$UN@'bNCV=AB88QBL;3!^64dO+)72hMt^F-D/)*AD+tm9+qpGJ)Sn^S;e2'Km!U)"
%3DaIZo*gcU\c6rHbShXr/;ZF5UGC#W2fa7`$8tN/Ulg>$i24Gg_:eY&R.4sl>FV,9'/W9+M#/MYL7&Zq3qo%lO#5%3m_)jr1W)tV
%EFMP+%&Um4g:JEf8t*f9bkt(-OT]&V-e=5e=Ojs-ZKBCFXV,F+O=IU0O!sj=9qI[=h*lMP%!C(6G!<s>NB#X^3htX_=^6P>ZRVM,
%5A:"4l3ptd/)R%,05sa#*6a=&Cm\];l%l:E,Xf4_BBW%mYt2_Y,paOYQUD$2VV[_-dm16R:+/Qfk5HM2h4"0WMrWj'fUbhPTbGVC
%%XYf5%#)UEJj^L9l"gi<Nk#Dd34&@Y.C)`nO&Ar6$!GmVa+5H%R69Pm^h3C+\SoO<G;4i?9li3Ani#t:?Q:hC(;8c_rgc1OKuc&*
%Z>)uQ]P23U<%,;J[rrCc@04VdOg%8A3"eUGJ^(m@$*J$8A<G\G2fe@MdlE:-R/3"F;cJA*/g:V^h@n1cVT>:SII<^mT^dAm7$uuR
%Lm/j^1G$KG`90rf^[N(nM8FC2`jF>(;]iMTg#UZ4"NafpnX?I.$E&+@i>tKA!n/K4*(>X:cOd[gT;=U'm1ruD<#6'iEhYUj,=9h_
%[7i12c)aB]GagP7:T:LG)OHHq2'ccfpHNYQl!4sdJ$Z$G'%sl86SB?``K0CPb<O(?nHi5t1rPctFn>8-T49-U@K=6rE/UulQF#5+
%Y=6h@HSLLpR/q&[5ShUB&/#Y^^*DW+d;`mUeQG&r[6q9:En??IHIsXP.Es2-hC&:/jI+MK:\nLh*d,_mJN>>P_l?1D3)6S[T<Us2
%#nLm]eMb*tK_&*T/;@XfG-kts`W*-TDs>ds8ZpeUR/atH!4(O#e[r-ReUWel!OQFZnp8[F[,_8M:)g;imJck*'@.=l7G`CE?aD]H
%8=\.S,;UP0b;p@U%j'H+r?[@qN+XLt(7HFGTr[URUsH*1=FU_eMIA`?i)r]ca`#S3;+m'FeEq9mN4H+OZ-IJ?E[0]B\GnnW=!^IQ
%9mrP+W'I4*'F"1f2@FM*LMAl/_J,XOo?ETVD;FfqgfH4g]42j4jc7ZkaVlVEc82Jp]J[U7(oi_%CeRL"\[21R#rLp?C'CDR3"V#_
%+_<:,2D``),l5>QG%qUB-44SSEM0!rPa>`/M+k!5NsRJ.F'D&X=sC5qDOA1)I%`PW'hXT)h-W[F;5Hk,rDj,^I)/t#bCZ3uVmCAP
%)B2eTcnmSH0o8TJB<NRa4Rf<=a<^Ua[?*G5BZEjn3erli+nDZ1YKW_P*UC8Di)^iq"_b9MhqPURMft>P0sX$fO\47O/qD*<V&!7(
%-g&dc4d::(T%^HlTkS0O@hP1H:JPRS1F7c6(UY>VTJc^_C*s(BXIE^0qM]e<.<nAT3Nu,JH)T2)S0J8"%9304H^M:.YYcpd<;ru6
%2t?c)ImsEp3Dc82#?:LTN=>fF:]S$\XSc4qB9ZD6A(3+O1fC.?B>FE7k%)b?ZWXIYr`o.*c+Sl4_rIO]:5P<0ARA.gMcWkcPs*Sm
%-cI>c+J69MB0>TVX"pJ57*/+mGrGt/feX'`,t$`nnOKlt,\a[Kg&&Ud![b4+S_N'6A?6[piQYV%.1nH:g,<#b(fna7%s:?8&ej98
%'@(0d`)Pp"q=EBeZ(sf35#3PNf7LHLS[!IgZA,l1@$NhF;!6,%S8rD)\ML,QVNA`e0iVm.&UStXTl9YcB'Z&EACLUfM4?^"$0L:d
%L0egh;ophMDHh)CAb*1Q-(aK&!q'<SL4jPQm8MLcR(Z8dg6VS'(fn1'%im7cKLH)GT>uV/NT4K1K/M:0H^)3'GbHrNoh:Jah-Uu5
%TkU</LEL"^2:62IO,<qFQ)HhQTEqWRDpZjea[h6pq:miR"2oNtF/QhQ^7:L/.W[[PK/[Hl.HqJKH@H7X]Q7pa.Ja[^)mYK6r(<Hn
%Gj'leLl]iN4jkNN$HS;J^e)8P#Xb@65L1!4@frit&/*CV6E?.-glBq;%2p,s)'grA1-*1Uc4l]C>W%"An:nBBEAnlRnJs-r)`Xg/
%S6h[jVePKe?mTuK7S<$%'FI+S[<::]G!gYgQsT&d(T\]Gqi\3'MTRSIC=#B8#5V@ki@TrC#cu$`n5,2%^`J>HC[?cifU0Wt*jH[4
%QXeJ'V\H`d:Wk:a-SjNQm3:5S2cfq5fF8ZqH=b[[%@CCA:,=.^ZMXBB?QWC0h4UGRO?k'(o@[pGL3/GYUcM))lt<c^0_"Fhe^t<P
%RX0_0X6u%-h2hkRR[6t>7_j+I+'iIqWtn9O;b"_M-WKIol@(]nK/\%RLLcK;_Kbd-F.k$<'tW]0ZKMbA-Gd2f-[8]N9[Og3^<pCY
%4aJ?WN8>+p7704a6^er';Jn1_2_^6`VQ%r^g7Wi&8/7-@Gi$kmRrZ,dcg<NgC.oCoU!Xg$P"#-MIS4\^=lVGOW)c&QCW`>p*,k6R
%s+162dfC&bob4((#g?7tSc[E_%3H:h(b$l,C7Bm#NBq2sdS+>Clcp>JUGd@1.[M>4$GVBV7tOtlc3Xa#NKh%c_jT+WLiXp6d880`
%$\=-gD'mal/kHF#9G85nS81gL9H#s-^+0(M=>Q*%<iu+]2#g0>JV>pn$=C*_9_D%:aqt^lJqN*HaQ12uH_J]H_ad'=f8jTd@YH]R
%*4.^p->gK^rW(Xll"ZJA'-+A>dK5777p9<^c&id/6Sg<u&Eca\bL[258Xp(riga_6`.fKgYS-+i$fn"Q(0HE7U]hBNNjQSoS0KVI
%Lbfo%M"B0BY9_DU+BRHY#q*pHKY+%sR@7&VF6;u^:s\f-H%b_bO^Y/t,Vl;Pc!FMYXYM=]Bc**1WqF]9b\Rc`bhKBY\]gkR,b]lk
%9-ikW9;Me>@j<[UMaTb'Dk?Dfln'A-."N^<:3iYV7GUbEj@iN'/=BpZadEu:e2J!B.nfTS5T]0HJOGYG0sHi%8.6c,*/T6m>5>H?
%GMDfGc8n28`'?Mj4>X52j%KnUIS=nnIXGYrO7VDQP<5<;!=,`dbWDT6r#ds`N^USuUT&\c-%K_G#G&i2S05GV)9e"[=ilRnWSk`s
%7:3oiZd'JVjP#@Y<+?Dl6`"uKQ#78-bd;Y<ZtW3)e;\Kf3Dc`qC!]>j9?a<"^J9%;7bX^$5Y@7^03Z:?k&sGt4BIq<;k"JH<W%bo
%A$21BWRG0]:6pI'l;r$(A]SkW=i7F6$Bs$BErf4m3)m"t<Z*<idD@R/iD4^+Egn=p7.pP]^#@Wbe&QZl0=r4hA`H<,@6AnR\^2%Y
%$=.fSq;bY9T.O)XFRK1)&p*oP5ebMpo?ZqV6pK4E[n9]dCNW;[HA"dOL.7"[W&Z*1Vj<];)1!_[`n4s)@r$o]rV9[29W^"(MpJ)B
%nYoA=4Uk:>H\FI$knW=lF<\t"Zbi4I>.%h/;.:$fN[?iq`#KQH\Z_AG/_Zp?f#>e8UW-GQ9`fJrCU?BH1on^_D6WW?Q/Z6_^&O'.
%QrD2K5VF$Gne1Pnorf#u6a$4o$QKYgW2HU8oA-W>k"sLR-!o,N!&l6?N*:5&(7>PtWf(<CL1Ame<pYsQnKSf0,4FkH7CE7rK6TsI
%)B,I480hV+42J2K'M/X;FT3U`hRp</*dd]hGridb[gQB%A?@lV?p"^'Z<D=#\>!/BNWqtT3@LmJ&$jiXFDkKF->0_Hr4-p2TPAPo
%S,%4tmWS$O9h+YE40,a@*1pT-rl>7)n0.c(2dC/og&i@rrOJE'8Xng'UOSLXB?dj5\WH;u`O<+3S"*+a1!!BN9\&dpE'/6%d'FFS
%=Ktc@X+-h*8F&KDB$['EAYCiC'FKt(h-\9q;4JUYWY9_sRl-ZY?@&9ApfK"&#Bo+Q3AalYMG26,57qQki1iI@+VGC.]=@3JG/m>\
%3erli+nDZ1(Eq.1:?..KON!R6hfE-2oG8n%#@]#2'pdLT_p!uWU2&kr@^H&Y:BVU7Lt?c$"Bq7RBT;,@h6@WEVP1h`;e0?KG(O4t
%.5DXLlMaT]h)%%b`1Qp&?Qp5Q5GK+3'U<'k5<F&JcT*iXZh+]4QSX+\>DBC7Kg2>8.dFR9pbRABo2#bc^1jGb&SQqp"I_daJ_kT5
%P3[ri2uG(jYn6,2:$57S)L7P?3bO@cpUI8h5FXm4(F8_C`1Pd.*>+^-U-m8:eJFK\-N["0K,051Jo'igJVJ#b-PIi3013mBnDoV#
%(j$6^F].:#o7p6-XsKV__6+bib(MV&=h/!N`?G?WVeNHRj<5.-XRJ%^M\pW3coEq.EJdGkbYE+.1e!Qo(YrFhU&/ZSOnqJ>OnCc#
%Em=B1feoj0BLbf33X7!chE`(#_Otm6T'>j\BmKs3k@[M:],Pt+p=ojr'+aD8MDb#$(&YV3Ghp%p=RtX0Afnoia>/c:F^JKMrXo9<
%%u,`L-(q>'GU^q7\X)UmlpRL\BWtqYR96^m^h?u`%n@eikY9UIe'YC4B0TR5%S_XTjAks+&ST*M8=.e(Mj"6Wq9f6c4,4g<i$JdM
%==)<N1fuJh9[%.Q"<))A4/7p/r3l?#k^-^&5h"(Z-q.Hbs)eWi/E873rmCpQY6MIZDK4YiZ!uLn:$N$YXC]9Q!nV?P#o]3q9/CT5
%;),OiPs4fdBNpWD$);)C!TkS)?n-6JqiTqW/!>c&Ps+./^1iO,2E3]tM-)+qlqlfh3AA(7*4&%PSXQ&?cN,VhRS[@PKEdrmRg>MX
%X"<RRdVs8SN's0<Wl1;q7W4LiL6GT]6CcHa9H-u1F-HSP0SV5CS!u7X`].+B)D7*gpiD9J<0r9\;f@l;Ef>g:i^k&./P9r[^aaEf
%U!^(i74.0'=6_?5;5=jJM+"%f_:b$smT?=21mIV@O]U?\8Y+8>G$eH8;<NId/n+>sn$QQB+pn"iN`KASaJ[Qc#X`!b3Rc@A>7qPT
%ijfAUAYqjnkG%dqLbjJg$Q>p*S_urc'TtFcn(deJI81c]`0ggAT+g_?A_EJ3j7&9kn<H+GW-<iM:++@kq0#,Cp?gNRmVHDQ(?Wna
%JiRt.O_<uP:2Nad+eGJdA3]D"2SHZ-q$WS]l"!>pBsUteUiJ06C[HH/=Coc?2#<Q#aM`t$&mi!?>7l]5JpV@Dj&fm<1mA[]O]U@G
%l$?YoNVkcHT%CsS991^Z"s&&D*Jj==Z'4K6LSd9r74.0'T3T^*9Ht_).8h&r%ni>HZ'4K6LSdBenuDSjm!=t/['-n$IKe=Zo#G`A
%EH43(bl2/6k3gt1)`3u\jEg55]'`)Ic=gC^JbhC;5ps]o%Lcujb"Jg09lR0h-)NS%`?4Ah?K'u7CFk(>7N4F\Ohn]Urdn1kZXYB'
%Et1pb1]",'o:?rJ8AEa.=Mb7O!BrN8nY9=eqo0W%bOY&[9r6A.Crj`cSE%KP]WCDpXBt(d^EB#$d?rN'-&:5sFulB(95B50A*)j6
%]:/N$^!:;(&-'Vjl\t]!HKgpe>SK8j\*Dgim,W>eU#A[?Obro#-bj_Pk-nj$OW.tu/E-Oa]435'Et0KZ6f_8AL\dR(h@K-(^U(iE
%C[@P"CfA%3Y80^^$RLtW"lBEamY>:"^N0lZB6&kTN+YpG(RcO>To8=loK+]3<LCe4hmkDAXUETjm,#HP7%XQAq42S7qORN0F5Q\n
%31cI2DjaD8B2f)&r=7_4cd/'UG":tDmb(;ukaTtIcZFhoms1J2=8'c1N"XR.^88]4;F+e7hqXXu-,/Pg4=#;fJMVK6icnYm[rl(+
%h_P]NLGF][XOnt1lNkf\]:$&h.IY]RPtYnc3Kt3bO]UABG5Bk+rstYEa1=/K`8f70MbJr9QJ-%$JqTnos-D@m+5eM.*@@&B*,+Mq
%%eSYcjj5J#fSkOjDlGW+nCZZ16gNBb/a?d0?ZR!^hiJM^)*)TuI4hY@gP"0\J%cgN"3>EE3:tGn8HoZNC<MsC]P>f^]\rm.hF)$I
%m<4&CQ=:r14??m*O%^\X-Q$03]Q6/hlPhtJD&DUp(TM3pp4e`1S!C!;:c5/mcuH:!56kq[aW%TY0I>SuA3e2rcf`])&2\KH>,"k_
%,3=)4nE.M*81'u$GLKD#-@@[YSXiYgEg5(A-du^mWoSiDlM/mV>R]/T5lE%0Aj*`86$kDQd/i8cWjU,K.Z>*XQr6-kqLN\^I]lj*
%l?u8L%"0nT):5"mr]<E*/pi<_2*o.)3'D%9O/6p<!N?h"KZACC<kJr>->2c$-kH>o<!6oA8>Nk+j:0sBP^o"[8jstMk#"irBnZ3C
%'*Ma+LL@GdP&2*6E^?j9J>GKEqTM_?4r,F7@^/Oi%Dddt>1u\!Gu+:`:K'*cjJTU3#ZB+KS#nn&"+'?^lF.<YfF[U6:?[GY>9(n9
%j0ZJ'gmDjjJc7t4m5Qr7.bd#c;&rK8dk2poHdfC:q,U"cTu.7U+4GakktbpB\-3dsoI!q59T)<CnID[mhLipij",[C%2s;clP);,
%JWOTjT\dm;`L(?lO*mVnfp9+01gFLbIdEC40Zm`3rU;qe.(m.NaZ.X!@+o)%iC5jDbC7qg_eW[$r<Ju!p#I9Z3$$X:!YtK=]0;O!
%NH[%H;U4hApUur5mtH6DrT)c'W#u!Zg>qJLEupf"GKmE38["AV>ac!VLATrBHN=4r]oR,:2IplCH+qk:fSDX6E%fG1D-h_70m(29
%KC&InW`+VV`QD:kRhDk7q+%%TJ>Ms;*;Bgnc&,KZ9sPli6,)8<s1jgO*MI[_QB^PD%FFQ41IL\dLJS``6l)nJJ1B#g!KlLP9`>r#
%SXdn\oY:JS`FL*2*pg!aBGj<651nq@X-cj#;j3sdM3+0""`:&P1L[Gr4QHOpVthPJH,-Zg-TH:M5<f#dW'O1j`<%-[5;@#=4TMNu
%d%B8Taj1[I$<XGZX1=)Z9O/`)I@C0?1^5DURh1rq(g:/*i*Maaen<c&JoCiEpdWsPd0G$`9(!Ute:2*/pS\VrBYgPYUbUlW>[Fc-
%?J;4`a]'BAME]T$CLaeJ%.m,tZ>q%>:X<UfG\Kb;<^1j+'(ne0Q5%ueYk@>_D>*"ro`5h-"t.81r2LFNaePEfK7b7>a7R29pPZ;8
%4Sg]s$`es!A!kd1?0=D+VTC!gb[X&3iOu0WQtri8Ku:l)GdD1(Z!6km=?>_O"hHN1)fOqkXA5l1iENM798t;]P,l=s]'`9W_1Y*G
%j7Dh4)Q%\u0i/(kI65SsO92U]SMKrSq&dJt5Dtoag%22[C&5Fn]&1cENPBg(54Tu87Fb.#;3b1?_KLc>/$P_KTRIsT(M%0'R]6A5
%A>BGPfQ_BAAlWP,VNLOl3pZScNSZ3pWPMB*H/Y;\Ng'Bsn9&=4gPG_lXAs%gI>nB,WoGZZWQ."UNi*S:i(t=LFIZruiCC!Y"/af5
%-e"\?pL?s!8X$B-FNR&G>C-o5>$tLpB'T"E\-;];nW=pAoeC`iFLWF3huV))3iXUo@FuZa6*de9;6^GB(f;VG?X8:j753<EKC9u:
%_E`CcHl1_8HpiGE5eS5R-[7e==35_O),4B&]m-=>>Q9'dHN+4jiW#P>1r&k,bFMW42X-:-IX-P'RM1;2A*fDr@j(\Dl@_d'MfmbH
%+L3%rNp5TQir1lkU0Qq+]h_O:@QqF'H,0=>'KAOU%tX@<T\1=nU8\OFTrCkG]^#JVG>b=HPYiD#/af1jJ(RZ,)\(rpT602S8KA_1
%po4F'O\:FIUmq^jlH>2_X1^h%QENqspNoS;KUT0soOrJfrXjoK:6S(('G3XG%%?!,h%GtKdm&ne@,&<mH&*`)B2:K'RNb=sMs`h0
%WWa%Vqe@96o$-Z'i<'mHf]7>CkHb@kooil(N';QhMd^AH?,&\K;#!JG7CAB.I(H"MZlj'dL9G!s7[&9\%:-n"VRs4:d`SJIeo^(?
%P5d5<KW1BO&]S626W*8[)9atg*s94UJbC-0Z"`;V_5'GU?rC&)K+2\<CsAB:V"_,gGP*HCg%fdb/Qf%(jH8)Vj03r(oWYA:.(V<`
%mMF(r5>WdLT@eLsW;g[CBKqB7IB*tee%,DsFL7N\'B`Lj7!PjK5,-.>oDR$Ik"*oI,[U-Bq,].aNrFg,4AY*GfX.ED_f@S)j&"E%
%ouo3]jrbB:nWr\S9AC&['3NIefR#^5E8e_[;:B%1X$jg<DF/E0/s)=.kl%Jr(>2As7L&9nKm"<)PqL7`gNl=I$a5Xj^nX"$;ahW_
%*O;@e=0h-=pQ*g@3)nAK!k2e?m!if3c%[m$)7kcAk5P2sNYbjoDF<hMm^Xq;\qs2af!&1DFF^&gqk64tGeW!Z-&8o=P`-M=AO#E)
%B^<\'+2)6:ir/@L:PT"F806;'jrV?+]5ui9O^mkIALbF\1:7&gpM$fT'4Vt-C;!,?i+25RG](FYc!ef>TrCdX4R;s/&>c0jEZ;P1
%-T3C7n7OmNB6SlCrTu`W1\7le.N>1W61IJk@7*E_&1Tsa'6?GR?h9%(k&r;di&I'sWD6!skkunV30(o[PI.JEVu"Ahi4_q^\PS,j
%^r5[19eCQ/"g]c[8d+8,;`S2U>Wf'C-?h"ci$?k%EbLQHPXlA39lMX>-'C;*bo]LZZ)4L'B4Qbo;1PeLaog2%Llaa`gQ4NOYf[&n
%W:N8g8hjG`HBL@H2qmsa"[[F3ANnL,N@C5*VLc6sm2sb$e%iaK%A][`"/RFM!c9CrKMOidL6Mm3oE&-*dQkLLQn;$`NAkWYPrh'W
%/e+'5)r%rpGTb5.2/RqQmF&UpReYAAXR\Up.dZRKOYE7eM4hWl)Ie_dM4hdc[(4KM=<W8Q1=\sQ=3Vi/"Q??s:K:tX!Ro46>;rY,
%?84?/_M_E(As!?=d<dZ)a@:V^B5TO]#TcQ2X@uB.Y1"\[3Z$%J`W\)"&EWuimmcUP-POGLBlU(^Jq6oK84/"96IBMqmjVn$'&GCH
%mDK.tkOLu7-MRWehsJJ?^-/sEWs(p''r3Vo9Mg+_WtbuF>Yr;moKABBSi''sC@i;R_0RXDgt.9M%RdS_=;'4;57DVi""J;[lU[pt
%/2=D=U4D?O?VZ]E\=iW>ktH-!1-ls"lB&rBjtG_GGRY\"AZ3d6s/El6_Q`9I8;iF4Zn)iQNg<+T>7'oEnTEA5?6@nZ,d]<,/s7o\
%?2`IXj5(C"%kJ?sH\k=ifcB[*fG9oC;kXnNebqdeE'9!gid]TY2kOiUIPF0FC/(bZak/2=#.'AC=##g/D-X9IS+Q::T+6&.,_ee/
%*q.'%Je1&o_'GaZmA)f>e.2:lLb"c]iWm.L<?bj6H,@,;'H-2+eU@K7*"O]8.NN=9qs7*\U-&p2&Gs"$bSDFt)<t>OTTuu,o.QYO
%*a9M>qIo_6Ju!Sn1W`[lfQ,Ge)Z=MlaA5#Tl'L7cG7hLASJ/GFdUK*NXB`)ArIJd2<FV=J$FTSf<emDNRT9l#qO;TR>(0:TUF.=S
%Ae[rMJ(*hOdeLXJDYb""RjK&ECoT+BX-m<d"nA9Gb$,nZ%bbgXZO*D+Zc%,S:\e\UarQsrUSUJL(EsFW]iik&K466DDm/b06mh'&
%q[)KU,Yoa[gaqu[-[3f/_q%CH;b`U'ebfGIOR+]:@9YJLd%W:I_/_5gg*Eb<S_qjB<pYr&dW=Mc,t7Nk5qBt(m#Ln<pOIUu13Ctn
%5Scp.cVAF11e"9.=5?)4#-jq,%39"75hVc)n=oU4n-bjh]4I<!nM42GSMI'8SYMoL%UCqf6Sr(M\SE*Hr^t=T/@40SijsTChu'.>
%hIm_XeeabMDF\Sgmb(=Sc)iZ&1g4/YHA3Hs0<n_ada?s@fo@spW=&GF/uJ!Uh4dU$@eGfR6+PcVY@g5>]9F5^F*UmTolE,3*)e`l
%qe>ZuDLOEEfFUV"W#-sl>g&$YK-W)JpV*1F2_<f-[a#k]l@d6ZjtG\G%:QkCM^P7IbAQi>$$Xh)_$/Gqrd53f[27J-M+j*u\t'rQ
%382.?Q30$_Zj[_9Q^CRNIiNF:OsV9*5kNeN)p`;Ur+.K7`ha_*m&KWoDMT+C+^SWK9?bq8.3=9VSk\6)n^._6+<)c"G<6)uf\l4u
%$+X)`L&)&2?s!=1O.2Ul,sk=Gr6jYdl%[D#BZ`]=T2]SpA7B+nJpj1=OjppTrq"5S-Lrq[UGC`)'9('PP=5G3RK+LriS,LF*GG,N
%*!E6$,J9+-c;N4ZFHjR$h9F@<hYKItOCW$$QfNoW&C6[I-V?=ah5[RE;A'JE-0q]kh@9(dDCGY56`"/BD?W;eQ1C,QmTY'P3i$/q
%<GF]Sc09iiD-O?`[C1B:ggK7%Df#>4-A\K>_e(c##;;NA0I$3&lR&('lfS/g2Dn*VGu!5f6*U)q;Bl]4Zs3:O1oV1WR*Y2UT>QJ:
%)Q,MF;M'Is3kJn9-+;/?8pZ65X6r3E$aN35rJoJsAC>/TK]Qm7Xn0IRg"-WIK+P\1n/Y.i#)V,eZU#"HD[2b2iT?j'Q6"Ak<^dY@
%ZR;:/%#Le*7Is;05tQO0:@u')o%,5)S)nAC#JM`UF2l1Op86)]-TS'(7QN^B4efBjnifobdKZ+fQ?Ca\:S/UW7DENZ1C2dC!T*E[
%^>"d^SU57<;)5]H9*Oi4k>SHd6_._#5dC16Vf,)ILlmh"A_Ib%hD-X#m`bZ-.L=jkET$$=klg%i<npRdHGFAu,(8;0dfX%2H[D@p
%G)kY1r_m(1\Va(^QmpuXkP0c8ihILXLh2JQo@JaLPD5qq0(>V0.kcaI#SJ,qNNZ][i:0Mn0gWP'NM1XlRj&MU/kBs.2\P@+O!Z58
%8BZsCWD1OI.fP@R6+SEBL$9`9Q80JV>M\45FSY5ZM]j9T":',qM8A^qEi+J2X.)KJp,>De<b<`3f9m7CSVuV@]dIDQaKX,Z\gIuN
%8,'sG#O.hIL;lA2'10;/NO+j(U4`XS-_u[[+F8-,baabIMK<H;'Jh,4MrNZJFA^8PO=lEC'=.;$'AaT&ZS.43fI&Wa>[G2Mc_F,N
%VM'&lRmZf@2^KfjV`r#Dhah;I4IVfi@BMCVP*R9]Wqf"8MO>()/RhO)\f,[f78U5o_9OQ%@djo:#>pc!e]j5%q3r!'j2ht[A\(-)
%k+_SXYDJYX1@0CM/rG;Bd7#e]6+SJiTm9N%I$!cQR1I_/Z1GfE-@XgkGM@,HD9qTgcp>5iVB[Y[M2;_j20$u/11ehK)lpa7VRW-(
%"?Uh&/(id)r&bN2b^3V6):uVK0sP2aKU'3H]O5us5stokOYen[EHrA&?fr.T#p]XD[RWC71+OW_F!Z=SSTltD>^[kN1!Ug`3)Vn+
%?mLEd`1/kT9?`Nt9$4b\r@fRC:)upHi%LW^P4#T<3g+Bnbd9ob?Y3g[`lT/.H_(J!N-l2*SPr&,O%2RTh+&Xqj4P*kKr.C=kb@r!
%?%XGGKO@Rr8^Cf,K7mmAA<*HuO@PaPYU#6^__8p1$)4d=69T*04bK.0P+KLQ23OOs)B,3`Ou8Do_9<fhcX=j58^CdVNNbE+CZNLR
%TBdBU!-(Ika!:P"R1#28h^*+b]m)@j]R;&gYRD(Ue<<!c@O-TQjIA+plcc&u:PcYsr^aM+aW!g<;5RNm+"/p#(aFA=lKJO!1"$cg
%*gG'6:-9F5^-30$(emb=/i+c93Z$%Jjq]M9,7Jq]8@es\*@0Hm-$(?fJir[]ZF?DcP((613Kej-bT'3pi!TsA[jQBHpY7BJW.+RH
%q$_>Z+Qnc\?SHOkfU/6lEb"h[p]\jg5c?&VUq\Jp6HD]f4-Eo4*pUI'(7?!Y.8e:\@"Fm\_K/ZD#VRuhVE,mjXS;&9Jl,5(PY/S_
%<[O"cFJY#M<g#rSX):3AReacK1,5E7\cqt@e4npW@O?-[:\hZ,ATl,B0dmFSTrCkG]^#JM50+$U6V/EJ\[F/R8rOC%-p)NC-$G[R
%IAjM3:$Yh6Uhb4G$&07U,@ciaZ"d^q0tUrS)UuFW*1H]>.?ZBV4lKXZMBmm.\j+V%Lc%a,o-orL)m.s2jUuK)\'6\5D_SE\)s!]T
%9AG"@&t"'h,t90g9@ZUM<sR,%QP`^QL3[Fhi.fr;23V.)l5,CfR74d6)Ei2b,$n+W@iO5S.%aNj)P)l23K(DNZG3W(2^`YV>%Z]-
%im79)U,7&n`LYIJ@(C\,(\.pm;&Ym9G?N@cA(<)#6Sg_^,nagRVcQ^RILPW3,;G<RZV""M]48f180^]sOEf=RO^:=Q'h=gt;]`3;
%j9NQAbt%F?<c\g7=j(WE\ACVgW];%L:-fedftf,"0V4fm>c14gD9cn2bU83Z?9X<DBuEPe5X?.U$#WYJ<!#cMNS(N$';V=i7_GHJ
%jLVQoE0GC2F[)c9YEOE<V-!-i7_[W<]7#$LMpZIo_n[jbQjtdq,MiXl]3;n"(b$bPMD9<(3HJj,(H;TaYs@g@7<((M(WTFCWf[uf
%Q_7mfk.o%I-@(F_'.(:n5=_#!CYcQW[pdf;a?rmq'R<RRQ$u#2K*2F%,H"aB]QDIS)%8H1N_="lb"I\m+MknK6=@%0S="RE/MTbm
%.Ojhdoe4;eaY3Dso0Dl+0b5NW?I1$>p'&,RN0tO#:>/6LO?8o%Gp#-;EbIN2;C#[5Hc!>?'M/X;FFU5rOEhtb_#qe6)!!:iK1lBh
%0h<PF0utn"rI&[G&k!_$:oAj)(c6,#DS`-!j:q5pkn7M681q`OJE.>R$:lecTRbRU8c`k3qq3Sf53j)0_FD8J+EmDIboDg-GW@TD
%I4:=53pml/`^V/)g!T01!GS5fPS=Ie=5=t`'dOD_mNSQ'j9#a0`>I?^?mcU50h;Poc2<6"GW@TdI4:=5St4eEBS]?1cAKB`-ce-+
%@Ae\;'+AbK5!c&sj:e>_i=cV<83T>:J`IIQ)G!'.kO!Z+-$NSfln1@1,c;cU?f;]0,"Q%V+G+E),D%k/Iu.+.*"E*5E?f[so/jBY
%&j^QsjhPj-OhAViN=pEc`Y+iun_?M8H'LBH[7QJs`Eu+<\YKY/?N5_B187N;AoDWW)=+5##%fJY$7%/1aq3k"?W,aNT'&XGTlMoY
%fFfE-Q&p4;q,&^4;GMtp7Xj$216al:j^]d[,O2I//kFK+@>mgi0Pn^887L))Tujj8%-;`pcqFTLM$3A("NN8r,,oY2r/h\tP`oP.
%bK3T38CWI;X:_T^6WkWjEn9%0>"p?M6+da2+]M*h:bO+^=X-ccL9a:YP`4&+I4R`ACP5@&:tA1%P+erh/gWkf,>h'f%HjQuDJ]52
%6r58*RLosTi>:TW;AhG$`)(D2f92gANuSLMB6Drr,[jY/K&EU*66`0k%*d)*A8%Ys1_iWF=5=ri"A:Heas`)2/!M@l79UO<M^092
%8P!A+04Bc8SJ+WdaJ#"0Os1PiZP/i:%?[I57JGueTVTG:3>hmnS;^?3$#,G=0hMUNXrC<=+:jI5OXMSEBd6kXL=/PcS.+M=4E'Dp
%/\0WIkB;-qUrg[sa^ZmM7_#%K1-r*+@kX:XYh,)L=T&CcYau:,HhA2t`eZ*!r%q55)9VKBTp)C2OiYIuN<5.20-i<q`:+7672]8W
%%1S"^j@/eZ;*hjC[:'5?PT`$0^W=kH]9m/=QEa@@XcGa_Ab7:BV&*V)[-Q=#MbL3OPY!jW^Q?Mb'19*I72]9B%S_XTjAkr0Gm65$
%$uWdYD:J."QBX]0U2AC\2d'(VTr.W4Vk4c6!S?$qY?5Zi:L[S[Kjh.b6P?.l%*d$cA[!>uelis&#&R.uK^nC8k<`*Xk]9W!!L0hg
%^5c(eAoL`fJto=S>//:^KR64g(bEdb*`nV@dOrk8'\UjDs%p(L$WiTZs-omnF1`V_6<mHD:bO8M*KlH)<$ql-n`>\DQBZ)sgUZZ\
%*K$FAS!?!iOttC4)n#Nnf9?k@:NETe,7Us@_<O="9po`nNBOikq3@H]m7"F$%bH[_3"!Gdd<5"H8m2Z*^J,)[kF+01kd7d!L4[."
%;\b];=,p\@._q.a-ko%4F%mNU-Oid-?/elU#;AKM#M#'T(\E#eE=ae>JqIL'%bj&1+[]A:8&AT#KLA95':PJMS`$CK)0I@1d?Z8F
%0V4in=D3RcKs&":OqD.n[5\NFP[W3Zb2E$-.!L_E0fTDm8W/=";&T:$mAHI!m>Rj01/Q*hohnL%H#Tk5N7X;F^s*da4D3fg*P(":
%B/eLZb.nkF6%dIeDN.faU2WsIbWa<LIqC\,\8tl#;4/B0J".4iRT?ts*"E9Z#oG[gm>Z9ocNZ!OK;3RV]_7ed%F)Z566\_78dThJ
%(maBN@X)oC.`:SrTrCeE]P.9g9%`VjWhn''Dg,i/U'DT:MgG?:Rtotd"C[XNTLJGqKpj!F2/a62b!S6PCU<_X$^$;!jSIJZma;](
%je7a^.R12.g+iE`>\+C>D-Z!flN_FGoq4G,o`u4Fha1#Es'erHa-WN2GTNo?Y%]gde16_!]>N'*Z@?*"[e5,%o#7,d`:eOC1VpE2
%_,K?RZr+Bpc,h!Th<==U?+]aJcn8Y;>9o=RSibn9AkF=k/t,"T$o[QMLc%nbkMdb7i(lgf^*`:QFPuad8g<34UP1<@;fh@B7E7b3
%cO&rQcDWUsq`.gB;Y7XAjaBSEVGWR":*XB^KE0?L*cR9\+C9&Xdb9`)0fAQ1NC7J/6BUYPaVc[IM6D`c5HKB<afneB3Ie9,o'nAK
%[Jj<>dnT_>hV%^iI'=b&B/)_#:7nEth"kqdH\`.E?nI,aDRT=c>#qD.n'.Z7p(Y]DgS*;c/<MWU>`Z+B#Q8CKOaYN')=$RKq2XZ"
%F!R^u'!I`gJ.Le*g-L1-OF^hK=O)[#e$6"o7e)`W`WdT2eFn\LZN"#XS;7So:u'HI6n>bag')aFgCQpncVAF31dmKn(Yq<t#I1$u
%5PQ!rdk$dJUeY@oM9@iCm%1qpGB<B\Ul%VSBFJ]jFLRX/UZQC#n<0JF1:dY(p#frY+8n+@^$Z@Hp[KFPhsJJ?^-0*IRo^0e[dZVU
%EJAU7/.+5\S[UMbFiJ4A.d)m2ERosciF;;;'>`KLG3c+m0N)m<gPKO-8,LVLOHYQn"N0*NbB3A4bt%IDP$V+N`5IOe&t\a:AVoI?
%:iIsl*Oa03Rd-]eMrn(kSOh_squSJ+qZF'9,h"^C8MY#Vc8;38+rUJS)r_`lL%!/ta]R?+[9u5p5mEBnL?JP7(l*h'5'49*hM;l0
%/!`A:p1nmaR9<ZI.R<XP*U2Jlp>/NnaZ+YchR[M*"7*mOr)Pt@"2:p=qr;PDl6fJtAd4sm(rS83^*eJ5N(o3WdHdD04DXh?OZ7.<
%r(0O^FD+JP.:-BW?-+23V;u'OKE?@6nIifsi.<Je@tPTW>l,Fp?%-E,mSDR\N2ir0qGq"fi?*W!)052tB:m"(NGq[,_5L!k]JD*J
%5t6ggiMBUFd*3oG8-nQ(N[FS^J0b0qXsC9+P%38ca=/JdMWajUgq-1rHhh`iU*&lMK[34=Ze;g-la1VGoRtTo'A2(:LXA.a^A0i]
%7f^DZEodblRM"QNA5D)*?P<HmMjVC"9r')>[q#AY)eSne]COIl%.A1PFW1nf1V]%W\#o3QI.WU4cX=R#0"@@d&oLFSU.QE\n$l)M
%c94^UPjmqFfoq#!/m:UY+m0=.RedVuL$3Kmj0d8lhngsRR+Q1]PY!5"Y/"J-GPC6H(JSW:E;;Sc/Q6"r?QVi5+J&`V1WouK3M7KP
%ggto`\fAUur,+J7.bE-:_S?\09$".Gp=]2CN(1mIA@2]%?hiok:'(+\V#N1rR,-_]F],dk&u*%<?_qO"C[SV6FNng(N/.)"7Dt:p
%@[B7MloA>BkoR!NiN^4G];ssrc6VN&37=T&8UoqooaXWpjgo7u_2_f-mJ?EnF<;&2UPI`XEWo?WACV1E*F#7cgS?S#riAhp=2F5N
%qQ/jo;tgd)-kCaQUN"J:T8%[9E'X'e;1A(ArX'0m*51J:S!t2Ll2PD*n9CIFns7_C:]@._OM`>Y_DY:F$7?[X!b9uYh1,+D"7C(i
%nY(e&#/*Jk3<;+!6qOAld3"N?^D#MZO'GS"^HkfoGrqZHb4eFf@Q\8pe-,L=U[PNK=U(,6E(VI\-[?$l&(P9`7tWm826c-h2kdH@
%J,Jd?>4"r_2LKERWmrQb^IL<?418>]l$ZC;*C4p[D9^R)Zp-<um&HF_Z%.Y@ahopmo[3(MIBA^iQg#\qmfCl4_>$KaOlbl!/a2LW
%[)8FoNet#[`N=j_*I_'u2oiO7gSnbro_o?Ndn.-QCFiEi-N0&P/;lT%=^:k1"uPGu`N6#*ZgRN(p7l-JZK!/nK]PM`B$fh(I@Gq1
%0SDNdc$hs8U5FsN\,B[gW#\c[p!1_0lQiHTa7=(_)GDg1ehY>"d<4*h!4cV50eZNVq>ju9?,i/&C=Ri1<crJr]/SU6@6Mg:^*(cr
%@RR(KU.7`/ETl"aB<s,fs#M1qB[=#2MY,HbTj5q/re3ZA&..qpD,,&"i!(5R`mR?jaWR,kaJQc=/ReLc)74]pniPDU5Dcrmjo!(:
%Dt@pSH#<:3TJ(7H/>REVB7Gb]C,JNalM_H3nE4n0o:`c#pG7K+,`=-`(bSU3dE;R%BI7/;&rsEDJst4umm#'O\-cO<WZOh]5Ro-n
%&Th/_Xa]0;apVgsft(DdaW5f0jZr59-7dN#TTVZK>Q**R*`InES!=Q/l87pEQ,j/8poZe&3R70J-H'EH,g6idQAF7)%#3R94A?Z,
%6D/P>7Vk5d9X"eBkmMBG[ZA>"D19"JVj3e-6;?CPl[OR83M%LB?35KN;'qCFEI[(.lO(DjHh,9"^2]Lo;hmFmCS;u0/8/n;C!nmc
%B[XNJZBI?'4G6#7,5.nKe78057kd_jE.^2c>!Je5=[M3Zp6H\arQpDA=W5!62T:OkkSc1K_jfctF;9jmO^47+$Z?ul^mJWSMU<)C
%:+_7Y<S4GDmbW,9*q,;^"\)!3Uf\B)R\XhmULInb?M!t7:^b,)\nl]=Wk'eEouBq?p<s:7=1`+a8LN;MZ"E11rcuA%s%M'Q#)G[M
%J<]6LoJ&Z8r$oZW)E>=sb+K!='V1ENc`RblHCFE5)$`unqQY*4*5?"6XoY0]l3;NXDnV2OaR^NEDElVi]Qs9!kbjbm7HGY@,:2.7
%Bms,ZTYH5gQ2QHa__iK`4*MEeB2A.X88aoKnfF&lduLM%HBf^gfKR.W`mrtA:$\tg5ON0VSR'9N)+C>"r3sa.*-DY]ll#GTgu877
%M[ohKVPO+-"qQT?1Bg`RgcuBEXqXpN*jV.XM"0\(QN='udiRt8D2n#\<N&)F$)2[>]N2TicjW:BDQXbL<^;%sme1'GC`X7A6XIOE
%@#AYR$LXN#pjeSbZW$+6RqC-IY>:(jpRh3,lm1+8Ns2tZ<eeaO*9`-@@C>-%)([u0Qg*/q@qKbJR_1kT@I>&HE8V#U%R#L<AVb+;
%3MPcs$1*(cciX3qh=F]Dk55rFH3pB[8H0$2_G)&:hlQWkLIp0ir7mW94(BA4Y92#)FK'2jS3a(aA<4[1.PXs6&V;D'Xm0h7(2RpS
%O-J>bUC7qlPGTkoiA/OA#i^BdTI\O)3(%?D`utk[NY01ichjWRdQ0nU0cC8le%PS:E6_r46t78)G<bB!T<P9!a[bEh-b$aZL=oKg
%f&g<?PI]E.2)mOA4@Y;l5^H&O6R/i+as2-C0/lPBGOU"(ASsmS^o??!].S-4]Gj#9=8hHf'mue<Q"O4(BqX"RDMpa8>:pFunnN8P
%RS`!RC?qhMMgHhjE+\J%bNR:<L<s7LC@mS,ISS'h"1Nju+dLZi1L#Ll4%N^+%a0W\'b]_CYC3h<=$(\)M08@G1-!DBq*fHHUUm0[
%5ib\6GVtT=3?Q6d#CB/6f52+diNQIc1.hHCe@XZ,[;keY3PU4'IcRlG4'CDTH[Z*0HiAp?"UE(]`DEC7iKJ]/M*=h!=hGjIah*Ut
%@<-"%GMKs@0?C)^gii9h_]bek#*XbFaua!c/Z!(HY2B*83L4>AKZ%&]N4poV\c:n]BD'pfN=,*3U\@NY[rqcDa2`dpqp/H?-J\n]
%Y7c/gc$Jh0H4>1!L=?J3SenK#JZCdi#tE2A]ZMd'_H,U@V:kABB=H1_9Nu*):'=WY=Z\MuA[>+;,38sq^Dt-<m-Iq<JY\N6T4ufR
%b&XTUV]'I$(S!a4=PXs3pW)190mRi-?;HWk[muEU_pK_.EK:;:UX[X'<),.46u"!^_tKtVV;dD1[D2)+qt-P?o4"O(8":;ip+\=Y
%MbGVA+W[5g")#`LIDOYn?`\H)i/bRPDdMaRYQ*phXr<U4J8A>p4+e?n^L]G`]YFgFZn;OebA+/3AH+hXj<oKY!3HOp/+mOYI(Z?.
%AmV#,S$dShl"X9R<6Yq$:r#sIDmUOL#XGEr38!EQL7fh9+E@SC<6'#rEN(6h'AI>'?r2`$SbG'e>Q<8-#j#"D&&7q@N@kGfMWW/J
%roOnWeh)o/Xi2bkc1#.(<OdN+8t=EgN!R@dYH`N&Hu1j8[?O0jU.;\upi[>=a$*BC,iREF1?PnnpIr)hNO+#TVapr)+7^2ifc?:0
%F.kUYoF-j`h*39A$op+IE-MMHkc7"95"j!;)ot$%L_=&AcHV;$)t:a'2;7?]fM8s]^]",grpIhAr7rIPs5f;+r;!rHIsU]."CpB7
%hu;4LrpikB^]3955P0*tHi3W)Y3U$+l20rKoO#?0bE%/NJ,$?/J,T(bs6uXTd=;.^++AUcs7Yn\l@43Qf>%4#&-)7uhuE*dNo0S2
%rV+))oV_/-T1e]_pcnWFMJ)Hqe*3-;H"r+ZUA^\\orRP.'a9A^(7j`Gk.Ve:*_3h&#["58Ah?3$B!+LT;#KR^'/37d]>=&Wj,5:F
%Ap27f>]mU+86!O:.Sq9CYqe8SZ-!cKb$<Hqfthi[mQQ#%X8j?Vk+>C^J)>g%o\"6TC6=cU5M'I8g6+<I[0N]=:/`/oW1-_M*:ZAF
%>K-T:LP&Cb[r2Vj"q?"V:l"')[L2Pd$gkh=!3!5IOH(;BA%F'=@:"[0;%mcp&Ds*RII6e9T<qKn5_g*4OraO0"1Mi!kOjCnlXIIl
%@i]Hgr2N:L=f:DATM!'\:Nl&e0M4Te;lsi7Qh<'(U,PE;"=d9;Jb^NDeH0tDY,I@tAr-iih#=HqGZ!V?'(L+=L<I[ZoA-Wnda6K!
%6s_bNfo^Hs+EOnMO@ReKR)<4+h-qb9S#m@7JlR^S]]s>uMo6E>>O-Glp>-:eH'qhVg8U1P)7%?%GkQf3Td_`3]'B9O83>YU<Ng5-
%IV(d7i9f95'h8>>CaF$)gGeOefC3K9Y)KooK2iQ.Ta8B$XiSL1A/D@nD"BTf@/nfMSUTqh?Z38U&+grlS"l4gV[\'\-[0q3lo&d$
%q9#%)5FSt"0:cQ+8(/A@P@":%[8Un"GCW(5YVgFY_<ZAZplC-aWB$6Df&Iq46]2rKd6+L22K74D*-rk=HZ/B%7>kX'cp?]pMTE`Y
%".AX*H%IRZ@3.e:H_aKN5]i8O0U2ra(U^Fn\g1VSn!@=$cpa*O\>K[PZ_$IWe?Pa/L`t.rP@a8CNaoA(j98.(2[u>Tf93]l;ds3"
%q0T`G0XuT`94B$%>\8n;UY-ZO5EBsLaAaN5?8_a,b]tDp/?E0bn3XV-HlQL]o+tl]Mr",B+j%tR6i1A7*0&;T%:4's6`K)(KFRd[
%-;S!cI649G5=n7DnLblcSD,cHFsi8ij.ZEQ^KQ?/OI0.<SD[L^MBmU&RQl<cpD8Y9*Q,KsTC(P_GlC`glDg2B6FHMU/`_,E%]M%h
%Dj@r_5Qkoj<X2LW0=mDnF%R\s1PXO[7([iF6h,M%<t>0.ieG9Rn6"dIW@qu<$`7]+E<1Kma3\sf6J&8]:AN!i;[TR=EB(YB8#8$3
%liN@[ra8+l1]@q\b][2$Xh]9ri`C/5e8Fjrhbrk4WM#_,7`lAgnIb'NR,f!goN06pY(XJIKD#CY.mmr;KC34]R@$dQVgZF200g_D
%Vi:bL4M,+lm71t#c(V+J8A$AM!9QuKR/$RbO,h+u.S*c9rAIiuImt:0K4&J;`Ze8LF-k4OSD>puEti($[lX0N&-`c8=ID>2>\Jp=
%KeBrdOu[#>O2G^UMQ?F7"G<8g8'Wko0K+)MMMfJk&qZ[AlRM9ab0XaEn#5od8dnDF8MX/.5TtR/_po7ohSnT3314cAJ@OR))#A,G
%me6)%D74Ka@ZLHW[<d_T;,))\OT)^IHW&H__S=cmLI\@L%KCG1%!..N1J\7-E?1d2DRs,"33D5_:56Hkf;XGVQ_BW:#q[>7.s=N%
%JQco?;adA@Z+.hgG/N;S@LLGSWDJJbkl)e&N$(SO\!]E-S7K*'?G\HhnSZ'q'7]F'jjiAh@OQiCZk@\B9W[aHKTkf#aCN7MHf<;]
%clAJ]V9#_*^CGf12>6\nJc=X33j&W:JO]SEc"fki\W9pPR[GU59O\Z1^7-=1([(.=66k,op3m0'Zpe2k'U`'kS`!U`MBmm.\j(^3
%2nOc.;.tQ@6;-I;;RW7<#Qrf3ktIiGh)\m6crjXC-Ph][`k@Q!J-q',1ar!Vce,)b@RM^"pH;Gg'O&pe`uH#>l]jd]PC-]g6D8s%
%:3i\_\.tUic4i>,Q5'11i`B#k<*rg`l26i@3#OA9?k53&0k2K`N%8E;d+`b1%dadm>edSc`6);Ii1R_317<.-?:]/j1l%6c+nDZ1
%")'MoKP<88ag?]ZNXZbA60sgi[Ks]8`DU5E[[b%848bJ3Tam=r[M-7tN+XLt(E+JhTo8?2Us[iCFnV9S6)+_r)SOJR%4\nC@Yi'V
%\ZUQk9@M64*72Ns&N%1G%J8`/.%iH*U[Vs89?bkC%"5T4GC0)N2@#5uosU_;@jk!V+(lA&>9jfeBJO2(kc<N(cD"alA`\V0S`$0R
%31?+s,rI#*0oM?Va0!mcF5-enaI2H"a\3!GjX$$TNG3QJdBq7?RL5n4Ms`6,d1ZAX!J;=<dMjT$;4>F$`-/9M+d)B=s!5?nf,h>S
%Go2H=*6=6TRPN((&eYMW\KcoAp;]cGlle#g=u8%Mhe8-41mN'3=06reqFjL(6MianYOqY6ct=V^*DPr(5piMS:'ugtP0Yn=-.cth
%#DqAF[1Ii(#*$mWk<<:l)^*"T7<S_];-,llA,>[Q--/1_=&i.5+@Qp_ZSUqU-'=nJNUB$'5%>d`)'Jejn[VFC(i@,9jaZJp;GScK
%MI<3J]JjLa#/eq7PNQ8m:kUuI7i]l^UtlA^4a(b/L-g&s$W+&ngV&!56T7)2jd2o'LkGlI&Z"Bmee?Ic?.5h<&7m9ecuBHlP::F`
%'fQhLfkj*X[iu/Bi^;XV%J<BJ__XW:8Ok?qE&I7Q.("YZ2^PoE^5\a7N;)]fLZG[a'EngRC=Mf^n*7h8&m/n(k"m&Of#oa8''?Ot
%qncdf2%"oEM;J!7bjCec7kBjYVNr_$7dlsFT@k-Hk5XZpd\Nm5U2i"[\S^$/Fd+_E`2YO)?8W=P,]6OKgSZnUWbXB6)S&k&-I[*o
%N7$\ha#Ze&k]<Np-cr\??HmX*-<8uq:,"/tBE7i?f^'J\W1C1g4(5:mQ7UsfMjIJsO?BJ0_5i;_aVcQjpT6Y>gL8pLUt1`coHX,K
%9Af*XrRO-DbD/NJGACm&"?s[4^E(49^LnETnq#;!OeJOtFegbRZs/SMGBX!7Gnt2(A%\<?#p5U2UW9[[_and7qE,&ShVP-!7\eTi
%fPK#bFBJ_]o)uX=D1%Y(@Q>''`*6_R]J_;^/Vg2E0(MKnQZ6VB5>7BFMG8IJW8nXb<qq2A5L&ma,)<=>GE_/"NiBn:NnhfKFA19p
%&JpgrchuX)hM*4kps:Jm-;UWdU$=Y_*1.Yf(R[W^_iT,nqFbd>][;lu]+P`tKsD1q.J"@PbZ6_2C^1+IS2-/r`>,U&!GPdJ&i&aq
%+u%,tn8_P<YM,It7%tC83:HPRdb+`on%D<+*B=fG^7&:B+rR0/'@)</aAh@mpW$*B$eE4j2Xa5*'h2el"Pi6W=j**&J'EVopdsdK
%,c2=p29VAAi\\';4'`Fib506:5ut00+/5(TlkgLlC\nWRV#L(3gSIIk4sAIsWPYH^N/9P`'0fM8\lfbmjRu6DnP?TeQFh]lgbRTD
%=Eh0JC"AJhk!;/.GZu_^_H:V8m`0dr`6PRLb\2(!g@&&RP@0bRP'f^I6)u`u?cQQE).B<I"T`;"X;)trK<=E.85(Q]GKT8+=qWA]
%5=?c[hj<In9dUCl2aj"S,?%7%Gbb(E=L6Z_'s!WH\DXr3hNbot3(R%gfsu6iga0gp4VD'X/!35;;E_O+7R0]cZpOqV>eWAN7i)dU
%UWFDIFf*70kGn?U8M`PUQX,(JdeN.m">>mHf"'ue<R-WHU=_2g<BbKJ<F%EtR"ime>Qql<l/j?SBrr5BU=4!g_t)kFq05B*3[CaU
%h6KECdrrI[Oo(\rG*=f57''h!bifH;1EXj5o<KZV*_33lJhg,sZZA(f&\l2@h*42o-`baB3Z8WK<pTnN13,Nh-E.9e7QR84PW:]?
%Q)35`P07@6QmcCHj[]Fh/O7N9)\h`N>@W[e<MDJ6<U6"Ak$>%ABe9_BLjQ-U!cI'?!PYY\]gb`M*Ci=u[?t!&Y-E^Pj\W0gDnb<W
%$1li@GT/b&cW<Z"e#WiW4M,+kFL-\`cr;D]hWXrSctCd9[Mi7Tl15^ccb!2??$<?qk?lhXP)OmGjgQ[u1o3+MU`Ws#bt.?pMQ-f_
%?B6s4c;rhb-D.j0j#D=<`#OV5STudg'B5tnbseKl;Wb(S",QQ)+KK+>6DTA';h\(CdQ[m\>>?Y`mA!rsB`T3/r$,;rV92?YL!oMr
%Zb@l<Z9qN\;*3d^[qT@X'im/c$JgIue:7,eY$Im6ffX&f-0<#7?45!G"#S/YL*@L7/,7F`?^.u+&DaH]'4Q9CAecXN/L'>"'0`po
%7^X:pN9tOY#*iHh4!VM'2><A>O[1GECN\26?3X-j=/WPD)b)[Z]".S2d&r*rPUI?3=p=:1.doLeMA.6@o@`0sBQ/E*Kh-;e`#U>R
%m[3I!/Mr6GSg![)q]g?,>%H-P@-8GS7hW&?hR,BIl<I!5/n8E(L:u#B8t8C]Qo)?`rr"Er[g^4bL-@U@0qg@H_R[mP8EsG:rtKI=
%%@+.J["t#%Ju99pGf=XsHO[ma5+67lg(l!sW_+[7);6p<!^G&_oHjt=3=e37V*F0J^Yg"%.%%D/MFdC2pK9T8D9:&J4hJb5\UPG<
%eXT;s`iKrUfNIK\]_tPRM:76_c$qN]2foCgg1"-iItBU(7R9Z#Pf&(1c?%`Kf7g!.2oXa_9*J(rP$re_TXT_>'F!%[op$^7.qVCu
%V99AcBg%g+lq<Z@ie?OA<%(1AFFP0ThY`/62(]C6<8ejOQ?KJ!FGN^fC?$=($adKn?u^7cr&'4$&X1<uNN#IcI!5J[KKBRkfU*A`
%>.[.nh(eZ=fg9a.l00C1FT3Nc)s:*<WeUF\AKC_+pe%0n(k&h.8WE"nMIX)/L&<>QMCX9YS@[,Rm:[5%9,<$P"%>ie.@WR82\1G6
%aW9tk5Ik%YU#Vm?/m2^o1c_>F9Tg7Xgh?[($Ji8IThF[#^B]I9GdTNQ;5t/M-.]eG`DjB'd\!X-IWqlIhIn%K!EW9@e/kOY2DV_Q
%lQoP^7W!)6ToRnZ^fpG%lCCRBF(qJQm!Y@I_ORaQP)E+'a&29-A:)>$3IMsVNN(E&QeW_^R[Lh%S.r_^qJ>9bGDM^T_oL"+GC];J
%PD*AiT<7A:AkeP_._O*oiKc/ofQiU@=7Nh*3AJFA$:k=Y)N"W$UZ#)r@9[o$0(9e0cpK'.$-YmiZTI;2@LLGSUh>LrlM_Y"lkW_\
%nC;6H[G!B8c37^.#[Q,]Z!c*)$#`H68>8NIO**B$Mn<'h*20']<f/OC';NYUNcgN+d-!mi:\3bc,$(P#g_<N.K[CEB[ibCH`S%J@
%D6o,1D=Md)K"8$^>e(8[>/=6]ebU6UNR`bdVig:,-d^:1>lNMsHT!p8T<\$":[Y[Zq-DiIDiOjJo?lhXL-?7("*g,^0W37JKO]5@
%7%+bOSc)qL<rW;N7\HIMGfn^$0TI](ONXUcHW`Xk:+X_D@EsA)U*:&+p(Jn&U&$;E\nd00bM0+uGM+%;oM)B^TrDR[]I<almYmlp
%''Q8'&)bBTWpk\QL0@c!TfUDUk*#)f37o>aJ"O[>''#(]V!Vts>[fn'r,KRU4>*sO;lIJ4I8d#Rbj:]$I)HqEB^1`nYA/P!Vt7`"
%kKVNodKo_OgAHZQ"Ha,AjI7+uWXrt6Abh[$>R8ns&8cSE/UI@mYX&Zr7cK6@kbKBL=Xas/5dQWf2Rc!Om+O*P#C842MG'mA9Q7'f
%"f<nR[=:AQQC=Y>]^&C7[mfufKP.-TP3Fl@_I'1jDs,MU_CgoY;d2.39?]cN1-e`LTVaPQdi?3&B8n[`Ml)(/L,/KOG5%[?`@oN:
%d;Iff@)Q]ZAK"-/%n"jdE*A1ChM7e_TQV@u<s_:lan3"P,uis3>ies9C(#d@rEpk0,`ILK#H-*Ab@.t<nEVJY(:l=O%?66N&R(98
%\!snT1lHDe/Z2#VZf..3&BTJ#=^U8BTAp.!h'R,uq98huE-PD"4:)uY&rC6B3&W8<QpXHaOEae&kHea.`h\&8:GCArAcYOSf<3YK
%qd)mgnU_L.,eRg^#8W/7VPDd2OnX$`%;ht>-l/ndLf5't4>"CS_N79F>]fsUJ-L0pMB-1^$"eKE_5e?nOC,@Q*g:FSc_P)fWOLD4
%2%a/''!.?c;-\EJjj>Q(YUB3ZMY2U3nn)EWBO%LDO[=q>*4[.MnBF/PmFJT_HYCG,0nb:+nThNGPH8KJ*q4)bC26I%%GIb^Qk:^8
%k7X@;r_\\,G!(#?:DI`:bjI"=[)ONIkFdFin7(a(B\Cb_]D.Q-`/9Ne?Hir*+r@?h>%T]EhA![A4u0K:JS2At8WZf*s6rpp"?0%U
%BC^=!;$S:iWah;<kK"p_.?UhXDjUjNf@7VF)87tf$I>+\4#,e9R``.QX4G%C>FG8kXQ+(2NA"(g&b?iRJ4X>nB$Q<`FIED)fKr$b
%#p-`3BSr%_hfC;!eZfcTVP-;';^>d642J2K'U];6Fakf0Q=`J?_M@&Tla8H;4pK@#99/AkM'M31jN+H#*afUfBu[j:en9D.;HWA*
%Ok]*5$BcX/(YIZB,`F$2G2gV(1mtY^`K,2>b"/ea?CsfSRjEEQ\2&qV/Aq2DA5r0H?4Hkd>e,i^m_ePZ=aS7Xd2\nJPsIB1feSNq
%%\+.<)_()#@?`EJR4Nt6lplIc3d)^j3Ad"@Guq*i8sRd<*ZZY(<7t]W8bbjeXYQnkN.Cf3A/u1ZUbpYDn!)R:936JggDlV43$fnP
%-7:e()%oN3MrlZ<bYiLoBkP;q8(3DBbc#//3DhTLm+@.KkKkKudVR)K@jB3rVQnIjM(n[d:0`E*5ATE9*P'q8k;F3;TB<PcAidbu
%27JRN!0]9MjQ*Ki2t7Nq^l-lQ^m`HGOQ`d.-:p\ga;[lE_F!5*a`(s-0]<_5:bbe`.#+qO7S);F]nJ,o@p%j:1bs/EJS1fd`0mBX
%EHN`YS6fU,Mk%N@.%jgmb#)n6#=_-o&sl^?.OU`=i09V3igdW*Q",q:13H0F=1*MudN$5q^H.Xp0Pc[]`mq'TV3]46)\nd_?V;6J
%FqY?5E!QkJER)c\jX@I*"/?cU8kZ,,95lF:"d1>OV&qshUSr-S.2*[RAZsl_DITg)>TLsn\X<\KjlYi(NcNA)T1Q-ZP6h_KE`?od
%7rd$qAq+i#D2r%%ZaojpULZ1VPG;Z0nL$iGB(@=IajQf/[I,P*Z<&Z]/u1b]r>V#`dn:ZL;2[@nW[m8J.)J[K&h=G;K#@DR'%9FB
%Eu0=HXtkd0MBVMao`HTt=bFE0;95)oYYgsXI'nX44U;PtA;YI^B$O,rc7#ca_n>n&$VRSFRrBu7F,!SXMq4Mra&+P#qND3qIr\M'
%-7<e4C9IQsW79$YX\pscPG;#sFXK\UB(@<>V<2DaI,0XkrH`X&_k.o+ReaVe)U6g+*&X2,ThKV<L[s!V+/d+UVmmcQ"G[(=8fs7l
%Qu'])jX@(O6bVtEMbL5).H,4HPK<5-e*QF"VM40Z<%(1AFFPT*/oG6P_[.=L1O[6a;i=^;.;]PhlC/CmA%-KqmKQF;kq(,jMdJJF
%R3PWJQZq!V9/,Ft$$(E&q"O2XYO\m5O,I("k\U*'POt`UQ8!LJ&f_tNOI2'fS@eQ\PL8O>AA0LT0V4fm=D*L:I4gsQPU%';1;VpJ
%%[*?2iZQ@^UDtPI"pRXO%cq68l&HpG*QeM?6TI_YHARh4(Pd#DjW'^g\N#h;/#P`p\T2[<-Ws3"Ej;Q'Pcn-e>d@Ts7u;ul2ecqd
%M=^C>grW-*F(g`p'M0-'NtQX9D[K/kER%i0b.5_9)VV^6Mp`-tb/KpAF=R6macb(H9,QD-iH.\haE1aO2;$6CoTk49%473ge_(V]
%Kn`,rkb@q^)09dG-_(\.ABa9a:<$NYb/p#bW&*T.-RWCVro@V6ktk-pr4J`lp>g,[T%iCH-mrl/'.dg<nL,c%:6.0`3'>>b]>'"W
%Q\0isG6''/9i!K,&F<@kMG$<h$E(gqMNJM]+)jhG=#"P(4-alX1c3`SOVc8L7%0mSFS..3S;q!aWo!F^KKSBE2*$ttrO&EM,s10B
%7_W/_dg_f[dp8Jb(WUR!15D_b.IsM6Y7n&Y%CNrsQG5+pp<M+:YoF4WaW9\qZH6mOOC_>RPOE0EJl<Z_s7!1_ks:=J?.&S=7RiU.
%'UV^bRG_1W8k`5;8j@h^8#,84==-!IbL'+T*6-B%]=O<'T/I3#,3aZ,bL%T)Ho6`qh_N%;/[m[g:0W.dMfmV$G1qN3R^R/^k>6)p
%>o_)99q*-HhG2i'bK$TQ2E@/RFQm2I>5=GR=h74$k'fph;SqZ2N^hR`3KB]=`PihAYB-B/aBiW^FCN4]6uY,=;e#T_F7/$sc;i<>
%<&-jJ'n64'-@;t\=o'\Q$rcb.o&(-]/<Xs3/Q8IW2KNd,J4AG^*9Q(^=]f,q0>Xp3'UYn*[JhF_Ndf:=n[(]!L;V+QNO6fK*0%>+
%P;sOqo2'A$9jZuGUg:[Xd7Kh?bi9uhq;0,XXgm,ikP$mIbgAeI:9NfS?+nJ06^ta4AB=6q?Z#d^\fAtj:Idagi=_1=eDrY;)mP_i
%3aVDS]WBWH.5J1!/1)>h@1jH\A"&t%bd>_:RL5n4MsdbobQq(_EIB%TX\1aOVK,R3.A/[(h%SB)fSM@FbXC)P(2Seip^AD5;i;9b
%89>nTk+g/gfSMEIcr;D^??Q:U3O>f^T2ArUo,$Q5.&f5pbF(.J9N8NQo#YNH6AoGb=3_5P,LZNnhS*]N+e%)X'5>aS8VL)P@V'G/
%A!JJuQ+<jl:t?'<$*J5BXLW39:.j*mqChNof><ss40`B9)QXh%CV4O\XL[;R@9X+TL0FbV-VgbRfc-#e1Fd?W1"<#DNh'i>%1V#"
%-eCCqBAVF@Y).V-4)[T]./*GSS'e?U()B__C8EnnG5c=7gp!:&R5X*r@T3k0&5r.cC+&H7fSMTNd%nQ.Ot`I)7%D_EQP'm^\W<#_
%4*Dgn1c4hrOVc7ab+%?eT<,=40e8$I0]=ouO>f1.Cl^jY__e+1)b\sf]j3,]=R!gSR4\pX7SG!.j2hUeAZ!CFkGn=c\[)G=YPX_L
%pN7M11G?<1N^Do5U!<k5Qu``Gik0mr8t1bbcJin]e!W2iU%9mDV+I2L\+7dughkhf>DudbBl/Pek6[I@)-I>T#q,H%X=A(lE0R*-
%>5]c6\Ju$7,-H?2Kflit9)e>?@+^;ue'ML@,Vh*'('ECQK-2I`)d>9BD386SmS#u8*tikMr,pM7P?6MCS>\4N5t`j8@\hF=5s=!h
%?3@7X3FLja+d+RP]i+#&r@JPj(eTp(,dqN9RGG,?SS;aePTm<Bs!hFq_47b=oOmtlSA-UpQM(pL/97?JBX2%\5T_@&'9pk*V=bMh
%)_(2L(5I"@=W@i)Y="R5e&^Ia,VcPZ2o2cA'H+KPFabTM`e&ln5+UWB+)Gsb(Sl>?p/c^/q6=C2--\R%8McA<H$**7N2?["+[Zq/
%S6Nik.V[J+]Q+!"bo;h`N&<Y1%]kh**pTPHCUd+,%'Yn,FAT8<#>U_m-J@?MRK9V8puZ,8!PR+Qbl##AH#'p7?d>Gbf$hc78OfPq
%`%_tH;IGbHe'Oc),Vh*H]s?cpU/Td_X;UD8kPZg3^VD=7k+SbeLqN$P8D9"t)B2l2<n\NI0dUY-<EW%t=sW'Ed'\+f2e`=Wf'RFX
%dUjQcA=+Vh`,d;rb=mblc;jJ&d:W:lk&$M^Zl-UuXm_O^H';k19B"-H<T;4iSN0'fI<>4p21o\c)r')'3Ff"P&0U-5!^kl3aj&C"
%^WD7\-jOgj@k=!'$nZVN.W^oLUVDuIRYUI&42\g`3M2=eK_qI>&KsG3nX)k8L%7bO<iIkcF[F:r'.XT(_MGai)foXS2Ugq2au@GH
%b+3fk.[2,1]"c\^]^4@1lf<7r]A.+'MVi^F>Ipq8p&#_OniJqWc=@a5R*U6P4!S36b%[$[H'-]FRGG-3h`6ITSg![)qj/GOf.=`0
%43K\YY8*J?\DMQp[&MNrn*Da=PLlpTRsW-`l3q+S:BVS_BshYRhVo"#F680[^QXj@8#A(&,pl[T-9,%o,#anfg(3j<YOHMTB*u>U
%SaRJp&&7_IHOJBr4$.WV44DRG4!UO?NP&#8kB54irrj@K(!+McN$$i^9Z?IZmO?R_N;Ut]Sc$bi2#PYBVS:B?hg*%6DeBCdW4sP&
%'H0VMKLh3l2#6+Ub+J'D?CL`7:N#?<nuhHGc<\iNGcf7\a%gO8*1G16'Ub?7Ie#QRM\U(TO\7pRNkJbj4*L0Ve'QT#6sb"cW8i/o
%qiAi[RZLV!@J2SPc-nb1KW7<N7b-tmGO@u=[Vg4H*'<teBkVaT;dr'UGJ^W-'U[$JomWUhGsR\31nEIJrF`G]R[;jUII!\+&Gr"=
%4#rmHBR$*\)Ek9NnN8%7i>Bo=)+2HSCGO6-o6.k$P+/"hG)qdUYoJH^di"ICkB5AHd3m7]+$/^67Mlg%Ksi2?gAN=XkB]$3HtYPA
%HZW>29Nd_Y6l:+<4O_[H-^2Wib2\jC.Wu>LEBPtE#,RYL1@4(JVP0tcMS//%[F<1qr=1+?GQ4oHrpTmbLNhYSo_jj.I+*Z(rjV@q
%p%s7<n[h$bl2)QPo2ktgDr6!<rloY:rppYMq<fons6orZ3q`=Jhu<2aO5I_J\,Z-=rrn!=MEgn'Du]eYs3koclMgs)mVB9~>
%AI9_PrivateDataEnd
